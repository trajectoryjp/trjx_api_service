syntax = "proto3";

package trajectory.trajectory_gcs_service.protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service/trajectory_gcs";


import "trajectory/trajectory_gcs_service/protocol/v1/resource.proto";
import "trajectory/type/resource.proto";

service TelemetryService {

    // GetMobilityPositions: 対象範囲にある機体の位置情報を取得する
    rpc GetMobilityPositions(GetMobilityPositionsRequest) returns (stream MobilityPosition) {}

    // UAVのルート逸脱状態通知
    rpc NotifyDeviation(NotifyDeviationRequest) returns (stream NotifyDeviationResponse) {}
}


message GetMobilityPositionsRequest {
    oneof reference_position{ // 領域の中心点
        AbsolutePosition fixed_point = 1 ; // 固定位置
        string mobility_id = 2 ; // 機体位置
    }
    float radius = 3; // 領域の半径(m)
}

message DetectThreeDimensions {
    float distance = 1; // 距離(m)
    bool collision = 2; // trueの場合、衝突可能性があるもののみを通知
}

message MobilityPosition {
    string mobility_id= 1; // 条件にマッチした機体の識別子。uavの場合は属性機体ID
    optional float heading = 2 ; //　機首方向。度。北が0度。
    float cog = 3 ; //COG。度。北が0度。
    float distance = 4 ; // 3D距離 (m)
    XYZPosition relative_position = 5 ; // GetMobilityPositionsの場合はreference_positionを原点とした相対位置。GetCollidingMobilitysUseAreaの場合はmobility_aから見たmobility_bの相対位置。GetCollidingMobilitysUseUAVの場合はmobility_idに対応する機体からmobilityの相対位置。
    AbsolutePosition absolute_position = 6 ; // 絶対位置
}

message Approaching {
    XYZPosition relative_position = 1;
    AbsolutePosition absolute_position = 3;
    PredictSpeed relative_speed = 2 ;
}

message AbsolutePosition{
    double latitude = 1;
    double longitude = 2;
    double altitude = 3;
    string tag = 4; //ミッション識別子。GetETAで利用している
}

message ReferencePosition {
    // Attribute_xx　に変更
    // enum Attribute {
    //     man = 0 ;
    //     unmannedVehicle = 1;
    //     car = 2;
    //     ship = 3;
    //     airplane =4;
    //     helicopter =5;
    //     marker =6;
    //     train = 7 ;
    // }
    trajectory.trjx_api_service.UserType user_type = 1;

    trajectory.trjx_api_service.Position position = 2;
}

message PredictSpeed {
    // 経度方向速度(m/sec)
    double x = 1;
    // 緯度方向速度(m/sec)
    double y = 2;
    // 上昇速度(m/sec) 右手系
    double z = 3;
}

message NotifyDeviationRequest{
    UAVID uav_id = 1;
}

message NotifyDeviationResponse{
    bool deviates_course = 1; // 逸脱の場合true
}
