/*
 * <アクセス方法>
 * このサービスを使用するために、以下をmetadata（ヘッダー）に指定してください。
 * "x-grpc-service": "AirwayAgent"
 * "user_id": システムユーザID
 * "Authorization": アクセストークン
 */

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

package Trajectory.AirwayAgent.Protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service/airway_agent";

// 航路システム対向バックエンド
// 認証用の注意事項を追記　HTTPヘッダの必要事項
service AirwayAgent {
    // [254_3 航路利用UI]
    // 航路予約一覧取得
    rpc ListAirwayReservations(ListAirwayReservationsUiRequest) returns (stream AirwayReservationUiListItem) {
      option (google.api.http) = {
        get: "/airway_agent/airway_reservations"
      };
    }

    // 航路予約詳細取得
    // 1) CommandService.GetAirwayReservationDetailsを呼び出して航路予約情報を取得する
    // 2) CommandService.GetAirwaySectionCrossSectionInfoを呼び出して航路断面情報を取得する
    // 3) Wrapper.ConvertCrossSectionsToWaypointsを呼び出して航路断面形状配列からウェイポイント配列を取得する
    rpc GetAirwayReservationDetails(GetAirwayReservationDetailsUiRequest) returns (AirwayReservationUiDetails) {
      option (google.api.http) = {
        get: "/airway_agent/airway_reservations/{airway_reservation_id}"
      };
    }

    // [254_2 航路利用BE]
    // [263 MissionDB]
    // 航路利用登録
    // 1) CommandService.GetAirwayReservationDetailsを呼び出して航路予約情報を取得する
    // 2) CommandService.GetAirwaySectionCrossSectionInfoを呼び出して航路断面情報を取得する
    // 3) Wrapper.ConvertCrossSectionsToWaypointsを呼び出して航路断面形状配列からウェイポイント配列を取得する
    // 4) MissionController.DBSaveMission(ウェイポイント配列, 航路予約ID, supervisor=true)を呼び出してミッションDBに登録する
    rpc RegisterAirwayUsage(RegisterAirwayUsageRequest) returns (RegisterAirwayUsageResponse) {
      option (google.api.http) = {
        post: "/airway_agent/airway_usage/{airwayReservationId}/register"
        body: "*"
      };
      option deprecated = true;
    }

    // [254_2 航路利用BE 3.2航路策定]
    // 指定されたウェイポイント配列から航路システムに航路を登録する
    // 1) Wrapper.ConvertWaypointsToCrossSectionsを呼び出してウェイポイントから空間断面に変換する
    // 2) CommandService.RegisterAirwaySectionCrossSectionInfoを呼び出して航路断面情報を登録する
    rpc RegisterAirway(RegisterAirwayRequest) returns (RegisterAirwayResponse) {
      option (google.api.http) = {
        post: "/airway_agent/airway/register"
        body: "*"
      };
    }


    // [314 フェーズ1 運営事業者による航路策定 WP由来航路策定とMissionRecord同時作成]
    // 指定されたウェイポイント配列から航路を登録し、同時に基本ミッションレコードを作成する
    // 1) Wrapper.ConvertWaypointsToCrossSectionsを呼び出してウェイポイントから空間断面に変換する
    // 2) CommandService.RegisterAirwaySectionCrossSectionInfoを呼び出して航路断面情報を登録する
    // 3) MissionController.DBSaveBaseMissionRecord(ウェイポイント配列, 航路ID)を呼び出して基本ミッションレコードを作成する
    rpc RegisterAirwayAndBaseMissionRecord(RegisterAirwayRequest) returns (RegisterAirwayResponse) {
      option (google.api.http) = {
        post: "/airway_agent/airway/register_and_base_mission_record"
        body: "*"
      };
    }


    // [314 フェーズ1 運営事業者による航路策定 策定済み航路取り込み]
    // 指定された航路情報を空間情報に割り当てる
    // 1) CommandService.GetAirwayを呼び出して航路情報を取得する
    // 2) UASLService.CreateUASLを呼び出してUASLを作成する
    // 3) Wrapper.ConvertCrossSectionToWireGeoJSONを呼び出して航路断面形状配列からGeoJSONに変換する
    // 4) ARBorder POST: v1/ar/borders/uploadを呼び出してGeoJSONを登録する
    // 5) UASLService.UpdateUASLを呼び出してUASLにARBorder情報を設定する
    rpc AssignObjectWithAirway(AssinObjectWithAirwayRequest) returns (AssignObjectWithAirwayResponse) {
      option (google.api.http) = {
        post: "/airway_agent/assign_object_with_airway"
        body: "*"
      };
    }

    // [314 フェーズ1 運営事業者による航路策定 取り込み済み航路削除]
    // 空間情報に割り当てられた航路情報を削除する
    // 1) CommandService.DeleteAirwayを呼び出して航路情報を削除する
    // 2) UASLService.GetUASLを呼び出してUASL情報を取得する
    // 3) ARBorder DELETE: v1/ar/borders/{uasl_id}を呼び出してGeoJSONを削除する
    // 4) UASLService.DeleteUASLを呼び出してUASLを削除する
    // 5) MissionController.DeleteBaseMissionRecordByAirwayID(航路ID)を呼び出して基本ミッションレコードを削除する
    rpc DeleteObjectWithAirway(DeleteObjectWithAirwayRequest) returns (DeleteObjectWithAirwayResponse) {
      option (google.api.http) = {
        delete: "/airway_agent/delete_object_with_airway"
        body: "*"
      };
    }

}

// 基本パラメータ：Mission識別子
// DBに保存されたMissionの識別子（プライムキー）
message MissionID {
    string identifier = 1; 
}

message Position {
    message Altitude {
        Standard standard = 1;
        float altitude = 2; // m
    
        enum Standard { 
            ALTITUDE_ATTR_UNSPECIFIED = 0 ;
            RELATIVE= 1; // 離陸地点を基準とする相対高度。ItemParameterにより使用可
            AGL = 2 ; // 地表面高度。
            MSL = 3; // 海抜高度（標高）。
            ELLIPSOIDE = 4 ;// 楕円球体高。default値。
        }
    }
    // 緯度
    double latitude = 1;
    // 経度
    double longitude = 2;
    // 高度
    Altitude altitude = 3;
}

// 航路利用登録リクエスト
message RegisterAirwayUsageRequest {
    // 航路予約ID
    string airwayReservationId = 1;
    string missionName = 2;
}

// 航路利用登録結果
message RegisterAirwayUsageResponse {
    // 航路利用登録結果
    bool result = 1;
    // ミッションID：DBSaveMissionResult.missionId
    MissionID missionID = 2;
    // エラー情報
    RegisterAirwayUsageError error = 3;
}

// 航路利用登録エラー
// エラーのマッピング：gRPCでは正常でもアプリケーションの論理エラーの場合に定義など、考慮
message RegisterAirwayUsageError {
    // エラー種別
    RegisterAirwayUsageErrorType type = 1;
    // エラーメッセージ
    string message = 2;

    // gRPCの標準エラーコードに出来るだけ当てはめる
    enum RegisterAirwayUsageErrorType    {
        NONE = 0;
        INVALID_AIRWAY_RESERVATION_ID = 1;
        ALREADY_REGISTERED = 2;
        EXCEPTION = 99;
    }
}

// 航路予約一覧取得リクエスト
message ListAirwayReservationsUiRequest {
    // 運航事業者ID
    bool use_filter_operator_id = 1;
    string operator_id = 2;
    // 航路予約ID
    bool use_filter_reservation_id = 3;
    string airway_reservation_id = 4;
    // 予約開始日時
    bool use_filter_start_at = 5;
    google.protobuf.Timestamp start_at = 6;
    // 予約終了日時
    bool use_filter_end_at = 7;
    google.protobuf.Timestamp end_at = 8;
    // 航路システムID(address) TODO: 将来機能拡張対応。リクエストかmetaデータどちらが良いかは検討
    string airway_system_id = 9;
}

// 航路予約一覧の各行
message AirwayReservationUiListItem {
    // 運航事業者ID
    string operatorId = 1;
    // 航路予約ID
    string airway_reservation_id = 2;
    // 予約開始日時
    google.protobuf.Timestamp start_at = 3;
    // 予約終了日時
    google.protobuf.Timestamp end_at = 4;
    // 航路区画ID配列
    repeated string airway_section_ids = 5;
}

// 航路予約情報詳細取得リクエスト
message GetAirwayReservationDetailsUiRequest {
    // 航路予約ID: 航路システムの航路予約APIから返された予約ID
    string airway_reservation_id = 1;
    // 航路システムID(address) TODO: 将来機能拡張対応。リクエストかmetaデータどちらが良いかは検討
    string airway_system_id = 2;
}

// 航路予約情報詳細
message AirwayReservationUiDetails {
    // 航路予約ID
    string airway_reservation_id = 1;
    // 運航事業者ID
    string operator_id = 2;
    // 航路区画ID配列
    repeated string airway_section_ids = 3;
    // 予約開始日時
    google.protobuf.Timestamp start_at = 4;
    // 予約終了日時
    google.protobuf.Timestamp end_at = 5;
    // 予約日時
    google.protobuf.Timestamp  reserved_at = 6;
    // ウェイポイントの配列
    repeated Position waypoints = 7;
}

// 航路登録リクエスト
message RegisterAirwayRequest {
    // 最大落下許容範囲ID
    // 落下空間取得API(/airway-design/fall-space)に指定するID
    // 落下空間までは予め航路システムに登録済みの想定
    string fall_tolerance_range_id = 1;
    // 航路名
    string airway_name = 2;
    // 飛行目的
    string flight_purpose = 3;
    // ウェイポイントの配列
    repeated Position waypoints = 4;
    // ジャンクション名の配列
    // ウェイポイント各点がジャンクションとなる。ウェイポイント配列と同じ要素数
    repeated string junction_names = 5;
    // 航路区画名の配列
    // ジャンクション間が航路区画となる。ウェイポイント配列より１少ない要素数
    repeated string section_names = 6;
    // 使用可能機体リスト
    // 機体情報候補リストの取得API(/airway-design/aircraft)で得られる一覧に存在する機体のみ指定可能
    repeated UAVModel available_uav_models = 7;

    message UAVModel {
        // メーカー名
        string maker = 1;
        // 型式(モデル)
        string model_number = 2;
    }
    // 航路システムID(address) TODO: 将来機能拡張対応。リクエストかmetaデータどちらが良いかは検討
    string airway_system_id = 8;
}

// 航路登録結果
message RegisterAirwayResponse {
    // 航路登録結果
    bool result = 1;
    // 航路ID
    string airway_id = 2;
    // エラーメッセージ
    string message = 3;
}

// 航路情報をオブジェクトに割り当てるリクエスト
message AssinObjectWithAirwayRequest {
    // 航路ID
    string airway_id = 1;
    // 組織ID
    string organization_id = 2;
    // 航路システムID(address) TODO: 将来機能拡張対応。リクエストかmetaデータどちらが良いかは検討
    string airway_system_id = 3;
}

// 航路情報割り当て結果
message AssignObjectWithAirwayResponse {
    // 割り当て結果
    bool result = 1;
    // UASL ID
    string uasl_id = 2;
    // エラーメッセージ
    string message = 3;
}

// 航路情報をオブジェクトから削除するリクエスト
message DeleteObjectWithAirwayRequest {
    // 航路ID
    string uasl_id = 1;
    // 航路システムID(address) TODO: 将来機能拡張対応。リクエストかmetaデータどちらが良いかは検討
    string airway_system_id = 2;
}

// 航路情報をオブジェクトから削除するレスポンス
message DeleteObjectWithAirwayResponse {
    // 削除結果
    bool result = 1;
    // エラーメッセージ
    string message = 2;
}