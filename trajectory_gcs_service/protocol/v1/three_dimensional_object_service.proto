syntax = "proto3";

package trajectory.trajectory_gcs_service.protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service/trajectory_gcs";

import "github.com/trajectoryjp/trjx_api_service/trajectory_gcs_service/protocol/v1/resource.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

service ThreeDimensionalObjectService {
  rpc ListSolidModel(ListSolidModelRequest) returns (ListSolidModelResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "SolidModelの一覧を取得";
      description: "SolidModelの一覧を取得する。";
      parameters: {
        headers: {
          name: "user_id"
          type: STRING
          description: "ユーザID"
          required : true
        }
        headers: {
          name: "Authorization"
          type: STRING
          description : "Bearer Token"
          required : true
        }
      };
    };
  }

  rpc UploadSolidModel(UploadSolidModelRequest) returns (UploadSolidModelResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "SolidModelをアップロード";
      description:
        "SolidModelをアップロードする。\n\n"
        "エラーレスポンスの`details`には、以下のエラーコードが含まれる可能性がある。\n"
        "エラーコードの詳細は https://trjxdoc.trajectory.jp/BEGatewaySpesification/error_codes.html を参照。\n\n"
        "- `4009`\n"
        "- `5039`";
      parameters: {
        headers: {
          name: "user_id"
          type: STRING
          description: "ユーザID"
          required : true
        }
        headers: {
          name: "Authorization"
          type: STRING
          description : "Bearer Token"
          required : true
        }
      }
      responses: {
        key: "400";
        value: {
          description: "Bad Request error is 4009";
          schema: {
            json_schema: {
              ref: "#/definitions/googlerpcStatus";
            }
          };
          examples: {
            key: "application/json";
            value:
              "{\n"
              "  \"code\": 3,\n"
              "  \"message\": \"string\",\n"
              "  \"details\": [\n"
              "    {\n"
              "      \"@type\": \"type.googleapis.com/trajectory.trajectory_gcs_service.protocol.v1.ErrorCode\",\n"
              "      \"errorCode\": 4009\n"
              "    }\n"
              "  ]\n"
              "}";
          }
        }
      }
      responses: {
        key: "500";
        value: {
          description: "Service Unavailable error is 5039";
          schema: {
            json_schema: {
              ref: "#/definitions/googlerpcStatus";
            }
          };
          examples: {
            key: "application/json";
            value:
              "{\n"
              "  \"code\": 14,\n"
              "  \"message\": \"string\",\n"
              "  \"details\": [\n"
              "    {\n"
              "      \"@type\": \"type.googleapis.com/trajectory.trajectory_gcs_service.protocol.v1.ErrorCode\",\n"
              "      \"errorCode\": 5039\n"
              "    }\n"
              "  ]\n"
              "}";
          };
        }
      }
    };
  }

  rpc DeleteSolidModel(DeleteSolidModelRequest) returns (DeleteSolidModelResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "SolidModelを削除";
      description:
        "SolidModelを削除する。\n\n"
        "エラーレスポンスの`details`には、以下のエラーコードが含まれる可能性がある。\n"
        "エラーコードの詳細は https://trjxdoc.trajectory.jp/BEGatewaySpesification/error_codes.html を参照。\n\n"
        "- `5039`";
      parameters: {
        headers: {
          name: "user_id"
          type: STRING
          description: "ユーザID"
          required : true
        }
        headers: {
          name: "Authorization"
          type: STRING
          description : "Bearer Token"
          required : true
        }
      };
      responses: {
        key: "500";
        value: {
          description: "Service Unavailable error is 5039";
          schema: {
            json_schema: {
              ref: "#/definitions/googlerpcStatus";
            }
          };
          examples: {
            key: "application/json";
            value:
              "{\n"
              "  \"code\": 14,\n"
              "  \"message\": \"string\",\n"
              "  \"details\": [\n"
              "    {\n"
              "      \"@type\": \"type.googleapis.com/trajectory.trajectory_gcs_service.protocol.v1.ErrorCode\",\n"
              "      \"errorCode\": 5039\n"
              "    }\n"
              "  ]\n"
              "}";
          }
        }
      }
    };
  }

  // NOTE: 必要になった際に実装
  // rpc GetGlTF(GetGlTFRequest) returns (GetGlTFResponse);

  // NOTE: 必要になった際に実装
  // rpc ListGlTF(ListGlTFRequest) returns (ListGlTFResponse);
}

message ListSolidModelRequest {
  // プロジェクトID
  int32 project_id = 1;

  // 高度属性
  // Ellipsoid = 0 (楕円球体高)
  // Relative = 1 (離陸地点を基準とする相対高度)
  // AGL = 2 (地表面高度)
  // MSL = 3 (海抜高度。デフォルト値)
  uint32 altitude_attr = 2;
}

message ListSolidModelResponse {
  message Data {
    // 3DモデルID
    int64 id = 1;

    // 名称
    string name = 2;

    // KMLデータ
    string kml = 3;

    // 3Dモデルデータ
    SolidModel data = 4;

    string model_type = 5;

    // プロジェクトID
    int32 project_id = 6;
  }

  repeated Data data = 1;
}

message UploadSolidModelRequest {
  // 3DモデルID
  // 作成時は設定せず、更新時のみ設定する
  optional int64 models_id = 1;

  // 名称
  optional string name = 2;

  // ソリッドモデル
  SolidModel solid_model = 3;

  // 説明
  optional string description = 4;

  // プロジェクトID
  int32 project_id = 5;
}

message UploadSolidModelResponse {
  // 3DモデルID
  int64 id = 1;
}

message DeleteSolidModelRequest {
  // 3DモデルID
  repeated int64 models_id = 1;
}

message DeleteSolidModelResponse {
  // ステータス
  // 成功時に"ok"を返す
  string status = 1 [deprecated=true];
}

// message GetGlTFRequest {
//     // ユーザID
//     string user_id = 1;

//     // 3DモデルID
//     int64 models_id = 2;
// }

// message GetGlTFResponse {
//     message Data {
//         // glTF形式
//         string gltf = 1;
//     }

//     Data data = 1;
// }

// message ListGlTFRequest {
//     // ユーザID
//     string user_id = 1;

//     // プロジェクトID
//     int32 project_id = 2;
// }

// message ListGlTFResponse {
//     message Data {
//         // 名称
//         string name = 1;

//         // 3DモデルID
//         int64 id = 2;

//         // 基準点
//         Position position = 3;
//     }

//     repeated Data data = 1;

//     // 飛行エリアを含む
//     bool area_exist = 2;

//     // 飛行禁止エリアを含む
//     bool deny_exist = 3;

//     // DEMグリッドを含む
//     bool grid_exist = 4;

//     // 障害物（3Dモデル）を含む
//     bool model_exist = 5;

//     // プロジェクト基準点を含む
//     bool point_exist = 6;
// }
