syntax = "proto3";

package trajectory.trajectory_gcs_service.protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service/trajectory_gcs";

import "github.com/trajectoryjp/trjx_api_service/trajectory_gcs_service/protocol/v1/resource.proto";
import "github.com/trajectoryjp/trjx_api_service/type/resource.proto";
import "github.com/trajectoryjp/trjx_api_service/uas/generic/v2/sdsp_g.proto";

service RouteService {
    // ListVoxelsAroundPath: インタアクティブルートの検査
    rpc ListVoxelsAroundPaths(ListVoxelsAroundPathsRequest) returns (ListVoxelsAroundPathsResponse);
}

// ListVoxelsAroundPathRequest
message ListVoxelsAroundPathsRequest {
    // 安全が保証されていない経路。タグはレスポンスにも引き継がれる
    repeated trajectory.trjx_api_service.Position unsafe_positions = 1;
    oneof Select {
        // 機体ID
        UAVID uav_id = 2;
        double clearance = 3;
    }
    // 組織ID
    ProjectID project_id = 4;
    // SearchPathのzoomSetLevelからのquadkeyZoom-altitudeKeyZoomのペアーを選ぶ
    int64 zoom_level = 5;
    // 開始時刻 UnixTime
    optional int64 start_time = 7;
    // 終了時刻 UnixTime
    optional int64 end_time = 8;
    // 三次元空間の範囲指定変数
    optional trajectory.trjx_api_service.BoundingBox bounding_box = 9;
}

// ListVoxelsAroundPathResponse
message ListVoxelsAroundPathsResponse {
    // 各区間の結果の配列。隣同士の始点と終点は一致する
    repeated Result results = 1;

    // 結果
    message Result {
        // 経路のコスト
        double cost = 5;
        //グランドリスクデータ　voxel情報
        repeated GroundRisk ground_risk_data = 7;
        // エアーリスクデータ　voxel情報
        repeated AirRisk air_risk_data = 8;

        repeated TemporaryAirRisk temporary_air_risk_data = 10; // 一時エアーリスクデータ

        oneof body {
            // 安全なルート
            Path safety_path = 1;

            // 障害物に衝突してしまうエラー
            InBarrierError in_barrier_error = 2;

            // 経路が存在しないエラー
            NoPathError no_path_error = 3;
        }

        message Path {
            trajectory.trjx_api_service.Position start = 1;
            trajectory.trjx_api_service.Position end = 2;
        }

        // 障害物に衝突してしまうエラー
        message InBarrierError {
            reserved 1;
            // 危険な経路
            Path danger_path = 3;
            // 障害物に衝突してしまう位置
            trajectory.trjx_api_service.Position position = 2;
            // 障害物の オブジェクトID:バリア型 の情報
            map<int64, string> barrier_types_by_id = 4;
        }

        // 経路が存在しないエラー
        message NoPathError {
            reserved 1;
            // 危険な経路
            Path danger_path = 2;
        }

        // グランドリスク
        // グランドリスクデータはリクエストから設定されたパラメータ（int64 zoom_level）を始まり、
        // 親子セルもリスク値を検索します。その自分、親、子データの中で、最大、最小、平均を保存します。
        message GroundRisk {
            // クアッドキー
            generic.v2.SpatialIdentification spatial_2d_id = 1; // z/x/y
            // 最小
            float min = 2;
            // 最大
            float max = 3;
            // 平均
            float average = 4;
        }

                // 一時エアーリスク
        // 親子セルもリスク値を検索します。その自分、親、子データの中で、最大、最小、平均を保存します。
        // 最小開始時刻と最大終了時刻も含まれます
        message TemporaryAirRisk {
            // 
            generic.v2.SpatialIdentification spatial_id = 1; // z/f/x/y
            // 最小
            float min = 2;
            // 最大
            float max = 3;
            // 平均
            float average = 4;
            // 最小開始時刻  UnixTime
            int64 min_start_time  = 5;
            // 最大終了時刻  UnixTime
            int64 max_end_time  = 6;
        }

        // エアーリスク
        // エアーリスクデータはリクエストから設定されたパラメータ（int64 zoom_level）を始まり、
        // 親子セルもリスク値を検索します。その自分、親、子データの中で、最大、最小、平均を保存します
        message AirRisk {
            // キー
            generic.v2.SpatialIdentification spatial_id = 1; // z/f/x/y
            // 最小
            float min = 2;
            // 最大
            float max = 3;
            // 平均
            float average = 4;
        }
    }
}
