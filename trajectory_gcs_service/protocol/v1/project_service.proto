syntax = "proto3";

package trajectory.trajectory_gcs_service.protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service/trajectory_gcs";

import "protoc-gen-openapiv2/options/annotations.proto";

service ProjectService {
    // エラーレスポンスは、google.rpc.Status型を返す。その際、`details`にはErrorCode型を返す。以下のエラーコードが含まれる。
    // The error response is a google.rpc.Status with an ErrorCode type in its details field. The following error codes are included:
    // - 4001
    // エラーコードの詳細は https://trjxdoc.trajectory.jp/BEGatewaySpesification/error_codes.html を参照。
    // See https://trjxdoc.trajectory.jp/BEGatewaySpesification/error_codes.html for details on error codes.

    // 新規 Project をデータベースに登録する
    rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "ADMIN: Create Project[A] (formerly Add Project)"
            description: "Adds a new project to the database. This allows users to create a new project.\n"
                         "Error responses include a details array containing an ErrorCode object with the following error codes:\n"
                         "- 4001\n"
                         "- 4002\n"
                         "for more information, see https://trjxdoc.trajectory.jp/BEGatewaySpesification/error_codes.html\n\n"
            responses: {
                key: "400"
                value: {
                    description: "Invalid request."
                    schema: {
                        json_schema: {
                            ref: "#/definitions/rpcStatus"
                        }
                    }
                    examples: {
                        key: "/resource/api/v4/create_project"
                        value: "{\n"
                               "  \"code\": 3,\n"
                               "  \"message\": \"error message\",\n"
                               "  \"details\": [\n"
                               "    {\n"
                               "      \"@type\": \"type.googleapis.com/trajectory.trajectory_gcs_service.protocol.v1.ErrorCode\",\n"
                               "      \"errorCode\": 4001,\n"
                               "    }\n"
                               "  ]\n"
                               "}"
                    }
                }
            }
        };
    };

    // 指定された project_id に対応する Project を削除する
    rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "ADMIN: Delete Project [A]"
            description: "Deletes the project corresponding to the specified project_id.\n"
                         "Error responses include a details array containing an ErrorCode object with the following error codes:\n"
                         "- 4001\n"
                         "- 4002\n"
                         "for more information, see https://trjxdoc.trajectory.jp/BEGatewaySpesification/error_codes.html\n\n"
            responses: {
                key: "400"
                value: {
                    description: "Invalid request."
                    schema: {
                        json_schema: {
                            ref: "#/definitions/rpcStatus"
                        }
                    }
                    examples: {
                        key: "/resource/api/v4/delete_project"
                        value: "{\n"
                               "  \"code\": 3,\n"
                               "  \"message\": \"error message\",\n"
                               "  \"details\": [\n"
                               "    {\n"
                               "      \"@type\": \"type.googleapis.com/trajectory.trajectory_gcs_service.protocol.v1.ErrorCode\",\n"
                               "      \"errorCode\": 4001,\n"
                               "    }\n"
                               "  ]\n"
                               "}"
                    }
                }
            }
        };
    };

    // project_id で指定された Project の内容を KML 形式の文字列として取得する
    rpc GetKmlProject(GetKmlProjectRequest) returns (GetKmlProjectResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "[BE] RS: Get KML Project [O/R]"
            description: "Retrieves the project data for the specified project_id as a KML formatted string.\n"
                         "Error responses include a details array containing an ErrorCode object with the following error codes:\n"
                         "- 4001\n"
                         "- 4002\n"
                         "for more information, see https://trjxdoc.trajectory.jp/BEGatewaySpesification/error_codes.html\n\n"
            responses: {
                key: "400"
                value: {
                    description: "Invalid request."
                    schema: {
                        json_schema: {
                            ref: "#/definitions/rpcStatus"
                        }
                    }
                    examples: {
                        key: "/resource/api/v4/projects/kml"
                        value: "{\n"
                               "  \"code\": 3,\n"
                               "  \"message\": \"error message\",\n"
                               "  \"details\": [\n"
                               "    {\n"
                               "      \"@type\": \"type.googleapis.com/trajectory.trajectory_gcs_service.protocol.v1.ErrorCode\",\n"
                               "      \"errorCode\": 4001,\n"
                               "    }\n"
                               "  ]\n"
                               "}"
                    }
                }
            }
        };
    };

    // 指定された user_id が利用可能な Project の一覧を取得する
    rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "NEW RS: List Projects [O/R] (formerly Get Projects)"
            description: "Retrieves a list of projects accessible by the specified user_id.\n"
                         "Error responses include a details array containing an ErrorCode object with the following error codes:\n"
                         "- 4001\n"
                         "- 4002\n"
                         "for more information, see https://trjxdoc.trajectory.jp/BEGatewaySpesification/error_codes.html\n\n"
            responses: {
                key: "400"
                value: {
                    description: "Invalid request."
                    schema: {
                        json_schema: {
                            ref: "#/definitions/rpcStatus"
                        }
                    }
                    examples: {
                        key: "/resource/api/v4/projects"
                        value: "{\n"
                               "  \"code\": 3,\n"
                               "  \"message\": \"error message\",\n"
                               "  \"details\": [\n"
                               "    {\n"
                               "      \"@type\": \"type.googleapis.com/trajectory.trajectory_gcs_service.protocol.v1.ErrorCode\",\n"
                               "      \"errorCode\": 4001,\n"
                               "    }\n"
                               "  ]\n"
                               "}"
                    }
                }
            }
        };
    };

    // 指定された project_id に関連付けられた user のリストを取得する
    rpc ListUsersInPrject(ListUsersInPrjectRequest) returns (ListUsersInPrjectResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Collabo: ListUsersInProject [O] (formerly Get Users in the project)"
            description: "Retrieves a list of users associated with the specified project_id.\n"
                         "Error responses include a details array containing an ErrorCode object with the following error codes:\n"
                         "- 4001\n"
                         "- 4002\n"
                         "for more information, see https://trjxdoc.trajectory.jp/BEGatewaySpesification/error_codes.html\n\n"
            responses: {
                key: "400"
                value: {
                    description: "Invalid request."
                    schema: {
                        json_schema: {
                            ref: "#/definitions/rpcStatus"
                        }
                    }
                    examples: {
                        key: "/api/control_authority/get_users_in_project"
                        value: "{\n"
                               "  \"code\": 3,\n"
                               "  \"message\": \"error message\",\n"
                               "  \"details\": [\n"
                               "    {\n"
                               "      \"@type\": \"type.googleapis.com/trajectory.trajectory_gcs_service.protocol.v1.ErrorCode\",\n"
                               "      \"errorCode\": 4001,\n"
                               "    }\n"
                               "  ]\n"
                               "}"
                    }
                }
            }
        };
    };

    // Project の database_type を、受け取った文字列に基づいて変更する
    rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "RS : Update Projects"
            description: "Updates the project's database type based on the provided database_type.\n"
                         "(Update Projects API RM633 has not been implemented in BE)\n"
                         "Error responses include a details array containing an ErrorCode object with the following error codes:\n"
                         "- 4001\n"
                         "- 4002\n"
                         "for more information, see https://trjxdoc.trajectory.jp/BEGatewaySpesification/error_codes.html\n\n"
            responses: {
                key: "400"
                value: {
                    description: "Invalid request."
                    schema: {
                        json_schema: {
                            ref: "#/definitions/rpcStatus"
                        }
                    }
                    examples: {
                        key: "/resource/api/v4/update_projects"
                        value: "{\n"
                               "  \"code\": 3,\n"
                               "  \"message\": \"error message\",\n"
                               "  \"details\": [\n"
                               "    {\n"
                               "      \"@type\": \"type.googleapis.com/trajectory.trajectory_gcs_service.protocol.v1.ErrorCode\",\n"
                               "      \"errorCode\": 4001,\n"
                               "    }\n"
                               "  ]\n"
                               "}"
                    }
                }
            }
        };
    };
}

// Common messages
message ProjectServiceProject { // BE: data
    int32                  project_id = 1;
    string                 project_name = 2;
    ProjectServicePosition position = 3;
    ProjectServicePosition base = 4;
    int32                  width = 5;
    int32                  length = 6;
    ProjectServicePosition diagonal = 7;
    ProjectServicePosition dir = 8;
    int32                  project_attr = 9;
    string                 server_url = 10;
    string                 database_type = 11;
}

message ProjectServicePosition {
    double latitude = 1;
    double longitude = 2;
    double altitude = 3;
}

message ProjectServiceUser {
    string user_id = 1;
    string uav_id = 2;
    string name = 3;
    bool   safety = 4;
}

// CreateProject messages
message CreateProjectRequest {
    // プロジェクトの名前
    string                 project_name = 1;
    // プロジェクトの基準位置
    ProjectServicePosition position = 2;
    // フライトエリアの原点
    ProjectServicePosition base = 3;
    // 高度の種類
    int32                  output_altitude = 4; // 0: ellipsoid, 1: relative, 2: AGL, 3: MSL
}

message CreateProjectResponse {
    int32                  project_id = 1;
    ProjectServicePosition position = 2;
    ProjectServicePosition base = 3;
    int32                  width = 4;
    int32                  length = 5;
    ProjectServicePosition diagonal = 6;
    ProjectServicePosition dir = 7;
}

message CreateProjectErrorResponse {
    int32  error = 1;
    string info = 2;
}

// DeleteProject messages
message DeleteProjectRequest {
    int32 project_id = 1;
}

message DeleteProjectResponse {
    string status = 1;
}

// GetKmlProject messages
message GetKmlProjectRequest {
    int32 project_id = 1;
    bool  area = 2;
    bool  off_limit = 3;
    bool  dem = 4;
    bool  building = 5;
    bool  base_point = 6;
}

message GetKmlProjectResponse {
    string kml = 1;
}

message GetKmlProjectErrorResponse {
    int32  error = 1;
    string info = 2;
}

// ListProjects messages
message ListProjectsRequest {
    string user_id = 1;
}

message ListProjectsResponse {
    repeated ProjectServiceProject projects = 1;
    int32                          limit = 2;
    int32                          default_width = 3;
    int32                          default_length = 4;
}

// ListUsersInPrject messages
message ListUsersInPrjectRequest {
    int32 project_id = 1;
}

message ListUsersInPrjectResponse { 
	repeated ProjectServiceUser users = 1;
}

// UpdateProjects messages
message UpdateProjectRequest {
    int32  project_id = 1;
    string database_type = 2;
}

message UpdateProjectResponse {
    int32 status = 1;
}
