syntax = "proto3";

package trajectory.trajectory_gcs_service.protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service/trajectory_gcs";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "github.com/trajectoryjp/trjx_api_service/trajectory_gcs_service/protocol/v1/resource.proto";
import "github.com/trajectoryjp/trjx_api_service/type/resource.proto";

service MissionService {
    // CreateMission: ミッションの生成
    rpc CreateMission(CreateMissionRequest) returns (CreateMissionResponse) {}

    // CreateMissionRecord: ミッションをデータベースに追加する
    rpc CreateMissionRecord(MissionRecord) returns (MissionID) {}

    // GetMissionRecord: ミッションの取得
    rpc GetMissionRecord(MissionID) returns (MissionRecord) {}

    // DeleteMission: ミッションの削除
    rpc DeleteMissionRecord(MissionID) returns (google.protobuf.Empty) {}

    // UpdateMission: ミッションの更新
    rpc UpdateMissionRecord(UpdateMissionRecordRequest) returns (MissionRecord) {}

    // ListMissionIDRecords: ミッションIDのリスト取得
    rpc ListMissionIDRecords(ListMissionIDRecordsRequest) returns (ListMissionIDRecordsResponse) {}

    // 機体にアサイン荒れているミッションを取得
    rpc GetAssignedMissionsList(GetAssignedMissionsListRequest) returns (GetAssignedMissionsListResponse){}

    // ミッションの表現形式を変換する
    rpc ConvertMissionFormat(ConvertMissionFormatRequest)returns (ConvertMissionFormatResponse){}

    // 現在実行中のミッション（次のWaypoint）を取得する
    rpc GetCurrentMission(GetCurrentMissionRequest) returns (stream GetCurrentMissionResponse){}

    // Autopilot(FC)状態を取得する
    rpc GetAutopilotStatus(GetAutopilotStatusRequest) returns (GetAutopilotStatusResponse){}
}

message CreateMissionRequest { 
    ProjectID project_id = 7;
    TransactionID transaction_id = 2 ; // WideArea切替。未指定はWide。
    oneof Select {
        WithUAV create_with_property = 4 ; // 機体情報に基づいた時刻計算。ルート設計のみ（機体位置取得なし）
        WithUAV create_with_uav = 5; // 機体位置からのルート設計。機体への割付なし。
        WithUAV create_and_assign = 6; // 従来のCreateMissionAndAssign（機体割付）
        OnlyAssgin only_assign = 8; // ルート設計なし。機体割り付けのみ。ルートの安全性は保証されないことに注意（ローバー利用想定）。
    }
    message WithUAV {
        UAVID uav_id = 1;
        bool tie_straight = 13 ; // trueでWP優先（入力WPを真っ直ぐ結ぶ）。onlyAssignでは無効。
    }
    message OnlyAssgin {
        UAVID uav_id = 1;
    }
    optional ScheduledTime start_time = 10; //　onlyAssignでは無効。
    optional ScheduledTime arrival_time = 11; // 到着時間。onlyAssignでは無効。

    Mission mission = 12; // ルート計算を行うMissionItemのリスト。

    trajectory.trjx_api_service.Standard output_altitude = 14; // 出力高度属性。
}

message CreateMissionResponse {
    MissionControllerResult result = 1; // 処理結果
    Mission mission = 2; // ルート計算を行った結果のミッションのリスト
    repeated string reserved_route_ids = 3 ; // 予約ID
}

message MissionRecord {
    Mission mission = 1; // MissionItemのリスト
    string name = 2; // 保存名
    ProjectID project_id = 3; // 所有組織
    TransactionID transaction_id = 4;
    UAVID uav_id = 5;
    ApplicationAttr app =6 ; // Saveを要求したアプリケーション。CreateMissionの応答を透過的にセーブする場合は設定しない。MissionのappIDに反映される
    optional Timestamps timestamps = 7; // ミッションの作成/更新日時　リクエスト時は設定しない
}


message UpdateMissionRecordRequest {
    MissionID mission_id = 1; // データベースレコードキー。必須
    MissionRecord mission_record = 2; // ミッションのデータベースレコード
}

message ListMissionIDRecordsRequest {
    ProjectID project_id = 1;  // 取得対象のプロジェクトID。未指定の場合は組織内全てのプロジェクトが対象
}

message ListMissionIDRecordsResponse {
    repeated MissionIDRecord mission_id_records = 1;  // ミッションIDのリスト。ミッションの情報はGetMissionRecordで取得する
}

message MissionIDRecord {
    MissionID mission_id = 1;
    string name = 2;
    Timestamps timestamps = 3; // ミッションの作成/更新日時
}

// ミッションの作成/更新日時
message Timestamps {
    // 作成日時
    google.protobuf.Timestamp create_time = 1;
    // 更新日時
    google.protobuf.Timestamp update_time = 2;
}


message GetAssignedMissionsListRequest {
    string uav_id =1;
}

message GetAssignedMissionsListResponse {
    string uav_id =1 ;
    Mission mission = 2;
    UAVControllerResult result =3;
}

message ConvertMissionFormatRequest {
    string uav_id = 1;
 }
message ConvertMissionFormatResponse {
    Mission mission =1;
    string uav_id = 2;
    oneof selectOutput { 
        LitchiFormatSt litchiFormat = 4 ; // 出力は相対高度 Litchi形式の場合は、高度はMSLまたは楕円球体高を指定すること。機首方向パラメータは未サポート。
        MavlinkFormatSt mavlinkFormat = 5 ;
    }
   
    message LitchiFormatSt {
        // MissionはAGL不可
        oneof baseAltitude {
            int32 missionItemNumber = 1 ; // 指定したWPの位置を基準（itemsArrayのインデックス値（優先）であってWPでなければエラー、itemsのキー（非優先）でDEPRECATED）
            AltitudeSt altitude = 2 ; // 基準高度
            DifferentialPointSt differentialPoint = 3 ; // 指定WPのAGLを指定する。MissionItemはAGL不可。
        }
    }

    message MavlinkFormatSt { // TR_DEV-1082
       
        /*
          0:Ellipsoid
          1:Relative
          2:AGL
          3:MSL
        */
        uint32 outputAltitude = 1 ;
        oneof baseAltitude { // outputAltitudeがRelative の場合のみ有効
            int32 missionItemNumber = 2 ; // 指定したWPの位置を基準 
            AltitudeSt altitude = 3 ; // 基準高度 
            DifferentialPointSt differentialPoint = 4 ; // 指定WPのAGLを指定する。MissionItemはAGL不可。
        }
    }


    message AltitudeSt {
        /*
          0:Ellipsoid
          1:Relative
          2:AGL
          3:MSL
        */
        uint32 attr = 1 ;
        float altitude = 2 ; // TR_DEV-1086
    }

    message DifferentialPointSt {
        int32 missionItemNumber = 1 ; // 指定したWPの位置を基準（itemsArrayのインデックス値（優先）であってWPでなければエラー、itemsのキー（非優先）でDEPRECATED）
        float agl = 2 ; // missionItemNumberで指定したWPの地上高
    }
}

message GetCurrentMissionRequest {
    string uav_id =1;
}

message GetCurrentMissionResponse {
    string tag = 1; // 実行中ミッション名
    string name = 6; 
    /*
      通知種別
      0:Unknown,
      1:REACHED,
      2:CURRENT,
      3:IDLE
    */
    uint32 attr= 2;
    // 収集時刻（タイムスタンプ）。未実装
    string time = 9; 

    message Position {
        /*
        　高度属性
          0:Ellipsoid,
          1:Relative,
          2:AGL,
          3:MSL
        */
        uint32 altitudeAttr = 1; // TR_DEV-1047
    
        // 緯度
        double latitude = 2;
        // 経度
        double longitude = 3;
        // 高度
        float altitude = 4;
    }

    Position nextWaypoint = 3 ; // missionController.proto TR_DEV-959
    float distance = 4 ; // nextWaypointまでの距離
    float direction = 5 ; // nextWaypointまでの方位（度）
    int32 estimatedBatteryRemaining = 10 ; // TR_DEV-168
    int32 ETE = 11 ; // Estimated Time En-Route nextWaypointへの到達予想時間(秒）　TR_DEV-959
    int32 ETA = 12 ; // Estimated Time Arrival 到着予想時間（秒） TR_DEV-959
    int32 totalTime = 13 ; // 飛行経過時間（秒） TR_DEV-959
    
    //optional WaypointSpaceAttribute space_attribute = 14 ; // 航路内か否か RM#6003（WPのみ有効）
}

message GetAutopilotStatusRequest {
    string uav_id =1;
}
message GetAutopilotStatusResponse {
    bool Status = 1 ; // データ取得できていればtrue
    /*
      0:UnknownArm,
      1:Arm,
      2:Disarm
    */
    uint32 ArmDisarm=2 ;
    /*
      AutoPilotMode
      0:UnknownMode,
      1:Stabilize,
      2:Guided,
      3:Auto,
      4:Pause,
      5:Land,
      6:Rtl,
      20:OtherMode,
    */
    uint32 Mode=3;
    int32 BasicModeNum =4;
    int32 CustomModeNum =5;
    enum AutoPilotType {
        UnknownType = 0 ;
        APM = 1 ;
        PX4 = 2 ;
        Generic = 3 ;
        OtherType = 4 ;
        PX4HITL = 10 ;
    }
    /*
      AutoPilotType
      0:UnknownType,
      1:APM,
      2:PX4,
      3:Generic,
      4:OtherType,
      10:PX4HITL,
    */
    AutoPilotType Type = 6;
    int64 Time = 7 ; // UNIX time(sec)
}

message UAVControllerResult {
    /*
        0:Unknown
        1:End(経過の終了(経過表示の場合のみ))
        2:Complete(完了)
        3:Error
        4:Continue
        5:NotEnough
        6:ParameterError
        7:NoExist
        8:UnRegister
        13:UnStable
    */
    uint32 status = 1;
    string detail = 2;
}