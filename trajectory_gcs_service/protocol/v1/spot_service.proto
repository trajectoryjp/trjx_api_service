syntax = "proto3";

package trajectory.trajectory_gcs_service.protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service_go/trajectory_gcs";

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

import "github.com/trajectoryjp/trjx_api_service/trajectory_gcs_service/protocol/v1/resource.proto";

// ポート配下のスポットを操作を行うAPI
service SpotService {
    // スポットの登録
    rpc CreateSpot(CreateSpotRequest) returns (Spot);

    // スポットの取得
    rpc GetSpot(GetSpotRequest) returns (Spot);

    // スポットのリスト取得
    rpc ListSpots(ListSpotsRequest) returns (stream ListSpotsResponse);

    // スポットの削除
    rpc DeleteSpot(DeleteSpotRequest) returns (google.protobuf.Empty);

    // スポットの更新
    rpc UpdateSpot(UpdateSpotRequest) returns (Spot);
}

// スポット登録リクエスト
message CreateSpotRequest {
    // 登録スポット
    Spot spot = 1;                                      
}

// スポット取得リクエスト
message GetSpotRequest {
    int64 id = 1;                                       // ポートID
    google.protobuf.FieldMask fields = 2;               // クエリフィールド(指定されたカラムのみ取得)
}

// スポット一覧取得・フィルタリング検索リクエスト
message ListSpotsRequest {
    int64 port_id = 1;                                  // ポートID
    optional string name = 2;                           // 名称
    optional string tag = 3;                            // タグ
    optional bool is_used = 4;                           // スポット使用状況
    google.protobuf.FieldMask fields = 5;               // クエリフィールド(指定されたカラムのみ取得)
}

// スポット一覧取得・フィルタリング検索レスポンス
message ListSpotsResponse {
    // スポット
    repeated Spot spots = 1;                             

    // // リスト全体の項目数
    // int32 total_count = 2;

    // // 次のページを取得するトークン
    // string next_page_token = 3;
}

// スポット更新リクエスト
message UpdateSpotRequest{
    // 更新マスク(指定されたフィールドのみ更新)]
    google.protobuf.FieldMask update_mask = 1;

    // スポット(更新マスクで指定したもののみ更新)
    Spot spot = 2;                                      
}

// スポット削除リクエスト
message DeleteSpotRequest {
    int64 id = 1;                                       // スポットID
}
