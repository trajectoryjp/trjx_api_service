syntax = "proto3";

package trajectory.trajectory_gcs_service.protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service/trajectory_gcs";

service UavPermissionService {
    // GetPermission: UAV操作に関わる権限をリクエストする（120秒後、自動的に権限が削除される）
    rpc GetPermission(GetPermissionRequest) returns (GetPermissionResponse) {}

    // ConfirmPermission: 他ユーザーに対するUAV操作権限付与の承認/拒否を行う
    rpc ConfirmPermission(ConfirmPermissionRequest) returns (ConfirmPermissionResponse) {}

    // DeletePermission: 特定UAVに対する操作権限を削除する
    rpc DeletePermission(DeletePermissionRequest) returns (DeletePermissionResponse) {}

    // GetPermissionStatus: 特定UAVに対する現在の操作権限状況を取得する
    rpc GetPermissionStatus(GetPermissionStatusRequest) returns (GetPermissionStatusResponse) {}
}

message GetPermissionRequest {
    int64 uav_id = 1; // 機体ID
    string message = 2; // メッセージ
}

message GetPermissionResponse {

    // 処理結果
    uint32 status = 1;

    oneof detail {
        // 正常終了の場合のみ.  
        // 　既に権限を持っており、かつ権限の延長に成功:uav permission extended.  
        // 　権限の延長に失敗:user already have permission, extend time failed.  
        // 　権限を持っておらず、かつ他のユーザーが権限を持っていた場合:{申請ユーザーのuser_id}:{message}の形式.  
        string message = 2;

        // Rejected・Timeoutの場合のみ.  
        // Rejectedの場合、拒否を行なったユーザー.  
        // Timeoutの場合、時間内に承認を行わなかったユーザー.  
        string user = 3;
    }
    
}

message ConfirmPermissionRequest {
    string message = 1; // 申請メッセージ
    bool acceptance = 2; // 承認/拒否
    string request_user_id = 3; // 申請したユーザー
    int64 request_uav_id = 4; // 申請先のUAV
}

message ConfirmPermissionResponse {
    uint32 status = 1; // 処理結果　1:正常終了
    string message = 2; // rejected or accepted
}

message DeletePermissionRequest {
    int64 uav_id = 1; // 機体ID
}

message DeletePermissionResponse {
    uint32 status = 1; // 処理結果　1:正常終了
    string message = 2; // ok
}

message GetPermissionStatusRequest {
    string uav_id = 1;// 機体ID
}

message GetPermissionStatusResponse {
    uint32 status = 1; // 処理結果
}
