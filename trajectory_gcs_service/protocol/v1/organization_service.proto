syntax = "proto3";

package trajectory.trajectory_gcs_service.protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service/trajectory_gcs";
import "protoc-gen-openapiv2/options/annotations.proto";

import "github.com/trajectoryjp/trjx_api_service/trajectory_gcs_service/protocol/v1/resource.proto";

service OrganizationService {
  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse){
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    summary: "ミッション生成を行います";
    description: "ミッションの新規作成を行います。\n\n"
        "エラーレスポンスの`details`には、以下のエラーコードが含まれる可能性があります。\n";
    responses: {
      key: "400";
      value: {
        description: "Invalid request.";
        schema: {
          json_schema: {
            ref: "#/definitions/rpcStatus";
          }
        };
        examples: {
          key: "application/json";
          value: "{\n"
              "  \"code\": 3,\n"
              "  \"message\": \"uavId is empty\",\n"
              "  \"details\": [\n"
              "    {\n"
              "      \"@type\": \"type.googleapis.com/trajectory.trajectory_gcs_service.protocol.v1.ErrorCode\",\n"
              "      \"errorCode\": 4001\n"
              "    }\n"
              "  ]\n"
              "}";
        }
      }
    }
  };
  }
  rpc GetCesiumToken(GetCesiumTokenRequest) returns (GetCesiumTokenResponse){
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    summary: "ミッション生成を行います";
    description: "ミッションの新規作成を行います。\n\n"
        "エラーレスポンスの`details`には、以下のエラーコードが含まれる可能性があります。\n";
    responses: {
      key: "400";
      value: {
        description: "Invalid request.";
        schema: {
          json_schema: {
            ref: "#/definitions/rpcStatus";
          }
        };
        examples: {
          key: "application/json";
          value: "{\n"
              "  \"code\": 3,\n"
              "  \"message\": \"uavId is empty\",\n"
              "  \"details\": [\n"
              "    {\n"
              "      \"@type\": \"type.googleapis.com/trajectory.trajectory_gcs_service.protocol.v1.ErrorCode\",\n"
              "      \"errorCode\": 4001\n"
              "    }\n"
              "  ]\n"
              "}";
        }
      }
    }
  };
  }
  rpc SetCesiumToken(SetCesiumTokenRequest) returns (SetCesiumTokenResponse){
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    summary: "ミッション生成を行います";
    description: "ミッションの新規作成を行います。\n\n"
        "エラーレスポンスの`details`には、以下のエラーコードが含まれる可能性があります。\n";
    responses: {
      key: "400";
      value: {
        description: "Invalid request.";
        schema: {
          json_schema: {
            ref: "#/definitions/rpcStatus";
          }
        };
        examples: {
          key: "application/json";
          value: "{\n"
              "  \"code\": 3,\n"
              "  \"message\": \"uavId is empty\",\n"
              "  \"details\": [\n"
              "    {\n"
              "      \"@type\": \"type.googleapis.com/trajectory.trajectory_gcs_service.protocol.v1.ErrorCode\",\n"
              "      \"errorCode\": 4001\n"
              "    }\n"
              "  ]\n"
              "}";
        }
      }
    }
  };
  }
}

// GetOrganizationのリクエスト
message GetOrganizationRequest {
}

// GetOrganizationのレスポンス
message GetOrganizationResponse {
  // 組織ID
  string id = 1;
  // セシウムアクセストークン
  string cesium_access_token = 2;
  // デフォルトのセシウムアクセストークン
  // このパラメータはデフォルトのセシウムアクセストークンとして登録されます。
  // cesium_access_tokenを登録しない場合、デフォルトのセシウムアクセストークンが使用されます。
  // ただし、この時点ではTRJX-UIに2DMapのみが表示されます。
  // 3DMapを表示するには、SetCesiumToken RPC でcesium_access_tokenを登録する必要があります。
  string default_cesium_access_token = 3;
}

// GetCesiumTokenのリクエスト
message GetCesiumTokenRequest {
}

// GetCesiumTokenのレスポンス
message GetCesiumTokenResponse {
  // セシウムアクセストークン
  string cesium_access_token = 1;
}

// SetCesiumTokenのリクエスト
message SetCesiumTokenRequest {
  // セシウムアクセストークン
  string cesium_access_token = 1;
}

// SetCesiumTokenのレスポンス
message SetCesiumTokenResponse {
  // ステータス
  string status = 1 [deprecated=true]; // 「ok」のみを返すため、非推奨です

}