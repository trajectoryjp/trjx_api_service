syntax = "proto3";

package trajectory.trajectory_gcs_service.protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service/trajectory_gcs";
import "github.com/trajectoryjp/trjx_api_service/trajectory_gcs_service/protocol/v1/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// Sitl service
service SitlService {
    // SITLを開始し、SitlAlertイベントのストリームを返します
    rpc StartSitl(StartSitlRequest) returns (stream SitlAlert);
    // SITLを停止します
    rpc StopSitl(StopSitlRequest) returns (google.protobuf.Empty);
    // ユーザーの組織内のすべてのアクティブなSITLインスタンスを返します
    rpc CheckSitl(CheckSitlRequest) returns (CheckSitlResponse);
}


// StartSitlのrequest
message StartSitlRequest {
    // UAVのID
    UAVID uav_id = 2;
    // UAVの位置
    Position position = 3;
}

// Sitl alert event
message SitlAlert {
    // sitlの状態
    SitlState state = 2;
    // SITL_STATE_STARTINGのときのSITL開始時刻（秒単位）
    int64 time = 3;
    // 関連するユーザーID
    repeated UserID users = 4;
    // SITLインスタンスの状態
    enum SitlState {
            SITL_STATE_UNSPECIFIED = 0; // 未指定
            SITL_STATE_STARTING = 1; // SITLが起動中
            SITL_STATE_ACTIVE = 2; // SITLがアクティブ
    }
}

// StopSitlのrequest
message StopSitlRequest {
    // UAVのID
    UAVID uav_id = 1;
}

// CheckSitlのrequest
message CheckSitlRequest {}

// アクティブなSITLインスタンス
message ActiveSitl {
    // ユーザーID
    UserID user_id = 1;
    // 組織ID
    string organization_id = 2;
    // UAVのID
    UAVID uav_id = 3;
}


// CheckSitlのresponse
message CheckSitlResponse {
    // Active Sitl instances
    // アクティブなSITLインスタンスのリスト
    repeated ActiveSitl sitls = 1;
}