syntax = "proto3";

package trajectory.trajectory_gcs_service.protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service/trajectory_gcs";
import "github.com/trajectoryjp/trjx_api_service/trajectory_gcs_service/protocol/v1/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// Sitl service
service SitlService {
    // Register user to SITL in specified position
    // 指定した位置のSITLにユーザーを登録
    rpc RegisterSitl(RegisterSitlRequest) returns (RegisterSitlResponse);
    // Subscribe to Sitl alerts stream
    // SITLアラートのストリームを購読
    rpc SubscribeToSitlAlerts(SubscribeToSitlAlertsRequest) returns (stream SitlAlert);
    // Release user from SITL
    // SITLからユーザーを解放
    rpc StopSitl(StopSitlRequest) returns (google.protobuf.Empty);
    // List active Sitl instances
    // アクティブなSITLインスタンスのリストを取得
    rpc ListActiveSitls(google.protobuf.Empty) returns (ListActiveSitlsResponse);
}


// RegisterSitl's request 
message RegisterSitlRequest {
    // UAVのID
    UAVID uav_id = 2;
    // UAVの位置
    Position position = 3;
}

// RegisterSitl's response
message RegisterSitlResponse {
    // 登録結果
    Status status = 1;
    
    enum Status {
        STATUS_UNSPECIFIED = 0; // 未指定
        STATUS_START = 1; // 開始
        STATUS_EXTEND = 2; // 拡張
    }
    
}

// SubscribeToSitlAlerts's request
message SubscribeToSitlAlertsRequest {
    // Organization ID
    string organization_id = 1;
    // User ID
    UserID user_id = 2;
}



// Sitl alert event
message SitlAlert {
    // Sitl state
    SitlState state = 2;
    // Sitl start time in seconds(at SITL_STATE_STARTING)
    // SITL_STATE_STARTINGのときのSITL開始時刻（秒単位）
    int64 time = 3;
    // Associated user IDs
    // 関連するユーザーID
    repeated UserID users = 4;

    // Sitl instance state
    // SITLインスタンスの状態
    enum SitlState {
            SITL_STATE_UNSPECIFIED = 0; // 未指定
            SITL_STATE_STARTING = 1; // SITLが起動中
            SITL_STATE_ACTIVE = 2; // SITLがアクティブ
    }
}

// Stop Sitl request
message StopSitlRequest {
    // UAV ID
    // UAVのID
    UAVID uav_id = 1;
}

// Active Sitl instance
message ActiveSitl {
    // User ID
    // ユーザーID
    UserID user_id = 1;
    // Organization ID
    // 組織ID
    string organization_id = 2;
    // UAV ID
    // UAVのID
    UAVID uav_id = 3;
}

// List active Sitls response
message ListActiveSitlsResponse {
    // Active Sitl instances
    // アクティブなSITLインスタンスのリスト
    repeated ActiveSitl sitls = 1;
}