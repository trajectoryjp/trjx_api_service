syntax = "proto3";

package trajectory.trajectory_gcs_service.protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service/trajectory_gcs";

service WaypointService {
    rpc CheckWaypoint(CheckWaypointRequest) returns (CheckWaypointResponse);
}

message CheckWaypointRequest {
    message Waypoint {
        // 緯度
        double latitude = 1;

        // 経度
        double longitude = 2;

        // 高度
        float altitude = 3;

        // 名称
        optional string name = 4;

        // 高度属性、RelativeとAGLは非対応
        // Ellipsoid = 0 (楕円球体高)
        // Relative = 1 (離陸地点を基準とする相対高度)
        // AGL = 2 (地表面高度)
        // MSL = 3 (海抜高度。デフォルト値)
        // NOTE: enumだとstringになりBEの仕様が維持できなくなるため、uint32で定義
        // HACK: enumにする時に、resourceに移動する
        // HACK: Relativeを指定できないようにする
        uint32 altitude_attr = 5;

        // NOTE: 狭域廃止のため、削除
        // transaction_attr

        // プロジェクトID
        // HACK: repeatedの外に出すべき
        optional int32 project_id = 6;

        // HACK クリアランスを指定できるようにする
    }

    repeated Waypoint waypoints = 1;
}

message CheckWaypointResponse {
    message Waypoint {
        // 名称
        string name = 1;

        // NOTE: Deprecatedのため削除
        // result

        // リザルトメッセージ
        string message = 2;

        // NOTE: Deprecatedのため削除
        // detail

        // 緯度
        float64 latitude = 3;

        // 経度
        float64 longitude = 4;

        // 高度
        float32 altitude = 5;

        message ResultDef {
            // 0 ウェイポイントチェックOK。safeで飛行可。
            // 2003　バリア領域。飛行不可
            // 2004 スペースなし。飛行不可
            // 2005 予約空域。飛行不可（未実装）
            // 2006 エリア未設定。unsafeだが飛行可。
            // 2007 エラー。WP設定不可で飛行不可
            int32 result = 1;

            // リザルト情報
            string info = 2;
        }

        // リザルトコード
        ResultDef result_code = 6;
    }

    repeated Waypoint waypoints = 1;
}
