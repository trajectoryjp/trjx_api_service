// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: uas/airmobility/v2/sdsp_a.proto

// プロダクト名：UAS AirMobility API
// パッケージ名：uas.airmobility.v2
// インタフェース名：uas.airmobility.v2.AirMobilityAPI

package spatial

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AirMobilityAPI_PutObject_FullMethodName                       = "/uas.airmobility.v2.AirMobilityAPI/PutObject"
	AirMobilityAPI_GetObject_FullMethodName                       = "/uas.airmobility.v2.AirMobilityAPI/GetObject"
	AirMobilityAPI_DeleteObject_FullMethodName                    = "/uas.airmobility.v2.AirMobilityAPI/DeleteObject"
	AirMobilityAPI_GetValue_FullMethodName                        = "/uas.airmobility.v2.AirMobilityAPI/GetValue"
	AirMobilityAPI_PutReserveArea_FullMethodName                  = "/uas.airmobility.v2.AirMobilityAPI/PutReserveArea"
	AirMobilityAPI_SelectAirspaceArrangement_FullMethodName       = "/uas.airmobility.v2.AirMobilityAPI/SelectAirspaceArrangement"
	AirMobilityAPI_SelectAirspaceArrangementStream_FullMethodName = "/uas.airmobility.v2.AirMobilityAPI/SelectAirspaceArrangementStream"
)

// AirMobilityAPIClient is the client API for AirMobilityAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// エアモビリティ向け空間情報基盤
// GenericAPIのConnectServerで得たトークンをheaderにuseridと共に設定する
type AirMobilityAPIClient interface {
	// 空間情報登録
	//
	// オブジェクトを空間ID群で登録する。
	PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*PutObjectResponse, error)
	// 空間情報取得
	//
	// オブジェクトの値を得る
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (AirMobilityAPI_GetObjectClient, error)
	// 空間情報削除
	//
	// 空間情報を削除する。
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	// 指定領域空間情報取得
	//
	// 指定した領域のリスク値などの空間情報の値を得る。
	GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (AirMobilityAPI_GetValueClient, error)
	// 飛行計画登録（予約）
	//
	// 飛行計画（各種形状の空域空間）を空間ID群で登録する。
	// 重複はエラー
	PutReserveArea(ctx context.Context, in *PutReserveAreaRequest, opts ...grpc.CallOption) (*PutReserveAreaResponse, error)
	// 飛行許容空域取得
	//
	// 指定した領域および時刻を指定し、飛行許容領域の空間ID群を得る。
	// 空域空間の値の取得にはGetValue()を利用する。
	// 飛行許容領域は下記を含まない領域
	// ・バリア
	// ・飛行制限空域
	// ・緊急用務空域
	// ・飛行計画空域
	// ・オーバーレイ
	SelectAirspaceArrangement(ctx context.Context, in *SelectAirspaceArrangementRequest, opts ...grpc.CallOption) (*SelectAirspaceArrangementResponse, error)
	// 飛行許容空域取得（ストリーム）
	//
	// 指定した領域および時刻で飛行可能な空域空間の空間ID群をストリームで得る。
	// 次のようなケースに利用する。
	// ・大量のデータを分割して取得
	// ・変化を取得
	SelectAirspaceArrangementStream(ctx context.Context, in *SelectAirspaceArrangementRequest, opts ...grpc.CallOption) (AirMobilityAPI_SelectAirspaceArrangementStreamClient, error)
}

type airMobilityAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAirMobilityAPIClient(cc grpc.ClientConnInterface) AirMobilityAPIClient {
	return &airMobilityAPIClient{cc}
}

func (c *airMobilityAPIClient) PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*PutObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutObjectResponse)
	err := c.cc.Invoke(ctx, AirMobilityAPI_PutObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airMobilityAPIClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (AirMobilityAPI_GetObjectClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AirMobilityAPI_ServiceDesc.Streams[0], AirMobilityAPI_GetObject_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &airMobilityAPIGetObjectClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AirMobilityAPI_GetObjectClient interface {
	Recv() (*Object, error)
	grpc.ClientStream
}

type airMobilityAPIGetObjectClient struct {
	grpc.ClientStream
}

func (x *airMobilityAPIGetObjectClient) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *airMobilityAPIClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, AirMobilityAPI_DeleteObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airMobilityAPIClient) GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (AirMobilityAPI_GetValueClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AirMobilityAPI_ServiceDesc.Streams[1], AirMobilityAPI_GetValue_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &airMobilityAPIGetValueClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AirMobilityAPI_GetValueClient interface {
	Recv() (*Objects, error)
	grpc.ClientStream
}

type airMobilityAPIGetValueClient struct {
	grpc.ClientStream
}

func (x *airMobilityAPIGetValueClient) Recv() (*Objects, error) {
	m := new(Objects)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *airMobilityAPIClient) PutReserveArea(ctx context.Context, in *PutReserveAreaRequest, opts ...grpc.CallOption) (*PutReserveAreaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutReserveAreaResponse)
	err := c.cc.Invoke(ctx, AirMobilityAPI_PutReserveArea_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airMobilityAPIClient) SelectAirspaceArrangement(ctx context.Context, in *SelectAirspaceArrangementRequest, opts ...grpc.CallOption) (*SelectAirspaceArrangementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelectAirspaceArrangementResponse)
	err := c.cc.Invoke(ctx, AirMobilityAPI_SelectAirspaceArrangement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airMobilityAPIClient) SelectAirspaceArrangementStream(ctx context.Context, in *SelectAirspaceArrangementRequest, opts ...grpc.CallOption) (AirMobilityAPI_SelectAirspaceArrangementStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AirMobilityAPI_ServiceDesc.Streams[2], AirMobilityAPI_SelectAirspaceArrangementStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &airMobilityAPISelectAirspaceArrangementStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AirMobilityAPI_SelectAirspaceArrangementStreamClient interface {
	Recv() (*AirspaceArrangement, error)
	grpc.ClientStream
}

type airMobilityAPISelectAirspaceArrangementStreamClient struct {
	grpc.ClientStream
}

func (x *airMobilityAPISelectAirspaceArrangementStreamClient) Recv() (*AirspaceArrangement, error) {
	m := new(AirspaceArrangement)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AirMobilityAPIServer is the server API for AirMobilityAPI service.
// All implementations must embed UnimplementedAirMobilityAPIServer
// for forward compatibility
//
// エアモビリティ向け空間情報基盤
// GenericAPIのConnectServerで得たトークンをheaderにuseridと共に設定する
type AirMobilityAPIServer interface {
	// 空間情報登録
	//
	// オブジェクトを空間ID群で登録する。
	PutObject(context.Context, *PutObjectRequest) (*PutObjectResponse, error)
	// 空間情報取得
	//
	// オブジェクトの値を得る
	GetObject(*GetObjectRequest, AirMobilityAPI_GetObjectServer) error
	// 空間情報削除
	//
	// 空間情報を削除する。
	DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error)
	// 指定領域空間情報取得
	//
	// 指定した領域のリスク値などの空間情報の値を得る。
	GetValue(*GetValueRequest, AirMobilityAPI_GetValueServer) error
	// 飛行計画登録（予約）
	//
	// 飛行計画（各種形状の空域空間）を空間ID群で登録する。
	// 重複はエラー
	PutReserveArea(context.Context, *PutReserveAreaRequest) (*PutReserveAreaResponse, error)
	// 飛行許容空域取得
	//
	// 指定した領域および時刻を指定し、飛行許容領域の空間ID群を得る。
	// 空域空間の値の取得にはGetValue()を利用する。
	// 飛行許容領域は下記を含まない領域
	// ・バリア
	// ・飛行制限空域
	// ・緊急用務空域
	// ・飛行計画空域
	// ・オーバーレイ
	SelectAirspaceArrangement(context.Context, *SelectAirspaceArrangementRequest) (*SelectAirspaceArrangementResponse, error)
	// 飛行許容空域取得（ストリーム）
	//
	// 指定した領域および時刻で飛行可能な空域空間の空間ID群をストリームで得る。
	// 次のようなケースに利用する。
	// ・大量のデータを分割して取得
	// ・変化を取得
	SelectAirspaceArrangementStream(*SelectAirspaceArrangementRequest, AirMobilityAPI_SelectAirspaceArrangementStreamServer) error
	mustEmbedUnimplementedAirMobilityAPIServer()
}

// UnimplementedAirMobilityAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAirMobilityAPIServer struct {
}

func (UnimplementedAirMobilityAPIServer) PutObject(context.Context, *PutObjectRequest) (*PutObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObject not implemented")
}
func (UnimplementedAirMobilityAPIServer) GetObject(*GetObjectRequest, AirMobilityAPI_GetObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedAirMobilityAPIServer) DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedAirMobilityAPIServer) GetValue(*GetValueRequest, AirMobilityAPI_GetValueServer) error {
	return status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedAirMobilityAPIServer) PutReserveArea(context.Context, *PutReserveAreaRequest) (*PutReserveAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutReserveArea not implemented")
}
func (UnimplementedAirMobilityAPIServer) SelectAirspaceArrangement(context.Context, *SelectAirspaceArrangementRequest) (*SelectAirspaceArrangementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAirspaceArrangement not implemented")
}
func (UnimplementedAirMobilityAPIServer) SelectAirspaceArrangementStream(*SelectAirspaceArrangementRequest, AirMobilityAPI_SelectAirspaceArrangementStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SelectAirspaceArrangementStream not implemented")
}
func (UnimplementedAirMobilityAPIServer) mustEmbedUnimplementedAirMobilityAPIServer() {}

// UnsafeAirMobilityAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirMobilityAPIServer will
// result in compilation errors.
type UnsafeAirMobilityAPIServer interface {
	mustEmbedUnimplementedAirMobilityAPIServer()
}

func RegisterAirMobilityAPIServer(s grpc.ServiceRegistrar, srv AirMobilityAPIServer) {
	s.RegisterService(&AirMobilityAPI_ServiceDesc, srv)
}

func _AirMobilityAPI_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirMobilityAPIServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirMobilityAPI_PutObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirMobilityAPIServer).PutObject(ctx, req.(*PutObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirMobilityAPI_GetObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetObjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AirMobilityAPIServer).GetObject(m, &airMobilityAPIGetObjectServer{ServerStream: stream})
}

type AirMobilityAPI_GetObjectServer interface {
	Send(*Object) error
	grpc.ServerStream
}

type airMobilityAPIGetObjectServer struct {
	grpc.ServerStream
}

func (x *airMobilityAPIGetObjectServer) Send(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

func _AirMobilityAPI_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirMobilityAPIServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirMobilityAPI_DeleteObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirMobilityAPIServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirMobilityAPI_GetValue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetValueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AirMobilityAPIServer).GetValue(m, &airMobilityAPIGetValueServer{ServerStream: stream})
}

type AirMobilityAPI_GetValueServer interface {
	Send(*Objects) error
	grpc.ServerStream
}

type airMobilityAPIGetValueServer struct {
	grpc.ServerStream
}

func (x *airMobilityAPIGetValueServer) Send(m *Objects) error {
	return x.ServerStream.SendMsg(m)
}

func _AirMobilityAPI_PutReserveArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutReserveAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirMobilityAPIServer).PutReserveArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirMobilityAPI_PutReserveArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirMobilityAPIServer).PutReserveArea(ctx, req.(*PutReserveAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirMobilityAPI_SelectAirspaceArrangement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAirspaceArrangementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirMobilityAPIServer).SelectAirspaceArrangement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirMobilityAPI_SelectAirspaceArrangement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirMobilityAPIServer).SelectAirspaceArrangement(ctx, req.(*SelectAirspaceArrangementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirMobilityAPI_SelectAirspaceArrangementStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SelectAirspaceArrangementRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AirMobilityAPIServer).SelectAirspaceArrangementStream(m, &airMobilityAPISelectAirspaceArrangementStreamServer{ServerStream: stream})
}

type AirMobilityAPI_SelectAirspaceArrangementStreamServer interface {
	Send(*AirspaceArrangement) error
	grpc.ServerStream
}

type airMobilityAPISelectAirspaceArrangementStreamServer struct {
	grpc.ServerStream
}

func (x *airMobilityAPISelectAirspaceArrangementStreamServer) Send(m *AirspaceArrangement) error {
	return x.ServerStream.SendMsg(m)
}

// AirMobilityAPI_ServiceDesc is the grpc.ServiceDesc for AirMobilityAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirMobilityAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uas.airmobility.v2.AirMobilityAPI",
	HandlerType: (*AirMobilityAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutObject",
			Handler:    _AirMobilityAPI_PutObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _AirMobilityAPI_DeleteObject_Handler,
		},
		{
			MethodName: "PutReserveArea",
			Handler:    _AirMobilityAPI_PutReserveArea_Handler,
		},
		{
			MethodName: "SelectAirspaceArrangement",
			Handler:    _AirMobilityAPI_SelectAirspaceArrangement_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetObject",
			Handler:       _AirMobilityAPI_GetObject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetValue",
			Handler:       _AirMobilityAPI_GetValue_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SelectAirspaceArrangementStream",
			Handler:       _AirMobilityAPI_SelectAirspaceArrangementStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "uas/airmobility/v2/sdsp_a.proto",
}
