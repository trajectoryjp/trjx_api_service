//**　Copyright © 2023-2024 Trajectory. All rights reserved. **

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: trajectory/type/resource.proto

package trjx_api_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ストリームステータス
type StreamStatus int32

const (
	StreamStatus_STREAM_STATUS_UNSPECIFIED StreamStatus = 0 // 未定義
	StreamStatus_STREAM_STATUS_CONTINUE    StreamStatus = 1 // 継続
	StreamStatus_STREAM_STATUS_DONE        StreamStatus = 2 // 完了
	StreamStatus_STREAM_STATUS_ABORT       StreamStatus = 3 // 中止
)

// Enum value maps for StreamStatus.
var (
	StreamStatus_name = map[int32]string{
		0: "STREAM_STATUS_UNSPECIFIED",
		1: "STREAM_STATUS_CONTINUE",
		2: "STREAM_STATUS_DONE",
		3: "STREAM_STATUS_ABORT",
	}
	StreamStatus_value = map[string]int32{
		"STREAM_STATUS_UNSPECIFIED": 0,
		"STREAM_STATUS_CONTINUE":    1,
		"STREAM_STATUS_DONE":        2,
		"STREAM_STATUS_ABORT":       3,
	}
)

func (x StreamStatus) Enum() *StreamStatus {
	p := new(StreamStatus)
	*p = x
	return p
}

func (x StreamStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_trajectory_type_resource_proto_enumTypes[0].Descriptor()
}

func (StreamStatus) Type() protoreflect.EnumType {
	return &file_trajectory_type_resource_proto_enumTypes[0]
}

func (x StreamStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamStatus.Descriptor instead.
func (StreamStatus) EnumDescriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{0}
}

// 高度属性(0:楕円球体高, 3:海抜高度(MSL)のみ指定可能)
type UavPosition_AltitudeAttribute int32

const (
	UavPosition_ALTITUDE_ATTRIBUTE_ELIPSOIDE UavPosition_AltitudeAttribute = 0 // 楕円球体高。default値
	UavPosition_ALTITUDE_ATTRIBUTE_RELATIVE  UavPosition_AltitudeAttribute = 1 // 離陸地点を基準とする相対高度(未対応)
	UavPosition_ALTITUDE_ATTRIBUTE_AGL       UavPosition_AltitudeAttribute = 2 // 地表面高度(未対応)
	UavPosition_ALTITUDE_ATTRIBUTE_MSL       UavPosition_AltitudeAttribute = 3 // 海抜高度（標高）
)

// Enum value maps for UavPosition_AltitudeAttribute.
var (
	UavPosition_AltitudeAttribute_name = map[int32]string{
		0: "ALTITUDE_ATTRIBUTE_ELIPSOIDE",
		1: "ALTITUDE_ATTRIBUTE_RELATIVE",
		2: "ALTITUDE_ATTRIBUTE_AGL",
		3: "ALTITUDE_ATTRIBUTE_MSL",
	}
	UavPosition_AltitudeAttribute_value = map[string]int32{
		"ALTITUDE_ATTRIBUTE_ELIPSOIDE": 0,
		"ALTITUDE_ATTRIBUTE_RELATIVE":  1,
		"ALTITUDE_ATTRIBUTE_AGL":       2,
		"ALTITUDE_ATTRIBUTE_MSL":       3,
	}
)

func (x UavPosition_AltitudeAttribute) Enum() *UavPosition_AltitudeAttribute {
	p := new(UavPosition_AltitudeAttribute)
	*p = x
	return p
}

func (x UavPosition_AltitudeAttribute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UavPosition_AltitudeAttribute) Descriptor() protoreflect.EnumDescriptor {
	return file_trajectory_type_resource_proto_enumTypes[1].Descriptor()
}

func (UavPosition_AltitudeAttribute) Type() protoreflect.EnumType {
	return &file_trajectory_type_resource_proto_enumTypes[1]
}

func (x UavPosition_AltitudeAttribute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UavPosition_AltitudeAttribute.Descriptor instead.
func (UavPosition_AltitudeAttribute) EnumDescriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{1, 0}
}

// 機体複合状態
type UavStatus_UavSignal int32

const (
	UavStatus_SIGNAL_WHITE        UavStatus_UavSignal = 0  // 初期状態、未設定状態
	UavStatus_SIGNAL_RED          UavStatus_UavSignal = 1  // 緊急状態（緊急対処を実施）
	UavStatus_SIGNAL_ORANGE       UavStatus_UavSignal = 2  // 危険状態（回復策を実施）
	UavStatus_SIGNAL_YELLOW_BLINK UavStatus_UavSignal = 3  // 注意状態（運用に注意）。処理実行中。
	UavStatus_SIGNAL_YELLOW       UavStatus_UavSignal = 4  // 注意状態（運用に注意）
	UavStatus_SIGNAL_GREEN_BLINK  UavStatus_UavSignal = 5  // 正常状態処理実行中
	UavStatus_SIGNAL_GREEN        UavStatus_UavSignal = 6  // 正常状態
	UavStatus_SIGNAL_NONE         UavStatus_UavSignal = 99 // Singnalパラメータ無効（変化なし）
)

// Enum value maps for UavStatus_UavSignal.
var (
	UavStatus_UavSignal_name = map[int32]string{
		0:  "SIGNAL_WHITE",
		1:  "SIGNAL_RED",
		2:  "SIGNAL_ORANGE",
		3:  "SIGNAL_YELLOW_BLINK",
		4:  "SIGNAL_YELLOW",
		5:  "SIGNAL_GREEN_BLINK",
		6:  "SIGNAL_GREEN",
		99: "SIGNAL_NONE",
	}
	UavStatus_UavSignal_value = map[string]int32{
		"SIGNAL_WHITE":        0,
		"SIGNAL_RED":          1,
		"SIGNAL_ORANGE":       2,
		"SIGNAL_YELLOW_BLINK": 3,
		"SIGNAL_YELLOW":       4,
		"SIGNAL_GREEN_BLINK":  5,
		"SIGNAL_GREEN":        6,
		"SIGNAL_NONE":         99,
	}
)

func (x UavStatus_UavSignal) Enum() *UavStatus_UavSignal {
	p := new(UavStatus_UavSignal)
	*p = x
	return p
}

func (x UavStatus_UavSignal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UavStatus_UavSignal) Descriptor() protoreflect.EnumDescriptor {
	return file_trajectory_type_resource_proto_enumTypes[2].Descriptor()
}

func (UavStatus_UavSignal) Type() protoreflect.EnumType {
	return &file_trajectory_type_resource_proto_enumTypes[2]
}

func (x UavStatus_UavSignal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UavStatus_UavSignal.Descriptor instead.
func (UavStatus_UavSignal) EnumDescriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{4, 0}
}

type UavStatus_UavSystemStatus_STATUS int32

const (
	UavStatus_UavSystemStatus_STATUS_NON                UavStatus_UavSystemStatus_STATUS = 0 // 初期状態
	UavStatus_UavSystemStatus_STATUS_ERROR              UavStatus_UavSystemStatus_STATUS = 1 // システムエラー
	UavStatus_UavSystemStatus_STATUS_NORMAL             UavStatus_UavSystemStatus_STATUS = 2 // 正常
	UavStatus_UavSystemStatus_STATUS_LOW_BATTERY        UavStatus_UavSystemStatus_STATUS = 3 // バッテリー低下
	UavStatus_UavSystemStatus_STATUS_SENSOR_ERROR       UavStatus_UavSystemStatus_STATUS = 4 // センサーエラー
	UavStatus_UavSystemStatus_STATUS_CPU_OVERLOAD       UavStatus_UavSystemStatus_STATUS = 5 // システムオーバーロード
	UavStatus_UavSystemStatus_STATUS_INCREASE_DROP_RATE UavStatus_UavSystemStatus_STATUS = 6 // パケットロス増加
	UavStatus_UavSystemStatus_STATUS_WARN               UavStatus_UavSystemStatus_STATUS = 7 // その他の警告
	UavStatus_UavSystemStatus_STATUS_EMERGENCY          UavStatus_UavSystemStatus_STATUS = 8 // その他の緊急
	UavStatus_UavSystemStatus_STATUS_EMPTYBATTERY       UavStatus_UavSystemStatus_STATUS = 9 // バッテリー切れ
)

// Enum value maps for UavStatus_UavSystemStatus_STATUS.
var (
	UavStatus_UavSystemStatus_STATUS_name = map[int32]string{
		0: "STATUS_NON",
		1: "STATUS_ERROR",
		2: "STATUS_NORMAL",
		3: "STATUS_LOW_BATTERY",
		4: "STATUS_SENSOR_ERROR",
		5: "STATUS_CPU_OVERLOAD",
		6: "STATUS_INCREASE_DROP_RATE",
		7: "STATUS_WARN",
		8: "STATUS_EMERGENCY",
		9: "STATUS_EMPTYBATTERY",
	}
	UavStatus_UavSystemStatus_STATUS_value = map[string]int32{
		"STATUS_NON":                0,
		"STATUS_ERROR":              1,
		"STATUS_NORMAL":             2,
		"STATUS_LOW_BATTERY":        3,
		"STATUS_SENSOR_ERROR":       4,
		"STATUS_CPU_OVERLOAD":       5,
		"STATUS_INCREASE_DROP_RATE": 6,
		"STATUS_WARN":               7,
		"STATUS_EMERGENCY":          8,
		"STATUS_EMPTYBATTERY":       9,
	}
)

func (x UavStatus_UavSystemStatus_STATUS) Enum() *UavStatus_UavSystemStatus_STATUS {
	p := new(UavStatus_UavSystemStatus_STATUS)
	*p = x
	return p
}

func (x UavStatus_UavSystemStatus_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UavStatus_UavSystemStatus_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_trajectory_type_resource_proto_enumTypes[3].Descriptor()
}

func (UavStatus_UavSystemStatus_STATUS) Type() protoreflect.EnumType {
	return &file_trajectory_type_resource_proto_enumTypes[3]
}

func (x UavStatus_UavSystemStatus_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UavStatus_UavSystemStatus_STATUS.Descriptor instead.
func (UavStatus_UavSystemStatus_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{4, 0, 0}
}

type UavStatus_UavFlightStatus_STATUS int32

const (
	UavStatus_UavFlightStatus_STATUS_UNSPECIFIED UavStatus_UavFlightStatus_STATUS = 0 // 未設定
	UavStatus_UavFlightStatus_STATUS_FLIGHT      UavStatus_UavFlightStatus_STATUS = 1 // 飛行中
	UavStatus_UavFlightStatus_STATUS_TAKE_OFF    UavStatus_UavFlightStatus_STATUS = 2 // 離陸
	UavStatus_UavFlightStatus_STATUS_LANDING     UavStatus_UavFlightStatus_STATUS = 3 // 着陸
	UavStatus_UavFlightStatus_STATUS_UNKNOWN     UavStatus_UavFlightStatus_STATUS = 4 // 未知
	UavStatus_UavFlightStatus_STATUS_LANDED      UavStatus_UavFlightStatus_STATUS = 5 // 着陸状態
	UavStatus_UavFlightStatus_STATUS_UNREGIST    UavStatus_UavFlightStatus_STATUS = 6 // 未登録
)

// Enum value maps for UavStatus_UavFlightStatus_STATUS.
var (
	UavStatus_UavFlightStatus_STATUS_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_FLIGHT",
		2: "STATUS_TAKE_OFF",
		3: "STATUS_LANDING",
		4: "STATUS_UNKNOWN",
		5: "STATUS_LANDED",
		6: "STATUS_UNREGIST",
	}
	UavStatus_UavFlightStatus_STATUS_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_FLIGHT":      1,
		"STATUS_TAKE_OFF":    2,
		"STATUS_LANDING":     3,
		"STATUS_UNKNOWN":     4,
		"STATUS_LANDED":      5,
		"STATUS_UNREGIST":    6,
	}
)

func (x UavStatus_UavFlightStatus_STATUS) Enum() *UavStatus_UavFlightStatus_STATUS {
	p := new(UavStatus_UavFlightStatus_STATUS)
	*p = x
	return p
}

func (x UavStatus_UavFlightStatus_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UavStatus_UavFlightStatus_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_trajectory_type_resource_proto_enumTypes[4].Descriptor()
}

func (UavStatus_UavFlightStatus_STATUS) Type() protoreflect.EnumType {
	return &file_trajectory_type_resource_proto_enumTypes[4]
}

func (x UavStatus_UavFlightStatus_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UavStatus_UavFlightStatus_STATUS.Descriptor instead.
func (UavStatus_UavFlightStatus_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{4, 1, 0}
}

type UavStatus_UavFlightStatus_MODE int32

const (
	UavStatus_UavFlightStatus_MODE_UNSPECIFIED UavStatus_UavFlightStatus_MODE = 0 // 未設定
	UavStatus_UavFlightStatus_MODE_GOTO        UavStatus_UavFlightStatus_MODE = 1 // GOTO
	UavStatus_UavFlightStatus_MODE_PAUSE       UavStatus_UavFlightStatus_MODE = 2 // PAUSE
	UavStatus_UavFlightStatus_MODE_MANUAL      UavStatus_UavFlightStatus_MODE = 3 // MANUAL
	UavStatus_UavFlightStatus_MODE_AUTO        UavStatus_UavFlightStatus_MODE = 4 // AUTO
	UavStatus_UavFlightStatus_MODE_RTL         UavStatus_UavFlightStatus_MODE = 5 // RTL
)

// Enum value maps for UavStatus_UavFlightStatus_MODE.
var (
	UavStatus_UavFlightStatus_MODE_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_GOTO",
		2: "MODE_PAUSE",
		3: "MODE_MANUAL",
		4: "MODE_AUTO",
		5: "MODE_RTL",
	}
	UavStatus_UavFlightStatus_MODE_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"MODE_GOTO":        1,
		"MODE_PAUSE":       2,
		"MODE_MANUAL":      3,
		"MODE_AUTO":        4,
		"MODE_RTL":         5,
	}
)

func (x UavStatus_UavFlightStatus_MODE) Enum() *UavStatus_UavFlightStatus_MODE {
	p := new(UavStatus_UavFlightStatus_MODE)
	*p = x
	return p
}

func (x UavStatus_UavFlightStatus_MODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UavStatus_UavFlightStatus_MODE) Descriptor() protoreflect.EnumDescriptor {
	return file_trajectory_type_resource_proto_enumTypes[5].Descriptor()
}

func (UavStatus_UavFlightStatus_MODE) Type() protoreflect.EnumType {
	return &file_trajectory_type_resource_proto_enumTypes[5]
}

func (x UavStatus_UavFlightStatus_MODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UavStatus_UavFlightStatus_MODE.Descriptor instead.
func (UavStatus_UavFlightStatus_MODE) EnumDescriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{4, 1, 1}
}

type UavStatus_UavArmStatus_STATUS int32

const (
	UavStatus_UavArmStatus_STATUS_UNSPECIFIED UavStatus_UavArmStatus_STATUS = 0 // 未設定
	UavStatus_UavArmStatus_STATUS_ARM         UavStatus_UavArmStatus_STATUS = 1 // ARM
	UavStatus_UavArmStatus_STATUS_DISARM      UavStatus_UavArmStatus_STATUS = 2 // DISARM
)

// Enum value maps for UavStatus_UavArmStatus_STATUS.
var (
	UavStatus_UavArmStatus_STATUS_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_ARM",
		2: "STATUS_DISARM",
	}
	UavStatus_UavArmStatus_STATUS_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_ARM":         1,
		"STATUS_DISARM":      2,
	}
)

func (x UavStatus_UavArmStatus_STATUS) Enum() *UavStatus_UavArmStatus_STATUS {
	p := new(UavStatus_UavArmStatus_STATUS)
	*p = x
	return p
}

func (x UavStatus_UavArmStatus_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UavStatus_UavArmStatus_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_trajectory_type_resource_proto_enumTypes[6].Descriptor()
}

func (UavStatus_UavArmStatus_STATUS) Type() protoreflect.EnumType {
	return &file_trajectory_type_resource_proto_enumTypes[6]
}

func (x UavStatus_UavArmStatus_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UavStatus_UavArmStatus_STATUS.Descriptor instead.
func (UavStatus_UavArmStatus_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{4, 2, 0}
}

type UavPath_SOURCE int32

const (
	UavPath_SOURCE_UNSPECIFIED UavPath_SOURCE = 0 // 未設定
	UavPath_SOURCE_REMOTE_ID   UavPath_SOURCE = 1 // リモートID
	UavPath_SOURCE_TELEMETRY   UavPath_SOURCE = 2 // テレメトリ
)

// Enum value maps for UavPath_SOURCE.
var (
	UavPath_SOURCE_name = map[int32]string{
		0: "SOURCE_UNSPECIFIED",
		1: "SOURCE_REMOTE_ID",
		2: "SOURCE_TELEMETRY",
	}
	UavPath_SOURCE_value = map[string]int32{
		"SOURCE_UNSPECIFIED": 0,
		"SOURCE_REMOTE_ID":   1,
		"SOURCE_TELEMETRY":   2,
	}
)

func (x UavPath_SOURCE) Enum() *UavPath_SOURCE {
	p := new(UavPath_SOURCE)
	*p = x
	return p
}

func (x UavPath_SOURCE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UavPath_SOURCE) Descriptor() protoreflect.EnumDescriptor {
	return file_trajectory_type_resource_proto_enumTypes[7].Descriptor()
}

func (UavPath_SOURCE) Type() protoreflect.EnumType {
	return &file_trajectory_type_resource_proto_enumTypes[7]
}

func (x UavPath_SOURCE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UavPath_SOURCE.Descriptor instead.
func (UavPath_SOURCE) EnumDescriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{5, 0}
}

type Altitude_Standard int32

const (
	Altitude_ALTITUDE_ATTR_UNSPECIFIED Altitude_Standard = 0
	Altitude_RELATIVE                  Altitude_Standard = 1 // 離陸地点を基準とする相対高度。ItemParameterにより使用可
	Altitude_AGL                       Altitude_Standard = 2 // 地表面高度。
	Altitude_MSL                       Altitude_Standard = 3 // 海抜高度（標高）。
	Altitude_ELLIPSOIDE                Altitude_Standard = 4 // 楕円球体高。default値。spank
)

// Enum value maps for Altitude_Standard.
var (
	Altitude_Standard_name = map[int32]string{
		0: "ALTITUDE_ATTR_UNSPECIFIED",
		1: "RELATIVE",
		2: "AGL",
		3: "MSL",
		4: "ELLIPSOIDE",
	}
	Altitude_Standard_value = map[string]int32{
		"ALTITUDE_ATTR_UNSPECIFIED": 0,
		"RELATIVE":                  1,
		"AGL":                       2,
		"MSL":                       3,
		"ELLIPSOIDE":                4,
	}
)

func (x Altitude_Standard) Enum() *Altitude_Standard {
	p := new(Altitude_Standard)
	*p = x
	return p
}

func (x Altitude_Standard) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Altitude_Standard) Descriptor() protoreflect.EnumDescriptor {
	return file_trajectory_type_resource_proto_enumTypes[8].Descriptor()
}

func (Altitude_Standard) Type() protoreflect.EnumType {
	return &file_trajectory_type_resource_proto_enumTypes[8]
}

func (x Altitude_Standard) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Altitude_Standard.Descriptor instead.
func (Altitude_Standard) EnumDescriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{7, 0}
}

// テレメトリ機体基本情報メッセージ
// リモートID、機体ID、表示名のうち最低１つの識別情報を通知する必要あり
// Terminate時は、Initialize時と同じパラメタを指定する
type UavBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// int64 organization_id = 1;              // 組織ID(選択)
	UavId       string `protobuf:"bytes,2,opt,name=uav_id,json=uavId,proto3" json:"uav_id,omitempty"`                    // 機体ID(選択)
	RemoteId    string `protobuf:"bytes,3,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`           // リモートID(選択)
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                   // 表示名(選択)
	EnabledPort bool   `protobuf:"varint,5,opt,name=enabled_port,json=enabledPort,proto3" json:"enabled_port,omitempty"` // 離発着ポート機能を持つか否か(true:有/false:無 default=false)
	// Types that are assignable to FlightId:
	//
	//	*UavBasic_FlightPlanId
	//	*UavBasic_FlightSpaceId
	FlightId isUavBasic_FlightId `protobuf_oneof:"flight_id"`
}

func (x *UavBasic) Reset() {
	*x = UavBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_type_resource_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UavBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UavBasic) ProtoMessage() {}

func (x *UavBasic) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_type_resource_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UavBasic.ProtoReflect.Descriptor instead.
func (*UavBasic) Descriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{0}
}

func (x *UavBasic) GetUavId() string {
	if x != nil {
		return x.UavId
	}
	return ""
}

func (x *UavBasic) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *UavBasic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UavBasic) GetEnabledPort() bool {
	if x != nil {
		return x.EnabledPort
	}
	return false
}

func (m *UavBasic) GetFlightId() isUavBasic_FlightId {
	if m != nil {
		return m.FlightId
	}
	return nil
}

func (x *UavBasic) GetFlightPlanId() string {
	if x, ok := x.GetFlightId().(*UavBasic_FlightPlanId); ok {
		return x.FlightPlanId
	}
	return ""
}

func (x *UavBasic) GetFlightSpaceId() string {
	if x, ok := x.GetFlightId().(*UavBasic_FlightSpaceId); ok {
		return x.FlightSpaceId
	}
	return ""
}

type isUavBasic_FlightId interface {
	isUavBasic_FlightId()
}

type UavBasic_FlightPlanId struct {
	FlightPlanId string `protobuf:"bytes,6,opt,name=flight_plan_id,json=flightPlanId,proto3,oneof"` // 飛行計画ID
}

type UavBasic_FlightSpaceId struct {
	FlightSpaceId string `protobuf:"bytes,7,opt,name=flight_space_id,json=flightSpaceId,proto3,oneof"` // 飛行空間ID
}

func (*UavBasic_FlightPlanId) isUavBasic_FlightId() {}

func (*UavBasic_FlightSpaceId) isUavBasic_FlightId() {}

// 機体位置情報
type UavPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude          *float64                       `protobuf:"fixed64,1,opt,name=latitude,proto3,oneof" json:"latitude,omitempty"`                                                                                                          // 機体位置の緯度
	Longitude         *float64                       `protobuf:"fixed64,2,opt,name=longitude,proto3,oneof" json:"longitude,omitempty"`                                                                                                        // 機体位置の経度
	Altitude          *float64                       `protobuf:"fixed64,3,opt,name=altitude,proto3,oneof" json:"altitude,omitempty"`                                                                                                          // 機体位置の高度(m)
	AltitudeAttribute *UavPosition_AltitudeAttribute `protobuf:"varint,4,opt,name=altitude_attribute,json=altitudeAttribute,proto3,enum=trajectory.trjx_api_service.UavPosition_AltitudeAttribute,oneof" json:"altitude_attribute,omitempty"` // 高度属性
	Heading           *float32                       `protobuf:"fixed32,5,opt,name=heading,proto3,oneof" json:"heading,omitempty"`                                                                                                            // 機首方位（°） 0-360 North=0 時計回り UAVAttitudeのyaw(North=0)に同じ
	ErrorDistance     *float32                       `protobuf:"fixed32,6,opt,name=error_distance,json=errorDistance,proto3,oneof" json:"error_distance,omitempty"`                                                                           // 誤差距離（GPS誤差）
	VelocityX         *float32                       `protobuf:"fixed32,7,opt,name=velocity_x,json=velocityX,proto3,oneof" json:"velocity_x,omitempty"`                                                                                       // 東方向速度 (m/s)
	VelocityY         *float32                       `protobuf:"fixed32,8,opt,name=velocity_y,json=velocityY,proto3,oneof" json:"velocity_y,omitempty"`                                                                                       // 北方向速度 (m/s)
	VelocityZ         *float32                       `protobuf:"fixed32,9,opt,name=velocity_z,json=velocityZ,proto3,oneof" json:"velocity_z,omitempty"`                                                                                       // 上昇速度 (m/s)
	NextWpTag         *string                        `protobuf:"bytes,10,opt,name=next_wp_tag,json=nextWpTag,proto3,oneof" json:"next_wp_tag,omitempty"`                                                                                      // 機体が次に向かうWPのタグ名(UavBasicのenabled_port=true時は必ず指定)
}

func (x *UavPosition) Reset() {
	*x = UavPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_type_resource_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UavPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UavPosition) ProtoMessage() {}

func (x *UavPosition) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_type_resource_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UavPosition.ProtoReflect.Descriptor instead.
func (*UavPosition) Descriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{1}
}

func (x *UavPosition) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *UavPosition) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *UavPosition) GetAltitude() float64 {
	if x != nil && x.Altitude != nil {
		return *x.Altitude
	}
	return 0
}

func (x *UavPosition) GetAltitudeAttribute() UavPosition_AltitudeAttribute {
	if x != nil && x.AltitudeAttribute != nil {
		return *x.AltitudeAttribute
	}
	return UavPosition_ALTITUDE_ATTRIBUTE_ELIPSOIDE
}

func (x *UavPosition) GetHeading() float32 {
	if x != nil && x.Heading != nil {
		return *x.Heading
	}
	return 0
}

func (x *UavPosition) GetErrorDistance() float32 {
	if x != nil && x.ErrorDistance != nil {
		return *x.ErrorDistance
	}
	return 0
}

func (x *UavPosition) GetVelocityX() float32 {
	if x != nil && x.VelocityX != nil {
		return *x.VelocityX
	}
	return 0
}

func (x *UavPosition) GetVelocityY() float32 {
	if x != nil && x.VelocityY != nil {
		return *x.VelocityY
	}
	return 0
}

func (x *UavPosition) GetVelocityZ() float32 {
	if x != nil && x.VelocityZ != nil {
		return *x.VelocityZ
	}
	return 0
}

func (x *UavPosition) GetNextWpTag() string {
	if x != nil && x.NextWpTag != nil {
		return *x.NextWpTag
	}
	return ""
}

// 機体姿勢情報
type UavAttitude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roll         *float32 `protobuf:"fixed32,1,opt,name=roll,proto3,oneof" json:"roll,omitempty"`                                      // ロール(radian)
	Pitch        *float32 `protobuf:"fixed32,2,opt,name=pitch,proto3,oneof" json:"pitch,omitempty"`                                    // ピッチ(radian)
	Yaw          *float32 `protobuf:"fixed32,3,opt,name=yaw,proto3,oneof" json:"yaw,omitempty"`                                        // ヨー(radian) North=0 時計回り
	RollSpeed    *float32 `protobuf:"fixed32,4,opt,name=roll_speed,json=rollSpeed,proto3,oneof" json:"roll_speed,omitempty"`           // ロール速度(rad/sec)
	PitchSpeed   *float32 `protobuf:"fixed32,5,opt,name=pitch_speed,json=pitchSpeed,proto3,oneof" json:"pitch_speed,omitempty"`        // ピッチ速度(rad/sec)
	YawSpeed     *float32 `protobuf:"fixed32,6,opt,name=yaw_speed,json=yawSpeed,proto3,oneof" json:"yaw_speed,omitempty"`              // ヨー速度(rad/sec)
	CogSpeed     *float32 `protobuf:"fixed32,7,opt,name=cog_speed,json=cogSpeed,proto3,oneof" json:"cog_speed,omitempty"`              // 対地上速さ(m/sec)
	Speed        *float32 `protobuf:"fixed32,8,opt,name=speed,proto3,oneof" json:"speed,omitempty"`                                    // 機首方向スピード(m/sec)　※COG速度ではない
	SlipSpeed    *float32 `protobuf:"fixed32,9,opt,name=slip_speed,json=slipSpeed,proto3,oneof" json:"slip_speed,omitempty"`           // 機体横方向の移動速度(m/sec)
	DescentSpeed *float32 `protobuf:"fixed32,10,opt,name=descent_speed,json=descentSpeed,proto3,oneof" json:"descent_speed,omitempty"` // 機体降下速度(m/sec)
	Cog          *float32 `protobuf:"fixed32,11,opt,name=cog,proto3,oneof" json:"cog,omitempty"`                                       // 対地上侵攻方向(degree) North=0 時計回り
}

func (x *UavAttitude) Reset() {
	*x = UavAttitude{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_type_resource_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UavAttitude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UavAttitude) ProtoMessage() {}

func (x *UavAttitude) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_type_resource_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UavAttitude.ProtoReflect.Descriptor instead.
func (*UavAttitude) Descriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{2}
}

func (x *UavAttitude) GetRoll() float32 {
	if x != nil && x.Roll != nil {
		return *x.Roll
	}
	return 0
}

func (x *UavAttitude) GetPitch() float32 {
	if x != nil && x.Pitch != nil {
		return *x.Pitch
	}
	return 0
}

func (x *UavAttitude) GetYaw() float32 {
	if x != nil && x.Yaw != nil {
		return *x.Yaw
	}
	return 0
}

func (x *UavAttitude) GetRollSpeed() float32 {
	if x != nil && x.RollSpeed != nil {
		return *x.RollSpeed
	}
	return 0
}

func (x *UavAttitude) GetPitchSpeed() float32 {
	if x != nil && x.PitchSpeed != nil {
		return *x.PitchSpeed
	}
	return 0
}

func (x *UavAttitude) GetYawSpeed() float32 {
	if x != nil && x.YawSpeed != nil {
		return *x.YawSpeed
	}
	return 0
}

func (x *UavAttitude) GetCogSpeed() float32 {
	if x != nil && x.CogSpeed != nil {
		return *x.CogSpeed
	}
	return 0
}

func (x *UavAttitude) GetSpeed() float32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *UavAttitude) GetSlipSpeed() float32 {
	if x != nil && x.SlipSpeed != nil {
		return *x.SlipSpeed
	}
	return 0
}

func (x *UavAttitude) GetDescentSpeed() float32 {
	if x != nil && x.DescentSpeed != nil {
		return *x.DescentSpeed
	}
	return 0
}

func (x *UavAttitude) GetCog() float32 {
	if x != nil && x.Cog != nil {
		return *x.Cog
	}
	return 0
}

// バッテリー情報
type UavBattery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoltageBattery *float32 `protobuf:"fixed32,1,opt,name=voltage_battery,json=voltageBattery,proto3,oneof" json:"voltage_battery,omitempty"` // バッテリー電圧[V]
	CurrentBattery *float32 `protobuf:"fixed32,2,opt,name=current_battery,json=currentBattery,proto3,oneof" json:"current_battery,omitempty"` // 電流量[A]
	Remaining      *float32 `protobuf:"fixed32,3,opt,name=Remaining,proto3,oneof" json:"Remaining,omitempty"`                                 // バッテリー残容量(0〜1) 1=100%%
}

func (x *UavBattery) Reset() {
	*x = UavBattery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_type_resource_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UavBattery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UavBattery) ProtoMessage() {}

func (x *UavBattery) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_type_resource_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UavBattery.ProtoReflect.Descriptor instead.
func (*UavBattery) Descriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{3}
}

func (x *UavBattery) GetVoltageBattery() float32 {
	if x != nil && x.VoltageBattery != nil {
		return *x.VoltageBattery
	}
	return 0
}

func (x *UavBattery) GetCurrentBattery() float32 {
	if x != nil && x.CurrentBattery != nil {
		return *x.CurrentBattery
	}
	return 0
}

func (x *UavBattery) GetRemaining() float32 {
	if x != nil && x.Remaining != nil {
		return *x.Remaining
	}
	return 0
}

// ステータス情報
type UavStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signal  UavStatus_UavSignal `protobuf:"varint,1,opt,name=signal,proto3,enum=trajectory.trjx_api_service.UavStatus_UavSignal" json:"signal,omitempty"` // 機体総合情報
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                     // メッセージ
	// Types that are assignable to StatusDetail:
	//
	//	*UavStatus_System
	//	*UavStatus_Flight
	//	*UavStatus_Status
	StatusDetail isUavStatus_StatusDetail `protobuf_oneof:"status_detail"`
}

func (x *UavStatus) Reset() {
	*x = UavStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_type_resource_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UavStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UavStatus) ProtoMessage() {}

func (x *UavStatus) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_type_resource_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UavStatus.ProtoReflect.Descriptor instead.
func (*UavStatus) Descriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{4}
}

func (x *UavStatus) GetSignal() UavStatus_UavSignal {
	if x != nil {
		return x.Signal
	}
	return UavStatus_SIGNAL_WHITE
}

func (x *UavStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (m *UavStatus) GetStatusDetail() isUavStatus_StatusDetail {
	if m != nil {
		return m.StatusDetail
	}
	return nil
}

func (x *UavStatus) GetSystem() *UavStatus_UavSystemStatus {
	if x, ok := x.GetStatusDetail().(*UavStatus_System); ok {
		return x.System
	}
	return nil
}

func (x *UavStatus) GetFlight() *UavStatus_UavFlightStatus {
	if x, ok := x.GetStatusDetail().(*UavStatus_Flight); ok {
		return x.Flight
	}
	return nil
}

func (x *UavStatus) GetStatus() *UavStatus_UavArmStatus {
	if x, ok := x.GetStatusDetail().(*UavStatus_Status); ok {
		return x.Status
	}
	return nil
}

type isUavStatus_StatusDetail interface {
	isUavStatus_StatusDetail()
}

type UavStatus_System struct {
	System *UavStatus_UavSystemStatus `protobuf:"bytes,3,opt,name=system,proto3,oneof"` // 機体状態
}

type UavStatus_Flight struct {
	Flight *UavStatus_UavFlightStatus `protobuf:"bytes,4,opt,name=flight,proto3,oneof"` // 飛行状態
}

type UavStatus_Status struct {
	Status *UavStatus_UavArmStatus `protobuf:"bytes,5,opt,name=status,proto3,oneof"` // ARMステータス
}

func (*UavStatus_System) isUavStatus_StatusDetail() {}

func (*UavStatus_Flight) isUavStatus_StatusDetail() {}

func (*UavStatus_Status) isUavStatus_StatusDetail() {}

// パス情報
type UavPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source UavPath_SOURCE `protobuf:"varint,1,opt,name=source,proto3,enum=trajectory.trjx_api_service.UavPath_SOURCE" json:"source,omitempty"` // データソース
}

func (x *UavPath) Reset() {
	*x = UavPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_type_resource_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UavPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UavPath) ProtoMessage() {}

func (x *UavPath) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_type_resource_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UavPath.ProtoReflect.Descriptor instead.
func (*UavPath) Descriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{5}
}

func (x *UavPath) GetSource() UavPath_SOURCE {
	if x != nil {
		return x.Source
	}
	return UavPath_SOURCE_UNSPECIFIED
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 緯度
	Latitude float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// 経度
	Longitude float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// 高度
	Altitude *Altitude `protobuf:"bytes,4,opt,name=altitude,proto3" json:"altitude,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_type_resource_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_type_resource_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{6}
}

func (x *Position) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Position) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Position) GetAltitude() *Altitude {
	if x != nil {
		return x.Altitude
	}
	return nil
}

type Altitude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Standard Altitude_Standard `protobuf:"varint,1,opt,name=standard,proto3,enum=trajectory.trjx_api_service.Altitude_Standard" json:"standard,omitempty"`
	Altitude float32           `protobuf:"fixed32,2,opt,name=altitude,proto3" json:"altitude,omitempty"` // m
}

func (x *Altitude) Reset() {
	*x = Altitude{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_type_resource_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Altitude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Altitude) ProtoMessage() {}

func (x *Altitude) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_type_resource_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Altitude.ProtoReflect.Descriptor instead.
func (*Altitude) Descriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{7}
}

func (x *Altitude) GetStandard() Altitude_Standard {
	if x != nil {
		return x.Standard
	}
	return Altitude_ALTITUDE_ATTR_UNSPECIFIED
}

func (x *Altitude) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

// XY座標
type Coordinate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 緯度
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// 経度
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Coordinate) Reset() {
	*x = Coordinate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_type_resource_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate) ProtoMessage() {}

func (x *Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_type_resource_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate.ProtoReflect.Descriptor instead.
func (*Coordinate) Descriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{8}
}

func (x *Coordinate) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Coordinate) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

// 機体状態
type UavStatus_UavSystemStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status UavStatus_UavSystemStatus_STATUS `protobuf:"varint,1,opt,name=status,proto3,enum=trajectory.trjx_api_service.UavStatus_UavSystemStatus_STATUS" json:"status,omitempty"` // 詳細状態
}

func (x *UavStatus_UavSystemStatus) Reset() {
	*x = UavStatus_UavSystemStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_type_resource_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UavStatus_UavSystemStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UavStatus_UavSystemStatus) ProtoMessage() {}

func (x *UavStatus_UavSystemStatus) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_type_resource_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UavStatus_UavSystemStatus.ProtoReflect.Descriptor instead.
func (*UavStatus_UavSystemStatus) Descriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{4, 0}
}

func (x *UavStatus_UavSystemStatus) GetStatus() UavStatus_UavSystemStatus_STATUS {
	if x != nil {
		return x.Status
	}
	return UavStatus_UavSystemStatus_STATUS_NON
}

// 飛行状態
type UavStatus_UavFlightStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  UavStatus_UavFlightStatus_STATUS `protobuf:"varint,1,opt,name=status,proto3,enum=trajectory.trjx_api_service.UavStatus_UavFlightStatus_STATUS" json:"status,omitempty"` // 飛行状態
	Mode    UavStatus_UavFlightStatus_MODE   `protobuf:"varint,2,opt,name=mode,proto3,enum=trajectory.trjx_api_service.UavStatus_UavFlightStatus_MODE" json:"mode,omitempty"`       // 飛行モード
	Message string                           `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                                                                  // メッセージ
	Time    int64                            `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`                                                                       // 状態取得時刻(UNIX時刻)(sec)
}

func (x *UavStatus_UavFlightStatus) Reset() {
	*x = UavStatus_UavFlightStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_type_resource_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UavStatus_UavFlightStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UavStatus_UavFlightStatus) ProtoMessage() {}

func (x *UavStatus_UavFlightStatus) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_type_resource_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UavStatus_UavFlightStatus.ProtoReflect.Descriptor instead.
func (*UavStatus_UavFlightStatus) Descriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{4, 1}
}

func (x *UavStatus_UavFlightStatus) GetStatus() UavStatus_UavFlightStatus_STATUS {
	if x != nil {
		return x.Status
	}
	return UavStatus_UavFlightStatus_STATUS_UNSPECIFIED
}

func (x *UavStatus_UavFlightStatus) GetMode() UavStatus_UavFlightStatus_MODE {
	if x != nil {
		return x.Mode
	}
	return UavStatus_UavFlightStatus_MODE_UNSPECIFIED
}

func (x *UavStatus_UavFlightStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UavStatus_UavFlightStatus) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// ARMステータス
type UavStatus_UavArmStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status UavStatus_UavArmStatus_STATUS `protobuf:"varint,1,opt,name=status,proto3,enum=trajectory.trjx_api_service.UavStatus_UavArmStatus_STATUS" json:"status,omitempty"` // 飛行状態
}

func (x *UavStatus_UavArmStatus) Reset() {
	*x = UavStatus_UavArmStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_type_resource_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UavStatus_UavArmStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UavStatus_UavArmStatus) ProtoMessage() {}

func (x *UavStatus_UavArmStatus) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_type_resource_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UavStatus_UavArmStatus.ProtoReflect.Descriptor instead.
func (*UavStatus_UavArmStatus) Descriptor() ([]byte, []int) {
	return file_trajectory_type_resource_proto_rawDescGZIP(), []int{4, 2}
}

func (x *UavStatus_UavArmStatus) GetStatus() UavStatus_UavArmStatus_STATUS {
	if x != nil {
		return x.Status
	}
	return UavStatus_UavArmStatus_STATUS_UNSPECIFIED
}

var File_trajectory_type_resource_proto protoreflect.FileDescriptor

var file_trajectory_type_resource_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1b, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x6a,
	0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xd4, 0x01,
	0x0a, 0x08, 0x55, 0x61, 0x76, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x61,
	0x76, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x61, 0x76, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x69, 0x64, 0x22, 0xea, 0x05, 0x0a, 0x0b, 0x55, 0x61, 0x76, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x08, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x6e, 0x0a, 0x12, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x74, 0x72, 0x6a, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x61, 0x76, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x48, 0x03, 0x52, 0x11, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x05, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x09, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x58, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x09,
	0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x59, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x08, 0x52, 0x09, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5a, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x77, 0x70, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x57, 0x70, 0x54,
	0x61, 0x67, 0x88, 0x01, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x41,
	0x4c, 0x54, 0x49, 0x54, 0x55, 0x44, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x5f, 0x45, 0x4c, 0x49, 0x50, 0x53, 0x4f, 0x49, 0x44, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x41, 0x4c, 0x54, 0x49, 0x54, 0x55, 0x44, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x4c, 0x54, 0x49, 0x54, 0x55, 0x44, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x47, 0x4c, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c,
	0x54, 0x49, 0x54, 0x55, 0x44, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45,
	0x5f, 0x4d, 0x53, 0x4c, 0x10, 0x03, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x7a, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x77, 0x70, 0x5f, 0x74, 0x61,
	0x67, 0x22, 0xef, 0x03, 0x0a, 0x0b, 0x55, 0x61, 0x76, 0x41, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x05, 0x70, 0x69, 0x74,
	0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x79, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x02, 0x52, 0x03, 0x79, 0x61, 0x77, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x03, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x74, 0x63, 0x68, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x79, 0x61, 0x77, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x08, 0x79, 0x61, 0x77,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x67, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x08, 0x63,
	0x6f, 0x67, 0x53, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x70, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x08, 0x52, 0x09, 0x73, 0x6c, 0x69,
	0x70, 0x53, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x73,
	0x63, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x6f, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x0a, 0x52, 0x03, 0x63, 0x6f, 0x67, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72,
	0x6f, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x79, 0x61, 0x77, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x79, 0x61, 0x77, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x6c, 0x69, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x63, 0x6f, 0x67, 0x22, 0xc1, 0x01, 0x0a, 0x0a, 0x55, 0x61, 0x76, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x12, 0x2c, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0e, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x02, 0x52, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x8b, 0x0c, 0x0a, 0x09, 0x55, 0x61, 0x76, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x74, 0x72, 0x6a, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x61,
	0x76, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x6a, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x55, 0x61, 0x76, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x50, 0x0a, 0x06, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x72,
	0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x6a, 0x78, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x61, 0x76, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x55, 0x61, 0x76, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4d, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x6a, 0x78, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x61, 0x76, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x61, 0x76, 0x41, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xd1, 0x02, 0x0a,
	0x0f, 0x55, 0x61, 0x76, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72,
	0x6a, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x61, 0x76, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x10,
	0x05, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x52,
	0x45, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x06,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10,
	0x07, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4d, 0x45, 0x52,
	0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x09,
	0x1a, 0xed, 0x03, 0x0a, 0x0f, 0x55, 0x61, 0x76, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x74, 0x72, 0x6a, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x61, 0x76,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x74, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x6a, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x55, 0x61, 0x76, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x06, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f,
	0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4c, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x10, 0x06, 0x22, 0x69, 0x0a, 0x04, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x14, 0x0a,
	0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x4f, 0x54, 0x4f,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x54, 0x4c, 0x10, 0x05,
	0x1a, 0xa7, 0x01, 0x0a, 0x0c, 0x55, 0x61, 0x76, 0x41, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3a, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74,
	0x72, 0x6a, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x61, 0x76, 0x41, 0x72, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x43, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x52, 0x4d, 0x10, 0x02, 0x22, 0xa7, 0x01, 0x0a, 0x09, 0x55,
	0x61, 0x76, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x47, 0x4e,
	0x41, 0x4c, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x42,
	0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c,
	0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x10,
	0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x45, 0x45,
	0x4e, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x07, 0x55, 0x61, 0x76, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74,
	0x72, 0x6a, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x61, 0x76, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54,
	0x52, 0x59, 0x10, 0x02, 0x22, 0x87, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x61,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x6a, 0x78, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xcd,
	0x01, 0x0a, 0x08, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x6a, 0x78, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x22, 0x59, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12,
	0x1d, 0x0a, 0x19, 0x41, 0x4c, 0x54, 0x49, 0x54, 0x55, 0x44, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x47, 0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x53, 0x4c, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x4c, 0x4c, 0x49, 0x50, 0x53, 0x4f, 0x49, 0x44, 0x45, 0x10, 0x04, 0x22, 0x46,
	0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x2a, 0x7a, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54,
	0x10, 0x03, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x6a, 0x70, 0x2f, 0x74, 0x72,
	0x6a, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trajectory_type_resource_proto_rawDescOnce sync.Once
	file_trajectory_type_resource_proto_rawDescData = file_trajectory_type_resource_proto_rawDesc
)

func file_trajectory_type_resource_proto_rawDescGZIP() []byte {
	file_trajectory_type_resource_proto_rawDescOnce.Do(func() {
		file_trajectory_type_resource_proto_rawDescData = protoimpl.X.CompressGZIP(file_trajectory_type_resource_proto_rawDescData)
	})
	return file_trajectory_type_resource_proto_rawDescData
}

var file_trajectory_type_resource_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_trajectory_type_resource_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_trajectory_type_resource_proto_goTypes = []any{
	(StreamStatus)(0),                     // 0: trajectory.trjx_api_service.StreamStatus
	(UavPosition_AltitudeAttribute)(0),    // 1: trajectory.trjx_api_service.UavPosition.AltitudeAttribute
	(UavStatus_UavSignal)(0),              // 2: trajectory.trjx_api_service.UavStatus.UavSignal
	(UavStatus_UavSystemStatus_STATUS)(0), // 3: trajectory.trjx_api_service.UavStatus.UavSystemStatus.STATUS
	(UavStatus_UavFlightStatus_STATUS)(0), // 4: trajectory.trjx_api_service.UavStatus.UavFlightStatus.STATUS
	(UavStatus_UavFlightStatus_MODE)(0),   // 5: trajectory.trjx_api_service.UavStatus.UavFlightStatus.MODE
	(UavStatus_UavArmStatus_STATUS)(0),    // 6: trajectory.trjx_api_service.UavStatus.UavArmStatus.STATUS
	(UavPath_SOURCE)(0),                   // 7: trajectory.trjx_api_service.UavPath.SOURCE
	(Altitude_Standard)(0),                // 8: trajectory.trjx_api_service.Altitude.Standard
	(*UavBasic)(nil),                      // 9: trajectory.trjx_api_service.UavBasic
	(*UavPosition)(nil),                   // 10: trajectory.trjx_api_service.UavPosition
	(*UavAttitude)(nil),                   // 11: trajectory.trjx_api_service.UavAttitude
	(*UavBattery)(nil),                    // 12: trajectory.trjx_api_service.UavBattery
	(*UavStatus)(nil),                     // 13: trajectory.trjx_api_service.UavStatus
	(*UavPath)(nil),                       // 14: trajectory.trjx_api_service.UavPath
	(*Position)(nil),                      // 15: trajectory.trjx_api_service.Position
	(*Altitude)(nil),                      // 16: trajectory.trjx_api_service.Altitude
	(*Coordinate)(nil),                    // 17: trajectory.trjx_api_service.Coordinate
	(*UavStatus_UavSystemStatus)(nil),     // 18: trajectory.trjx_api_service.UavStatus.UavSystemStatus
	(*UavStatus_UavFlightStatus)(nil),     // 19: trajectory.trjx_api_service.UavStatus.UavFlightStatus
	(*UavStatus_UavArmStatus)(nil),        // 20: trajectory.trjx_api_service.UavStatus.UavArmStatus
}
var file_trajectory_type_resource_proto_depIdxs = []int32{
	1,  // 0: trajectory.trjx_api_service.UavPosition.altitude_attribute:type_name -> trajectory.trjx_api_service.UavPosition.AltitudeAttribute
	2,  // 1: trajectory.trjx_api_service.UavStatus.signal:type_name -> trajectory.trjx_api_service.UavStatus.UavSignal
	18, // 2: trajectory.trjx_api_service.UavStatus.system:type_name -> trajectory.trjx_api_service.UavStatus.UavSystemStatus
	19, // 3: trajectory.trjx_api_service.UavStatus.flight:type_name -> trajectory.trjx_api_service.UavStatus.UavFlightStatus
	20, // 4: trajectory.trjx_api_service.UavStatus.status:type_name -> trajectory.trjx_api_service.UavStatus.UavArmStatus
	7,  // 5: trajectory.trjx_api_service.UavPath.source:type_name -> trajectory.trjx_api_service.UavPath.SOURCE
	16, // 6: trajectory.trjx_api_service.Position.altitude:type_name -> trajectory.trjx_api_service.Altitude
	8,  // 7: trajectory.trjx_api_service.Altitude.standard:type_name -> trajectory.trjx_api_service.Altitude.Standard
	3,  // 8: trajectory.trjx_api_service.UavStatus.UavSystemStatus.status:type_name -> trajectory.trjx_api_service.UavStatus.UavSystemStatus.STATUS
	4,  // 9: trajectory.trjx_api_service.UavStatus.UavFlightStatus.status:type_name -> trajectory.trjx_api_service.UavStatus.UavFlightStatus.STATUS
	5,  // 10: trajectory.trjx_api_service.UavStatus.UavFlightStatus.mode:type_name -> trajectory.trjx_api_service.UavStatus.UavFlightStatus.MODE
	6,  // 11: trajectory.trjx_api_service.UavStatus.UavArmStatus.status:type_name -> trajectory.trjx_api_service.UavStatus.UavArmStatus.STATUS
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_trajectory_type_resource_proto_init() }
func file_trajectory_type_resource_proto_init() {
	if File_trajectory_type_resource_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trajectory_type_resource_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UavBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_type_resource_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*UavPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_type_resource_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UavAttitude); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_type_resource_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UavBattery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_type_resource_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UavStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_type_resource_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UavPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_type_resource_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_type_resource_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Altitude); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_type_resource_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Coordinate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_type_resource_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*UavStatus_UavSystemStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_type_resource_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*UavStatus_UavFlightStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_type_resource_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*UavStatus_UavArmStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_trajectory_type_resource_proto_msgTypes[0].OneofWrappers = []any{
		(*UavBasic_FlightPlanId)(nil),
		(*UavBasic_FlightSpaceId)(nil),
	}
	file_trajectory_type_resource_proto_msgTypes[1].OneofWrappers = []any{}
	file_trajectory_type_resource_proto_msgTypes[2].OneofWrappers = []any{}
	file_trajectory_type_resource_proto_msgTypes[3].OneofWrappers = []any{}
	file_trajectory_type_resource_proto_msgTypes[4].OneofWrappers = []any{
		(*UavStatus_System)(nil),
		(*UavStatus_Flight)(nil),
		(*UavStatus_Status)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trajectory_type_resource_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trajectory_type_resource_proto_goTypes,
		DependencyIndexes: file_trajectory_type_resource_proto_depIdxs,
		EnumInfos:         file_trajectory_type_resource_proto_enumTypes,
		MessageInfos:      file_trajectory_type_resource_proto_msgTypes,
	}.Build()
	File_trajectory_type_resource_proto = out.File
	file_trajectory_type_resource_proto_rawDesc = nil
	file_trajectory_type_resource_proto_goTypes = nil
	file_trajectory_type_resource_proto_depIdxs = nil
}
