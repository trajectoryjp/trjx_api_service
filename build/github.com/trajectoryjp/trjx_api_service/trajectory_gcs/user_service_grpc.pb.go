// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: trajectory/trajectory_gcs_service/protocol/v1/user_service.proto

package trajectory_gcs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserAccountService_GetUserPermission_FullMethodName    = "/trajectory.trajectory_gcs_service.protocol.v1.UserAccountService/GetUserPermission"
	UserAccountService_ListUserPermissions_FullMethodName  = "/trajectory.trajectory_gcs_service.protocol.v1.UserAccountService/ListUserPermissions"
	UserAccountService_UpdateUserPermission_FullMethodName = "/trajectory.trajectory_gcs_service.protocol.v1.UserAccountService/UpdateUserPermission"
)

// UserAccountServiceClient is the client API for UserAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAccountServiceClient interface {
	// GetUserPermission
	// アクセス権限: admin, operator
	GetUserPermission(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserPermission, error)
	// ListUserPermissions
	// アクセス権限: admin, operator
	ListUserPermissions(ctx context.Context, in *ListUserPermissionsRequest, opts ...grpc.CallOption) (*ListUserPermissionsResponse, error)
	// UpdateUserPermission
	// アクセス権限: admin
	// Updateは全更新
	UpdateUserPermission(ctx context.Context, in *UserPermissionWithName, opts ...grpc.CallOption) (*UserPermissionWithName, error)
}

type userAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAccountServiceClient(cc grpc.ClientConnInterface) UserAccountServiceClient {
	return &userAccountServiceClient{cc}
}

func (c *userAccountServiceClient) GetUserPermission(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserPermission, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserPermission)
	err := c.cc.Invoke(ctx, UserAccountService_GetUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) ListUserPermissions(ctx context.Context, in *ListUserPermissionsRequest, opts ...grpc.CallOption) (*ListUserPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserPermissionsResponse)
	err := c.cc.Invoke(ctx, UserAccountService_ListUserPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) UpdateUserPermission(ctx context.Context, in *UserPermissionWithName, opts ...grpc.CallOption) (*UserPermissionWithName, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserPermissionWithName)
	err := c.cc.Invoke(ctx, UserAccountService_UpdateUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAccountServiceServer is the server API for UserAccountService service.
// All implementations must embed UnimplementedUserAccountServiceServer
// for forward compatibility
type UserAccountServiceServer interface {
	// GetUserPermission
	// アクセス権限: admin, operator
	GetUserPermission(context.Context, *emptypb.Empty) (*UserPermission, error)
	// ListUserPermissions
	// アクセス権限: admin, operator
	ListUserPermissions(context.Context, *ListUserPermissionsRequest) (*ListUserPermissionsResponse, error)
	// UpdateUserPermission
	// アクセス権限: admin
	// Updateは全更新
	UpdateUserPermission(context.Context, *UserPermissionWithName) (*UserPermissionWithName, error)
	mustEmbedUnimplementedUserAccountServiceServer()
}

// UnimplementedUserAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserAccountServiceServer struct {
}

func (UnimplementedUserAccountServiceServer) GetUserPermission(context.Context, *emptypb.Empty) (*UserPermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermission not implemented")
}
func (UnimplementedUserAccountServiceServer) ListUserPermissions(context.Context, *ListUserPermissionsRequest) (*ListUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserPermissions not implemented")
}
func (UnimplementedUserAccountServiceServer) UpdateUserPermission(context.Context, *UserPermissionWithName) (*UserPermissionWithName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPermission not implemented")
}
func (UnimplementedUserAccountServiceServer) mustEmbedUnimplementedUserAccountServiceServer() {}

// UnsafeUserAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAccountServiceServer will
// result in compilation errors.
type UnsafeUserAccountServiceServer interface {
	mustEmbedUnimplementedUserAccountServiceServer()
}

func RegisterUserAccountServiceServer(s grpc.ServiceRegistrar, srv UserAccountServiceServer) {
	s.RegisterService(&UserAccountService_ServiceDesc, srv)
}

func _UserAccountService_GetUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).GetUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_GetUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).GetUserPermission(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_ListUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).ListUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_ListUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).ListUserPermissions(ctx, req.(*ListUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_UpdateUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPermissionWithName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).UpdateUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_UpdateUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).UpdateUserPermission(ctx, req.(*UserPermissionWithName))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAccountService_ServiceDesc is the grpc.ServiceDesc for UserAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trajectory.trajectory_gcs_service.protocol.v1.UserAccountService",
	HandlerType: (*UserAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPermission",
			Handler:    _UserAccountService_GetUserPermission_Handler,
		},
		{
			MethodName: "ListUserPermissions",
			Handler:    _UserAccountService_ListUserPermissions_Handler,
		},
		{
			MethodName: "UpdateUserPermission",
			Handler:    _UserAccountService_UpdateUserPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trajectory/trajectory_gcs_service/protocol/v1/user_service.proto",
}
