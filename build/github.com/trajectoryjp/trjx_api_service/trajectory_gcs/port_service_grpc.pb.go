// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: trajectory/trajectory_gcs_service/protocol/v1/port_service.proto

package trajectory_gcs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PortService_CreatePort_FullMethodName = "/trajectory.trajectory_gcs_service.protocol.v1.PortService/CreatePort"
	PortService_GetPort_FullMethodName    = "/trajectory.trajectory_gcs_service.protocol.v1.PortService/GetPort"
	PortService_ListPorts_FullMethodName  = "/trajectory.trajectory_gcs_service.protocol.v1.PortService/ListPorts"
	PortService_DeletePort_FullMethodName = "/trajectory.trajectory_gcs_service.protocol.v1.PortService/DeletePort"
	PortService_UpdatePort_FullMethodName = "/trajectory.trajectory_gcs_service.protocol.v1.PortService/UpdatePort"
)

// PortServiceClient is the client API for PortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortServiceClient interface {
	// ポートの登録
	CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*Port, error)
	// ポートの取得
	GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*Port, error)
	// ポートのリスト取得
	ListPorts(ctx context.Context, in *ListPortsRequest, opts ...grpc.CallOption) (PortService_ListPortsClient, error)
	// ポートの削除
	DeletePort(ctx context.Context, in *DeletePortRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ポートの更新
	UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*Port, error)
}

type portServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortServiceClient(cc grpc.ClientConnInterface) PortServiceClient {
	return &portServiceClient{cc}
}

func (c *portServiceClient) CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*Port, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Port)
	err := c.cc.Invoke(ctx, PortService_CreatePort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*Port, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Port)
	err := c.cc.Invoke(ctx, PortService_GetPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) ListPorts(ctx context.Context, in *ListPortsRequest, opts ...grpc.CallOption) (PortService_ListPortsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PortService_ServiceDesc.Streams[0], PortService_ListPorts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &portServiceListPortsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortService_ListPortsClient interface {
	Recv() (*ListPortsResponse, error)
	grpc.ClientStream
}

type portServiceListPortsClient struct {
	grpc.ClientStream
}

func (x *portServiceListPortsClient) Recv() (*ListPortsResponse, error) {
	m := new(ListPortsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portServiceClient) DeletePort(ctx context.Context, in *DeletePortRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PortService_DeletePort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*Port, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Port)
	err := c.cc.Invoke(ctx, PortService_UpdatePort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortServiceServer is the server API for PortService service.
// All implementations must embed UnimplementedPortServiceServer
// for forward compatibility
type PortServiceServer interface {
	// ポートの登録
	CreatePort(context.Context, *CreatePortRequest) (*Port, error)
	// ポートの取得
	GetPort(context.Context, *GetPortRequest) (*Port, error)
	// ポートのリスト取得
	ListPorts(*ListPortsRequest, PortService_ListPortsServer) error
	// ポートの削除
	DeletePort(context.Context, *DeletePortRequest) (*emptypb.Empty, error)
	// ポートの更新
	UpdatePort(context.Context, *UpdatePortRequest) (*Port, error)
	mustEmbedUnimplementedPortServiceServer()
}

// UnimplementedPortServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortServiceServer struct {
}

func (UnimplementedPortServiceServer) CreatePort(context.Context, *CreatePortRequest) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePort not implemented")
}
func (UnimplementedPortServiceServer) GetPort(context.Context, *GetPortRequest) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}
func (UnimplementedPortServiceServer) ListPorts(*ListPortsRequest, PortService_ListPortsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPorts not implemented")
}
func (UnimplementedPortServiceServer) DeletePort(context.Context, *DeletePortRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePort not implemented")
}
func (UnimplementedPortServiceServer) UpdatePort(context.Context, *UpdatePortRequest) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePort not implemented")
}
func (UnimplementedPortServiceServer) mustEmbedUnimplementedPortServiceServer() {}

// UnsafePortServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortServiceServer will
// result in compilation errors.
type UnsafePortServiceServer interface {
	mustEmbedUnimplementedPortServiceServer()
}

func RegisterPortServiceServer(s grpc.ServiceRegistrar, srv PortServiceServer) {
	s.RegisterService(&PortService_ServiceDesc, srv)
}

func _PortService_CreatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).CreatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_CreatePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).CreatePort(ctx, req.(*CreatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_GetPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).GetPort(ctx, req.(*GetPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_ListPorts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPortsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortServiceServer).ListPorts(m, &portServiceListPortsServer{ServerStream: stream})
}

type PortService_ListPortsServer interface {
	Send(*ListPortsResponse) error
	grpc.ServerStream
}

type portServiceListPortsServer struct {
	grpc.ServerStream
}

func (x *portServiceListPortsServer) Send(m *ListPortsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PortService_DeletePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).DeletePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_DeletePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).DeletePort(ctx, req.(*DeletePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_UpdatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).UpdatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_UpdatePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).UpdatePort(ctx, req.(*UpdatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortService_ServiceDesc is the grpc.ServiceDesc for PortService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trajectory.trajectory_gcs_service.protocol.v1.PortService",
	HandlerType: (*PortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePort",
			Handler:    _PortService_CreatePort_Handler,
		},
		{
			MethodName: "GetPort",
			Handler:    _PortService_GetPort_Handler,
		},
		{
			MethodName: "DeletePort",
			Handler:    _PortService_DeletePort_Handler,
		},
		{
			MethodName: "UpdatePort",
			Handler:    _PortService_UpdatePort_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPorts",
			Handler:       _PortService_ListPorts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "trajectory/trajectory_gcs_service/protocol/v1/port_service.proto",
}
