// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: trajectory/trajectory_gcs_service/protocol/v1/mission_service.proto

package trajectory_gcs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MissionService_CreateMission_FullMethodName = "/trajectory.trajectory_gcs_service.protocol.v1.MissionService/CreateMission"
	MissionService_AddMission_FullMethodName    = "/trajectory.trajectory_gcs_service.protocol.v1.MissionService/AddMission"
	MissionService_GetMission_FullMethodName    = "/trajectory.trajectory_gcs_service.protocol.v1.MissionService/GetMission"
	MissionService_DeleteMission_FullMethodName = "/trajectory.trajectory_gcs_service.protocol.v1.MissionService/DeleteMission"
	MissionService_UpdateMission_FullMethodName = "/trajectory.trajectory_gcs_service.protocol.v1.MissionService/UpdateMission"
)

// MissionServiceClient is the client API for MissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MissionServiceClient interface {
	// CreateMission: ミッションの生成
	CreateMission(ctx context.Context, in *CreateMissionRequest, opts ...grpc.CallOption) (*CreateMissionResponse, error)
	// AddMission: ミッションをデータベースに追加する
	AddMission(ctx context.Context, in *AddMissionRequest, opts ...grpc.CallOption) (*MissionID, error)
	// GetMission: ミッションの取得
	GetMission(ctx context.Context, in *MissionID, opts ...grpc.CallOption) (*Mission, error)
	// DeleteMission: ミッションの削除
	DeleteMission(ctx context.Context, in *MissionID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateMission: ミッションの更新
	UpdateMission(ctx context.Context, in *UpdateMissionRequest, opts ...grpc.CallOption) (*Mission, error)
}

type missionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMissionServiceClient(cc grpc.ClientConnInterface) MissionServiceClient {
	return &missionServiceClient{cc}
}

func (c *missionServiceClient) CreateMission(ctx context.Context, in *CreateMissionRequest, opts ...grpc.CallOption) (*CreateMissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMissionResponse)
	err := c.cc.Invoke(ctx, MissionService_CreateMission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) AddMission(ctx context.Context, in *AddMissionRequest, opts ...grpc.CallOption) (*MissionID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MissionID)
	err := c.cc.Invoke(ctx, MissionService_AddMission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) GetMission(ctx context.Context, in *MissionID, opts ...grpc.CallOption) (*Mission, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Mission)
	err := c.cc.Invoke(ctx, MissionService_GetMission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) DeleteMission(ctx context.Context, in *MissionID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MissionService_DeleteMission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) UpdateMission(ctx context.Context, in *UpdateMissionRequest, opts ...grpc.CallOption) (*Mission, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Mission)
	err := c.cc.Invoke(ctx, MissionService_UpdateMission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MissionServiceServer is the server API for MissionService service.
// All implementations must embed UnimplementedMissionServiceServer
// for forward compatibility
type MissionServiceServer interface {
	// CreateMission: ミッションの生成
	CreateMission(context.Context, *CreateMissionRequest) (*CreateMissionResponse, error)
	// AddMission: ミッションをデータベースに追加する
	AddMission(context.Context, *AddMissionRequest) (*MissionID, error)
	// GetMission: ミッションの取得
	GetMission(context.Context, *MissionID) (*Mission, error)
	// DeleteMission: ミッションの削除
	DeleteMission(context.Context, *MissionID) (*emptypb.Empty, error)
	// UpdateMission: ミッションの更新
	UpdateMission(context.Context, *UpdateMissionRequest) (*Mission, error)
	mustEmbedUnimplementedMissionServiceServer()
}

// UnimplementedMissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMissionServiceServer struct {
}

func (UnimplementedMissionServiceServer) CreateMission(context.Context, *CreateMissionRequest) (*CreateMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMission not implemented")
}
func (UnimplementedMissionServiceServer) AddMission(context.Context, *AddMissionRequest) (*MissionID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMission not implemented")
}
func (UnimplementedMissionServiceServer) GetMission(context.Context, *MissionID) (*Mission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMission not implemented")
}
func (UnimplementedMissionServiceServer) DeleteMission(context.Context, *MissionID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMission not implemented")
}
func (UnimplementedMissionServiceServer) UpdateMission(context.Context, *UpdateMissionRequest) (*Mission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMission not implemented")
}
func (UnimplementedMissionServiceServer) mustEmbedUnimplementedMissionServiceServer() {}

// UnsafeMissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MissionServiceServer will
// result in compilation errors.
type UnsafeMissionServiceServer interface {
	mustEmbedUnimplementedMissionServiceServer()
}

func RegisterMissionServiceServer(s grpc.ServiceRegistrar, srv MissionServiceServer) {
	s.RegisterService(&MissionService_ServiceDesc, srv)
}

func _MissionService_CreateMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).CreateMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_CreateMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).CreateMission(ctx, req.(*CreateMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_AddMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).AddMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_AddMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).AddMission(ctx, req.(*AddMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_GetMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).GetMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_GetMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).GetMission(ctx, req.(*MissionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_DeleteMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).DeleteMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_DeleteMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).DeleteMission(ctx, req.(*MissionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_UpdateMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).UpdateMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_UpdateMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).UpdateMission(ctx, req.(*UpdateMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MissionService_ServiceDesc is the grpc.ServiceDesc for MissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trajectory.trajectory_gcs_service.protocol.v1.MissionService",
	HandlerType: (*MissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMission",
			Handler:    _MissionService_CreateMission_Handler,
		},
		{
			MethodName: "AddMission",
			Handler:    _MissionService_AddMission_Handler,
		},
		{
			MethodName: "GetMission",
			Handler:    _MissionService_GetMission_Handler,
		},
		{
			MethodName: "DeleteMission",
			Handler:    _MissionService_DeleteMission_Handler,
		},
		{
			MethodName: "UpdateMission",
			Handler:    _MissionService_UpdateMission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trajectory/trajectory_gcs_service/protocol/v1/mission_service.proto",
}
