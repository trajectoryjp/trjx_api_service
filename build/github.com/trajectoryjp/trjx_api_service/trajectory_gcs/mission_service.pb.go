// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: trajectory/trajectory_gcs_service/protocol/v1/mission_service.proto

package trajectory_gcs

import (
	_ "github.com/trajectoryjp/trjx_api_service/type"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateMissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId *OragnizationID `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProjectId      *ProjectID      `protobuf:"bytes,7,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TransactionId  *TransactionID  `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // WideArea切替。未指定はWide。
	// Types that are assignable to Select:
	//
	//	*CreateMissionRequest_CreateWithProperty
	//	*CreateMissionRequest_CreateWithUav
	//	*CreateMissionRequest_CreateAndAssign
	//	*CreateMissionRequest_OnlyAssign
	Select      isCreateMissionRequest_Select `protobuf_oneof:"Select"`
	StartTime   *ScheduledTime                `protobuf:"bytes,10,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`       //　onlyAssignでは無効。
	ArrivalTime *ScheduledTime                `protobuf:"bytes,11,opt,name=arrival_time,json=arrivalTime,proto3,oneof" json:"arrival_time,omitempty"` // 到着時間。onlyAssignでは無効。
	Mission     *Mission                      `protobuf:"bytes,12,opt,name=mission,proto3" json:"mission,omitempty"`                                  // ルート計算を行うMissionItemのリスト。
}

func (x *CreateMissionRequest) Reset() {
	*x = CreateMissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMissionRequest) ProtoMessage() {}

func (x *CreateMissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMissionRequest.ProtoReflect.Descriptor instead.
func (*CreateMissionRequest) Descriptor() ([]byte, []int) {
	return file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateMissionRequest) GetOrganizationId() *OragnizationID {
	if x != nil {
		return x.OrganizationId
	}
	return nil
}

func (x *CreateMissionRequest) GetProjectId() *ProjectID {
	if x != nil {
		return x.ProjectId
	}
	return nil
}

func (x *CreateMissionRequest) GetTransactionId() *TransactionID {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (m *CreateMissionRequest) GetSelect() isCreateMissionRequest_Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (x *CreateMissionRequest) GetCreateWithProperty() *CreateMissionRequest_WithUAV {
	if x, ok := x.GetSelect().(*CreateMissionRequest_CreateWithProperty); ok {
		return x.CreateWithProperty
	}
	return nil
}

func (x *CreateMissionRequest) GetCreateWithUav() *CreateMissionRequest_WithUAV {
	if x, ok := x.GetSelect().(*CreateMissionRequest_CreateWithUav); ok {
		return x.CreateWithUav
	}
	return nil
}

func (x *CreateMissionRequest) GetCreateAndAssign() *CreateMissionRequest_WithUAV {
	if x, ok := x.GetSelect().(*CreateMissionRequest_CreateAndAssign); ok {
		return x.CreateAndAssign
	}
	return nil
}

func (x *CreateMissionRequest) GetOnlyAssign() *CreateMissionRequest_OnlyAssgin {
	if x, ok := x.GetSelect().(*CreateMissionRequest_OnlyAssign); ok {
		return x.OnlyAssign
	}
	return nil
}

func (x *CreateMissionRequest) GetStartTime() *ScheduledTime {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CreateMissionRequest) GetArrivalTime() *ScheduledTime {
	if x != nil {
		return x.ArrivalTime
	}
	return nil
}

func (x *CreateMissionRequest) GetMission() *Mission {
	if x != nil {
		return x.Mission
	}
	return nil
}

type isCreateMissionRequest_Select interface {
	isCreateMissionRequest_Select()
}

type CreateMissionRequest_CreateWithProperty struct {
	CreateWithProperty *CreateMissionRequest_WithUAV `protobuf:"bytes,4,opt,name=create_with_property,json=createWithProperty,proto3,oneof"` // 機体情報に基づいた時刻計算。ルート設計のみ（機体位置取得なし）
}

type CreateMissionRequest_CreateWithUav struct {
	CreateWithUav *CreateMissionRequest_WithUAV `protobuf:"bytes,5,opt,name=create_with_uav,json=createWithUav,proto3,oneof"` // 機体位置からのルート設計。機体への割付なし。
}

type CreateMissionRequest_CreateAndAssign struct {
	CreateAndAssign *CreateMissionRequest_WithUAV `protobuf:"bytes,6,opt,name=create_and_assign,json=createAndAssign,proto3,oneof"` // 従来のCreateMissionAndAssign（機体割付）
}

type CreateMissionRequest_OnlyAssign struct {
	OnlyAssign *CreateMissionRequest_OnlyAssgin `protobuf:"bytes,8,opt,name=only_assign,json=onlyAssign,proto3,oneof"` // ルート設計なし。機体割り付けのみ。ルートの安全性は保証されないことに注意（ローバー利用想定）。
}

func (*CreateMissionRequest_CreateWithProperty) isCreateMissionRequest_Select() {}

func (*CreateMissionRequest_CreateWithUav) isCreateMissionRequest_Select() {}

func (*CreateMissionRequest_CreateAndAssign) isCreateMissionRequest_Select() {}

func (*CreateMissionRequest_OnlyAssign) isCreateMissionRequest_Select() {}

type CreateMissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result           *MissionControllerResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`                                               // 処理結果
	Mission          *Mission                 `protobuf:"bytes,2,opt,name=mission,proto3" json:"mission,omitempty"`                                             // ルート計算を行った結果のミッションのリスト
	ReservedRouteIds []string                 `protobuf:"bytes,3,rep,name=reserved_route_ids,json=reservedRouteIds,proto3" json:"reserved_route_ids,omitempty"` // 予約ID
}

func (x *CreateMissionResponse) Reset() {
	*x = CreateMissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMissionResponse) ProtoMessage() {}

func (x *CreateMissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMissionResponse.ProtoReflect.Descriptor instead.
func (*CreateMissionResponse) Descriptor() ([]byte, []int) {
	return file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateMissionResponse) GetResult() *MissionControllerResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CreateMissionResponse) GetMission() *Mission {
	if x != nil {
		return x.Mission
	}
	return nil
}

func (x *CreateMissionResponse) GetReservedRouteIds() []string {
	if x != nil {
		return x.ReservedRouteIds
	}
	return nil
}

// AddMissionリクエスト
type AddMissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mission       *Mission         `protobuf:"bytes,1,opt,name=mission,proto3" json:"mission,omitempty"`                      // MissionItemのリスト
	Name          string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                            // 保存名
	ProjectId     *ProjectID       `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"` // 所有組織
	TransactionId *TransactionID   `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	UavId         *UAVID           `protobuf:"bytes,5,opt,name=uav_id,json=uavId,proto3" json:"uav_id,omitempty"`
	App           *ApplicationAttr `protobuf:"bytes,6,opt,name=app,proto3" json:"app,omitempty"` // Saveを要求したアプリケーション。CreateMissionの応答を透過的にセーブする場合は設定しない。MissionのappIDに反映される
}

func (x *AddMissionRequest) Reset() {
	*x = AddMissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMissionRequest) ProtoMessage() {}

func (x *AddMissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMissionRequest.ProtoReflect.Descriptor instead.
func (*AddMissionRequest) Descriptor() ([]byte, []int) {
	return file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDescGZIP(), []int{2}
}

func (x *AddMissionRequest) GetMission() *Mission {
	if x != nil {
		return x.Mission
	}
	return nil
}

func (x *AddMissionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddMissionRequest) GetProjectId() *ProjectID {
	if x != nil {
		return x.ProjectId
	}
	return nil
}

func (x *AddMissionRequest) GetTransactionId() *TransactionID {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *AddMissionRequest) GetUavId() *UAVID {
	if x != nil {
		return x.UavId
	}
	return nil
}

func (x *AddMissionRequest) GetApp() *ApplicationAttr {
	if x != nil {
		return x.App
	}
	return nil
}

// UpdateMissionリクエスト
type UpdateMissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionId     *MissionID       `protobuf:"bytes,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`             // データベースレコードキー。必須
	Mission       *Mission         `protobuf:"bytes,2,opt,name=mission,proto3" json:"mission,omitempty"`                                  //
	Name          string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                        // 保存名
	ProjectId     *ProjectID       `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`             // 所有組織
	TransactionId *TransactionID   `protobuf:"bytes,5,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // トランザクションID
	UavId         *UAVID           `protobuf:"bytes,6,opt,name=uav_id,json=uavId,proto3" json:"uav_id,omitempty"`
	App           *ApplicationAttr `protobuf:"bytes,7,opt,name=app,proto3" json:"app,omitempty"` // Updateを要求したアプリケーション。subsetMission=trueの場合はbundleIDが一致していなければならない。
}

func (x *UpdateMissionRequest) Reset() {
	*x = UpdateMissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMissionRequest) ProtoMessage() {}

func (x *UpdateMissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMissionRequest.ProtoReflect.Descriptor instead.
func (*UpdateMissionRequest) Descriptor() ([]byte, []int) {
	return file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateMissionRequest) GetMissionId() *MissionID {
	if x != nil {
		return x.MissionId
	}
	return nil
}

func (x *UpdateMissionRequest) GetMission() *Mission {
	if x != nil {
		return x.Mission
	}
	return nil
}

func (x *UpdateMissionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateMissionRequest) GetProjectId() *ProjectID {
	if x != nil {
		return x.ProjectId
	}
	return nil
}

func (x *UpdateMissionRequest) GetTransactionId() *TransactionID {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *UpdateMissionRequest) GetUavId() *UAVID {
	if x != nil {
		return x.UavId
	}
	return nil
}

func (x *UpdateMissionRequest) GetApp() *ApplicationAttr {
	if x != nil {
		return x.App
	}
	return nil
}

type CreateMissionRequest_WithUAV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UavId       *UAVID `protobuf:"bytes,1,opt,name=uav_id,json=uavId,proto3" json:"uav_id,omitempty"`
	TieStraight bool   `protobuf:"varint,13,opt,name=tie_straight,json=tieStraight,proto3" json:"tie_straight,omitempty"` // trueでWP優先（入力WPを真っ直ぐ結ぶ）。onlyAssignでは無効。
}

func (x *CreateMissionRequest_WithUAV) Reset() {
	*x = CreateMissionRequest_WithUAV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMissionRequest_WithUAV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMissionRequest_WithUAV) ProtoMessage() {}

func (x *CreateMissionRequest_WithUAV) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMissionRequest_WithUAV.ProtoReflect.Descriptor instead.
func (*CreateMissionRequest_WithUAV) Descriptor() ([]byte, []int) {
	return file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CreateMissionRequest_WithUAV) GetUavId() *UAVID {
	if x != nil {
		return x.UavId
	}
	return nil
}

func (x *CreateMissionRequest_WithUAV) GetTieStraight() bool {
	if x != nil {
		return x.TieStraight
	}
	return false
}

type CreateMissionRequest_OnlyAssgin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UavId *UAVID `protobuf:"bytes,1,opt,name=uav_id,json=uavId,proto3" json:"uav_id,omitempty"`
}

func (x *CreateMissionRequest_OnlyAssgin) Reset() {
	*x = CreateMissionRequest_OnlyAssgin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMissionRequest_OnlyAssgin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMissionRequest_OnlyAssgin) ProtoMessage() {}

func (x *CreateMissionRequest_OnlyAssgin) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMissionRequest_OnlyAssgin.ProtoReflect.Descriptor instead.
func (*CreateMissionRequest_OnlyAssgin) Descriptor() ([]byte, []int) {
	return file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CreateMissionRequest_OnlyAssgin) GetUavId() *UAVID {
	if x != nil {
		return x.UavId
	}
	return nil
}

var File_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto protoreflect.FileDescriptor

var file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDesc = []byte{
	0x0a, 0x43, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x74, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3c, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x74, 0x72,
	0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbc, 0x0a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74,
	0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x61, 0x67, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x57, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74,
	0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x7f,
	0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x74,
	0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x55, 0x41, 0x56, 0x48, 0x00, 0x52, 0x12, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x75, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x75,
	0x61, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x55, 0x41, 0x56, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x55, 0x61, 0x76, 0x12, 0x79, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74,
	0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x55, 0x41, 0x56, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x12, 0x71, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67,
	0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x6e, 0x6c, 0x79,
	0x41, 0x73, 0x73, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x12, 0x60, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74,
	0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x07,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x79,
	0x0a, 0x07, 0x57, 0x69, 0x74, 0x68, 0x55, 0x41, 0x56, 0x12, 0x4b, 0x0a, 0x06, 0x75, 0x61, 0x76,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x41, 0x56, 0x49, 0x44, 0x52,
	0x05, 0x75, 0x61, 0x76, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x69,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x59, 0x0a, 0x0a, 0x4f, 0x6e, 0x6c,
	0x79, 0x41, 0x73, 0x73, 0x67, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x06, 0x75, 0x61, 0x76, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x41, 0x56, 0x49, 0x44, 0x52, 0x05, 0x75,
	0x61, 0x76, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xf7,
	0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x73, 0x22, 0xd6, 0x03, 0x0a, 0x11, 0x41, 0x64, 0x64,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50,
	0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x75, 0x61, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x41, 0x56, 0x49, 0x44, 0x52, 0x05, 0x75, 0x61, 0x76, 0x49, 0x64, 0x12,
	0x50, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74,
	0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x03, 0x61, 0x70,
	0x70, 0x22, 0xb2, 0x04, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0a, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x63, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x75, 0x61, 0x76, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x41, 0x56, 0x49, 0x44, 0x52, 0x05, 0x75,
	0x61, 0x76, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74,
	0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x03, 0x61, 0x70, 0x70, 0x32, 0xb5, 0x05, 0x0a, 0x0e, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x2e, 0x74, 0x72,
	0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x44, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72,
	0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x74, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x1a, 0x36,
	0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x74, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x8e, 0x01,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42, 0x39,
	0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x6a, 0x70, 0x2f, 0x74, 0x72, 0x6a, 0x78, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDescOnce sync.Once
	file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDescData = file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDesc
)

func file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDescGZIP() []byte {
	file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDescOnce.Do(func() {
		file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDescData)
	})
	return file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDescData
}

var file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_goTypes = []any{
	(*CreateMissionRequest)(nil),            // 0: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest
	(*CreateMissionResponse)(nil),           // 1: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionResponse
	(*AddMissionRequest)(nil),               // 2: trajectory.trajectory_gcs_service.protocol.v1.AddMissionRequest
	(*UpdateMissionRequest)(nil),            // 3: trajectory.trajectory_gcs_service.protocol.v1.UpdateMissionRequest
	(*CreateMissionRequest_WithUAV)(nil),    // 4: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.WithUAV
	(*CreateMissionRequest_OnlyAssgin)(nil), // 5: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.OnlyAssgin
	(*OragnizationID)(nil),                  // 6: trajectory.trajectory_gcs_service.protocol.v1.OragnizationID
	(*ProjectID)(nil),                       // 7: trajectory.trajectory_gcs_service.protocol.v1.ProjectID
	(*TransactionID)(nil),                   // 8: trajectory.trajectory_gcs_service.protocol.v1.TransactionID
	(*ScheduledTime)(nil),                   // 9: trajectory.trajectory_gcs_service.protocol.v1.ScheduledTime
	(*Mission)(nil),                         // 10: trajectory.trajectory_gcs_service.protocol.v1.Mission
	(*MissionControllerResult)(nil),         // 11: trajectory.trajectory_gcs_service.protocol.v1.MissionControllerResult
	(*UAVID)(nil),                           // 12: trajectory.trajectory_gcs_service.protocol.v1.UAVID
	(*ApplicationAttr)(nil),                 // 13: trajectory.trajectory_gcs_service.protocol.v1.ApplicationAttr
	(*MissionID)(nil),                       // 14: trajectory.trajectory_gcs_service.protocol.v1.MissionID
	(*emptypb.Empty)(nil),                   // 15: google.protobuf.Empty
}
var file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_depIdxs = []int32{
	6,  // 0: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.organization_id:type_name -> trajectory.trajectory_gcs_service.protocol.v1.OragnizationID
	7,  // 1: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.project_id:type_name -> trajectory.trajectory_gcs_service.protocol.v1.ProjectID
	8,  // 2: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.transaction_id:type_name -> trajectory.trajectory_gcs_service.protocol.v1.TransactionID
	4,  // 3: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.create_with_property:type_name -> trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.WithUAV
	4,  // 4: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.create_with_uav:type_name -> trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.WithUAV
	4,  // 5: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.create_and_assign:type_name -> trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.WithUAV
	5,  // 6: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.only_assign:type_name -> trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.OnlyAssgin
	9,  // 7: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.start_time:type_name -> trajectory.trajectory_gcs_service.protocol.v1.ScheduledTime
	9,  // 8: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.arrival_time:type_name -> trajectory.trajectory_gcs_service.protocol.v1.ScheduledTime
	10, // 9: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.mission:type_name -> trajectory.trajectory_gcs_service.protocol.v1.Mission
	11, // 10: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionResponse.result:type_name -> trajectory.trajectory_gcs_service.protocol.v1.MissionControllerResult
	10, // 11: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionResponse.mission:type_name -> trajectory.trajectory_gcs_service.protocol.v1.Mission
	10, // 12: trajectory.trajectory_gcs_service.protocol.v1.AddMissionRequest.mission:type_name -> trajectory.trajectory_gcs_service.protocol.v1.Mission
	7,  // 13: trajectory.trajectory_gcs_service.protocol.v1.AddMissionRequest.project_id:type_name -> trajectory.trajectory_gcs_service.protocol.v1.ProjectID
	8,  // 14: trajectory.trajectory_gcs_service.protocol.v1.AddMissionRequest.transaction_id:type_name -> trajectory.trajectory_gcs_service.protocol.v1.TransactionID
	12, // 15: trajectory.trajectory_gcs_service.protocol.v1.AddMissionRequest.uav_id:type_name -> trajectory.trajectory_gcs_service.protocol.v1.UAVID
	13, // 16: trajectory.trajectory_gcs_service.protocol.v1.AddMissionRequest.app:type_name -> trajectory.trajectory_gcs_service.protocol.v1.ApplicationAttr
	14, // 17: trajectory.trajectory_gcs_service.protocol.v1.UpdateMissionRequest.mission_id:type_name -> trajectory.trajectory_gcs_service.protocol.v1.MissionID
	10, // 18: trajectory.trajectory_gcs_service.protocol.v1.UpdateMissionRequest.mission:type_name -> trajectory.trajectory_gcs_service.protocol.v1.Mission
	7,  // 19: trajectory.trajectory_gcs_service.protocol.v1.UpdateMissionRequest.project_id:type_name -> trajectory.trajectory_gcs_service.protocol.v1.ProjectID
	8,  // 20: trajectory.trajectory_gcs_service.protocol.v1.UpdateMissionRequest.transaction_id:type_name -> trajectory.trajectory_gcs_service.protocol.v1.TransactionID
	12, // 21: trajectory.trajectory_gcs_service.protocol.v1.UpdateMissionRequest.uav_id:type_name -> trajectory.trajectory_gcs_service.protocol.v1.UAVID
	13, // 22: trajectory.trajectory_gcs_service.protocol.v1.UpdateMissionRequest.app:type_name -> trajectory.trajectory_gcs_service.protocol.v1.ApplicationAttr
	12, // 23: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.WithUAV.uav_id:type_name -> trajectory.trajectory_gcs_service.protocol.v1.UAVID
	12, // 24: trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest.OnlyAssgin.uav_id:type_name -> trajectory.trajectory_gcs_service.protocol.v1.UAVID
	0,  // 25: trajectory.trajectory_gcs_service.protocol.v1.MissionService.CreateMission:input_type -> trajectory.trajectory_gcs_service.protocol.v1.CreateMissionRequest
	2,  // 26: trajectory.trajectory_gcs_service.protocol.v1.MissionService.AddMission:input_type -> trajectory.trajectory_gcs_service.protocol.v1.AddMissionRequest
	14, // 27: trajectory.trajectory_gcs_service.protocol.v1.MissionService.GetMission:input_type -> trajectory.trajectory_gcs_service.protocol.v1.MissionID
	14, // 28: trajectory.trajectory_gcs_service.protocol.v1.MissionService.DeleteMission:input_type -> trajectory.trajectory_gcs_service.protocol.v1.MissionID
	3,  // 29: trajectory.trajectory_gcs_service.protocol.v1.MissionService.UpdateMission:input_type -> trajectory.trajectory_gcs_service.protocol.v1.UpdateMissionRequest
	1,  // 30: trajectory.trajectory_gcs_service.protocol.v1.MissionService.CreateMission:output_type -> trajectory.trajectory_gcs_service.protocol.v1.CreateMissionResponse
	14, // 31: trajectory.trajectory_gcs_service.protocol.v1.MissionService.AddMission:output_type -> trajectory.trajectory_gcs_service.protocol.v1.MissionID
	10, // 32: trajectory.trajectory_gcs_service.protocol.v1.MissionService.GetMission:output_type -> trajectory.trajectory_gcs_service.protocol.v1.Mission
	15, // 33: trajectory.trajectory_gcs_service.protocol.v1.MissionService.DeleteMission:output_type -> google.protobuf.Empty
	10, // 34: trajectory.trajectory_gcs_service.protocol.v1.MissionService.UpdateMission:output_type -> trajectory.trajectory_gcs_service.protocol.v1.Mission
	30, // [30:35] is the sub-list for method output_type
	25, // [25:30] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_init() }
func file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_init() {
	if File_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto != nil {
		return
	}
	file_trajectory_trajectory_gcs_service_protocol_v1_resource_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateMissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateMissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AddMissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateMissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CreateMissionRequest_WithUAV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CreateMissionRequest_OnlyAssgin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes[0].OneofWrappers = []any{
		(*CreateMissionRequest_CreateWithProperty)(nil),
		(*CreateMissionRequest_CreateWithUav)(nil),
		(*CreateMissionRequest_CreateAndAssign)(nil),
		(*CreateMissionRequest_OnlyAssign)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_goTypes,
		DependencyIndexes: file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_depIdxs,
		MessageInfos:      file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_msgTypes,
	}.Build()
	File_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto = out.File
	file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_rawDesc = nil
	file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_goTypes = nil
	file_trajectory_trajectory_gcs_service_protocol_v1_mission_service_proto_depIdxs = nil
}
