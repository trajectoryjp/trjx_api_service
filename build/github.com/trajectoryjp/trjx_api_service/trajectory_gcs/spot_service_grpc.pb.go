// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: trajectory/trajectory_gcs_service/protocol/v1/spot_service.proto

package trajectory_gcs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SpotService_CreateSpot_FullMethodName = "/trajectory.trajectory_gcs_service.protocol.v1.SpotService/CreateSpot"
	SpotService_GetSpot_FullMethodName    = "/trajectory.trajectory_gcs_service.protocol.v1.SpotService/GetSpot"
	SpotService_ListSpots_FullMethodName  = "/trajectory.trajectory_gcs_service.protocol.v1.SpotService/ListSpots"
	SpotService_DeleteSpot_FullMethodName = "/trajectory.trajectory_gcs_service.protocol.v1.SpotService/DeleteSpot"
	SpotService_UpdateSpot_FullMethodName = "/trajectory.trajectory_gcs_service.protocol.v1.SpotService/UpdateSpot"
)

// SpotServiceClient is the client API for SpotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ポート配下のスポットを操作を行うAPI
type SpotServiceClient interface {
	// スポットの登録
	CreateSpot(ctx context.Context, in *CreateSpotRequest, opts ...grpc.CallOption) (*Spot, error)
	// スポットの取得
	GetSpot(ctx context.Context, in *GetSpotRequest, opts ...grpc.CallOption) (*Spot, error)
	// スポットのリスト取得
	ListSpots(ctx context.Context, in *ListSpotsRequest, opts ...grpc.CallOption) (SpotService_ListSpotsClient, error)
	// スポットの削除
	DeleteSpot(ctx context.Context, in *DeleteSpotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// スポットの更新
	UpdateSpot(ctx context.Context, in *UpdateSpotRequest, opts ...grpc.CallOption) (*Spot, error)
}

type spotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpotServiceClient(cc grpc.ClientConnInterface) SpotServiceClient {
	return &spotServiceClient{cc}
}

func (c *spotServiceClient) CreateSpot(ctx context.Context, in *CreateSpotRequest, opts ...grpc.CallOption) (*Spot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Spot)
	err := c.cc.Invoke(ctx, SpotService_CreateSpot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotServiceClient) GetSpot(ctx context.Context, in *GetSpotRequest, opts ...grpc.CallOption) (*Spot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Spot)
	err := c.cc.Invoke(ctx, SpotService_GetSpot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotServiceClient) ListSpots(ctx context.Context, in *ListSpotsRequest, opts ...grpc.CallOption) (SpotService_ListSpotsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SpotService_ServiceDesc.Streams[0], SpotService_ListSpots_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &spotServiceListSpotsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpotService_ListSpotsClient interface {
	Recv() (*ListSpotsResponse, error)
	grpc.ClientStream
}

type spotServiceListSpotsClient struct {
	grpc.ClientStream
}

func (x *spotServiceListSpotsClient) Recv() (*ListSpotsResponse, error) {
	m := new(ListSpotsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spotServiceClient) DeleteSpot(ctx context.Context, in *DeleteSpotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SpotService_DeleteSpot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotServiceClient) UpdateSpot(ctx context.Context, in *UpdateSpotRequest, opts ...grpc.CallOption) (*Spot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Spot)
	err := c.cc.Invoke(ctx, SpotService_UpdateSpot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpotServiceServer is the server API for SpotService service.
// All implementations must embed UnimplementedSpotServiceServer
// for forward compatibility
//
// ポート配下のスポットを操作を行うAPI
type SpotServiceServer interface {
	// スポットの登録
	CreateSpot(context.Context, *CreateSpotRequest) (*Spot, error)
	// スポットの取得
	GetSpot(context.Context, *GetSpotRequest) (*Spot, error)
	// スポットのリスト取得
	ListSpots(*ListSpotsRequest, SpotService_ListSpotsServer) error
	// スポットの削除
	DeleteSpot(context.Context, *DeleteSpotRequest) (*emptypb.Empty, error)
	// スポットの更新
	UpdateSpot(context.Context, *UpdateSpotRequest) (*Spot, error)
	mustEmbedUnimplementedSpotServiceServer()
}

// UnimplementedSpotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpotServiceServer struct {
}

func (UnimplementedSpotServiceServer) CreateSpot(context.Context, *CreateSpotRequest) (*Spot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpot not implemented")
}
func (UnimplementedSpotServiceServer) GetSpot(context.Context, *GetSpotRequest) (*Spot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpot not implemented")
}
func (UnimplementedSpotServiceServer) ListSpots(*ListSpotsRequest, SpotService_ListSpotsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSpots not implemented")
}
func (UnimplementedSpotServiceServer) DeleteSpot(context.Context, *DeleteSpotRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpot not implemented")
}
func (UnimplementedSpotServiceServer) UpdateSpot(context.Context, *UpdateSpotRequest) (*Spot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpot not implemented")
}
func (UnimplementedSpotServiceServer) mustEmbedUnimplementedSpotServiceServer() {}

// UnsafeSpotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpotServiceServer will
// result in compilation errors.
type UnsafeSpotServiceServer interface {
	mustEmbedUnimplementedSpotServiceServer()
}

func RegisterSpotServiceServer(s grpc.ServiceRegistrar, srv SpotServiceServer) {
	s.RegisterService(&SpotService_ServiceDesc, srv)
}

func _SpotService_CreateSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).CreateSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpotService_CreateSpot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).CreateSpot(ctx, req.(*CreateSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotService_GetSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).GetSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpotService_GetSpot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).GetSpot(ctx, req.(*GetSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotService_ListSpots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSpotsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpotServiceServer).ListSpots(m, &spotServiceListSpotsServer{ServerStream: stream})
}

type SpotService_ListSpotsServer interface {
	Send(*ListSpotsResponse) error
	grpc.ServerStream
}

type spotServiceListSpotsServer struct {
	grpc.ServerStream
}

func (x *spotServiceListSpotsServer) Send(m *ListSpotsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SpotService_DeleteSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).DeleteSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpotService_DeleteSpot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).DeleteSpot(ctx, req.(*DeleteSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotService_UpdateSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).UpdateSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpotService_UpdateSpot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).UpdateSpot(ctx, req.(*UpdateSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpotService_ServiceDesc is the grpc.ServiceDesc for SpotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trajectory.trajectory_gcs_service.protocol.v1.SpotService",
	HandlerType: (*SpotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpot",
			Handler:    _SpotService_CreateSpot_Handler,
		},
		{
			MethodName: "GetSpot",
			Handler:    _SpotService_GetSpot_Handler,
		},
		{
			MethodName: "DeleteSpot",
			Handler:    _SpotService_DeleteSpot_Handler,
		},
		{
			MethodName: "UpdateSpot",
			Handler:    _SpotService_UpdateSpot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSpots",
			Handler:       _SpotService_ListSpots_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "trajectory/trajectory_gcs_service/protocol/v1/spot_service.proto",
}
