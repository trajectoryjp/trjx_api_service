// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: trajectory/trajectory_gcs_service/protocol/v1/port_service.proto

package trajectory_gcs

import (
	_ "github.com/trajectoryjp/trjx_api_service"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 離着陸申請リクエスト
type ApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightPlanId string      `protobuf:"bytes,1,opt,name=flight_plan_id,json=flightPlanId,proto3" json:"flight_plan_id,omitempty"` // 飛行計画ID
	PortHeader   *PortHeader `protobuf:"bytes,2,opt,name=port_header,json=portHeader,proto3" json:"port_header,omitempty"`         // リクエストヘッダー
}

func (x *ApplyRequest) Reset() {
	*x = ApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRequest) ProtoMessage() {}

func (x *ApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRequest.ProtoReflect.Descriptor instead.
func (*ApplyRequest) Descriptor() ([]byte, []int) {
	return file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescGZIP(), []int{0}
}

func (x *ApplyRequest) GetFlightPlanId() string {
	if x != nil {
		return x.FlightPlanId
	}
	return ""
}

func (x *ApplyRequest) GetPortHeader() *PortHeader {
	if x != nil {
		return x.PortHeader
	}
	return nil
}

// 離着陸申請レスポンス
type ApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplyId      int64         `protobuf:"varint,2,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`               // 離着陸申請ID
	PortLocation *PortLocation `protobuf:"bytes,3,opt,name=port_location,json=portLocation,proto3" json:"port_location,omitempty"` // ポートロケーション情報(最近接点のWPが返る、時刻指定は離着陸許可を申請する時刻(範囲)を指定)
}

func (x *ApplyResponse) Reset() {
	*x = ApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyResponse) ProtoMessage() {}

func (x *ApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyResponse.ProtoReflect.Descriptor instead.
func (*ApplyResponse) Descriptor() ([]byte, []int) {
	return file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescGZIP(), []int{1}
}

func (x *ApplyResponse) GetApplyId() int64 {
	if x != nil {
		return x.ApplyId
	}
	return 0
}

func (x *ApplyResponse) GetPortLocation() *PortLocation {
	if x != nil {
		return x.PortLocation
	}
	return nil
}

// 離着陸完了通知リクエスト
type NotifyCompletedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplyId int64 `protobuf:"varint,2,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"` // 離着陸申請ID
}

func (x *NotifyCompletedRequest) Reset() {
	*x = NotifyCompletedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyCompletedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyCompletedRequest) ProtoMessage() {}

func (x *NotifyCompletedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyCompletedRequest.ProtoReflect.Descriptor instead.
func (*NotifyCompletedRequest) Descriptor() ([]byte, []int) {
	return file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescGZIP(), []int{2}
}

func (x *NotifyCompletedRequest) GetApplyId() int64 {
	if x != nil {
		return x.ApplyId
	}
	return 0
}

// ポート登録リクエスト
type CreatePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 登録ポート
	Port *Port `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *CreatePortRequest) Reset() {
	*x = CreatePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortRequest) ProtoMessage() {}

func (x *CreatePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortRequest.ProtoReflect.Descriptor instead.
func (*CreatePortRequest) Descriptor() ([]byte, []int) {
	return file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePortRequest) GetPort() *Port {
	if x != nil {
		return x.Port
	}
	return nil
}

// ポート取得リクエスト
type GetPortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ポートID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// クエリフィールド(指定されたカラムのみ取得)
	Fields *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GetPortRequest) Reset() {
	*x = GetPortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortRequest) ProtoMessage() {}

func (x *GetPortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortRequest.ProtoReflect.Descriptor instead.
func (*GetPortRequest) Descriptor() ([]byte, []int) {
	return file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetPortRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetPortRequest) GetFields() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

// TODO: UI再審議
// ポート一覧取得・フィルタリング検索リクエスト
type ListPortsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 検索ボックス 検索範囲の制限を設ける
	SearchSpace *SearchSpace `protobuf:"bytes,1,opt,name=search_space,json=searchSpace,proto3" json:"search_space,omitempty"`
	// 組織ID(所有組織)　true:自組織のみ false: 他組織を含める
	OwnOrganization bool `protobuf:"varint,2,opt,name=own_organization,json=ownOrganization,proto3" json:"own_organization,omitempty"`
	// グループID
	GroupId *int64 `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`
	// TODO: UI再審議
	// ポートの種別 true:private false:public
	IsPrivate *bool `protobuf:"varint,4,opt,name=is_private,json=isPrivate,proto3,oneof" json:"is_private,omitempty"`
	// 緊急着陸ポート種別 true:緊急着陸ポート/ flase:通常ポート
	IsEmergency *bool `protobuf:"varint,5,opt,name=is_emergency,json=isEmergency,proto3,oneof" json:"is_emergency,omitempty"`
	// 名称
	Name *string `protobuf:"bytes,6,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// タグ
	Tag *string `protobuf:"bytes,7,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	// ポート提供者
	Provider *string `protobuf:"bytes,8,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
	// クエリフィールド(指定されたカラムのみ取得)
	Fields *fieldmaskpb.FieldMask `protobuf:"bytes,9,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ListPortsRequest) Reset() {
	*x = ListPortsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPortsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPortsRequest) ProtoMessage() {}

func (x *ListPortsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPortsRequest.ProtoReflect.Descriptor instead.
func (*ListPortsRequest) Descriptor() ([]byte, []int) {
	return file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListPortsRequest) GetSearchSpace() *SearchSpace {
	if x != nil {
		return x.SearchSpace
	}
	return nil
}

func (x *ListPortsRequest) GetOwnOrganization() bool {
	if x != nil {
		return x.OwnOrganization
	}
	return false
}

func (x *ListPortsRequest) GetGroupId() int64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *ListPortsRequest) GetIsPrivate() bool {
	if x != nil && x.IsPrivate != nil {
		return *x.IsPrivate
	}
	return false
}

func (x *ListPortsRequest) GetIsEmergency() bool {
	if x != nil && x.IsEmergency != nil {
		return *x.IsEmergency
	}
	return false
}

func (x *ListPortsRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ListPortsRequest) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *ListPortsRequest) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *ListPortsRequest) GetFields() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

// ポート一覧取得・フィルタリング検索レスポンス
type ListPortsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ポート
	Ports []*Port `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *ListPortsResponse) Reset() {
	*x = ListPortsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPortsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPortsResponse) ProtoMessage() {}

func (x *ListPortsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPortsResponse.ProtoReflect.Descriptor instead.
func (*ListPortsResponse) Descriptor() ([]byte, []int) {
	return file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListPortsResponse) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

// ポート更新リクエスト
type UpdatePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 更新マスク(指定されたフィールドのみ更新)
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// ポート(更新マスクで指定したもののみ更新)
	Port *Port `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *UpdatePortRequest) Reset() {
	*x = UpdatePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePortRequest) ProtoMessage() {}

func (x *UpdatePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePortRequest.ProtoReflect.Descriptor instead.
func (*UpdatePortRequest) Descriptor() ([]byte, []int) {
	return file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePortRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdatePortRequest) GetPort() *Port {
	if x != nil {
		return x.Port
	}
	return nil
}

// ポート削除リクエスト
type DeletePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      // ポートID
	IsLogical *bool `protobuf:"varint,2,opt,name=is_logical,json=isLogical,proto3,oneof" json:"is_logical,omitempty"` // 論理削除フラグ(true:論理削除 /  false:物理削除)
}

func (x *DeletePortRequest) Reset() {
	*x = DeletePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePortRequest) ProtoMessage() {}

func (x *DeletePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePortRequest.ProtoReflect.Descriptor instead.
func (*DeletePortRequest) Descriptor() ([]byte, []int) {
	return file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeletePortRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeletePortRequest) GetIsLogical() bool {
	if x != nil && x.IsLogical != nil {
		return *x.IsLogical
	}
	return false
}

var File_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto protoreflect.FileDescriptor

var file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDesc = []byte{
	0x0a, 0x40, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x74, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x2d, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74,
	0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3c, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x74, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90,
	0x01, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x74, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x60,
	0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x33, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x54, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xd8, 0x03, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d,
	0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x6f, 0x77, 0x6e, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09,
	0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x02, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x22, 0x5e, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x47, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x56, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x32, 0x85, 0x07, 0x0a, 0x0b, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x45, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x77, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x45, 0x2e, 0x74, 0x72,
	0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x83, 0x01, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x2e, 0x74, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x72,
	0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x7d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3d, 0x2e, 0x74, 0x72,
	0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x90, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3f, 0x2e,
	0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40,
	0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x66, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x40, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72,
	0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x83, 0x01, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x2e, 0x74, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x72,
	0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x6a, 0x70, 0x2f, 0x74, 0x72, 0x6a, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescOnce sync.Once
	file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescData = file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDesc
)

func file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescGZIP() []byte {
	file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescOnce.Do(func() {
		file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescData)
	})
	return file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDescData
}

var file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_goTypes = []any{
	(*ApplyRequest)(nil),           // 0: trajectory.trajectory_gcs_service.protocol.v1.ApplyRequest
	(*ApplyResponse)(nil),          // 1: trajectory.trajectory_gcs_service.protocol.v1.ApplyResponse
	(*NotifyCompletedRequest)(nil), // 2: trajectory.trajectory_gcs_service.protocol.v1.NotifyCompletedRequest
	(*CreatePortRequest)(nil),      // 3: trajectory.trajectory_gcs_service.protocol.v1.CreatePortRequest
	(*GetPortRequest)(nil),         // 4: trajectory.trajectory_gcs_service.protocol.v1.GetPortRequest
	(*ListPortsRequest)(nil),       // 5: trajectory.trajectory_gcs_service.protocol.v1.ListPortsRequest
	(*ListPortsResponse)(nil),      // 6: trajectory.trajectory_gcs_service.protocol.v1.ListPortsResponse
	(*UpdatePortRequest)(nil),      // 7: trajectory.trajectory_gcs_service.protocol.v1.UpdatePortRequest
	(*DeletePortRequest)(nil),      // 8: trajectory.trajectory_gcs_service.protocol.v1.DeletePortRequest
	(*PortHeader)(nil),             // 9: trajectory.trajectory_gcs_service.protocol.v1.PortHeader
	(*PortLocation)(nil),           // 10: trajectory.trajectory_gcs_service.protocol.v1.PortLocation
	(*Port)(nil),                   // 11: trajectory.trajectory_gcs_service.protocol.v1.Port
	(*fieldmaskpb.FieldMask)(nil),  // 12: google.protobuf.FieldMask
	(*SearchSpace)(nil),            // 13: trajectory.trajectory_gcs_service.protocol.v1.SearchSpace
	(*emptypb.Empty)(nil),          // 14: google.protobuf.Empty
}
var file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_depIdxs = []int32{
	9,  // 0: trajectory.trajectory_gcs_service.protocol.v1.ApplyRequest.port_header:type_name -> trajectory.trajectory_gcs_service.protocol.v1.PortHeader
	10, // 1: trajectory.trajectory_gcs_service.protocol.v1.ApplyResponse.port_location:type_name -> trajectory.trajectory_gcs_service.protocol.v1.PortLocation
	11, // 2: trajectory.trajectory_gcs_service.protocol.v1.CreatePortRequest.port:type_name -> trajectory.trajectory_gcs_service.protocol.v1.Port
	12, // 3: trajectory.trajectory_gcs_service.protocol.v1.GetPortRequest.fields:type_name -> google.protobuf.FieldMask
	13, // 4: trajectory.trajectory_gcs_service.protocol.v1.ListPortsRequest.search_space:type_name -> trajectory.trajectory_gcs_service.protocol.v1.SearchSpace
	12, // 5: trajectory.trajectory_gcs_service.protocol.v1.ListPortsRequest.fields:type_name -> google.protobuf.FieldMask
	11, // 6: trajectory.trajectory_gcs_service.protocol.v1.ListPortsResponse.ports:type_name -> trajectory.trajectory_gcs_service.protocol.v1.Port
	12, // 7: trajectory.trajectory_gcs_service.protocol.v1.UpdatePortRequest.update_mask:type_name -> google.protobuf.FieldMask
	11, // 8: trajectory.trajectory_gcs_service.protocol.v1.UpdatePortRequest.port:type_name -> trajectory.trajectory_gcs_service.protocol.v1.Port
	2,  // 9: trajectory.trajectory_gcs_service.protocol.v1.PortService.NotifyTakeoffCompleted:input_type -> trajectory.trajectory_gcs_service.protocol.v1.NotifyCompletedRequest
	2,  // 10: trajectory.trajectory_gcs_service.protocol.v1.PortService.NotifyLandingCompleted:input_type -> trajectory.trajectory_gcs_service.protocol.v1.NotifyCompletedRequest
	3,  // 11: trajectory.trajectory_gcs_service.protocol.v1.PortService.CreatePort:input_type -> trajectory.trajectory_gcs_service.protocol.v1.CreatePortRequest
	4,  // 12: trajectory.trajectory_gcs_service.protocol.v1.PortService.GetPort:input_type -> trajectory.trajectory_gcs_service.protocol.v1.GetPortRequest
	5,  // 13: trajectory.trajectory_gcs_service.protocol.v1.PortService.ListPorts:input_type -> trajectory.trajectory_gcs_service.protocol.v1.ListPortsRequest
	8,  // 14: trajectory.trajectory_gcs_service.protocol.v1.PortService.DeletePort:input_type -> trajectory.trajectory_gcs_service.protocol.v1.DeletePortRequest
	7,  // 15: trajectory.trajectory_gcs_service.protocol.v1.PortService.UpdatePort:input_type -> trajectory.trajectory_gcs_service.protocol.v1.UpdatePortRequest
	14, // 16: trajectory.trajectory_gcs_service.protocol.v1.PortService.NotifyTakeoffCompleted:output_type -> google.protobuf.Empty
	14, // 17: trajectory.trajectory_gcs_service.protocol.v1.PortService.NotifyLandingCompleted:output_type -> google.protobuf.Empty
	11, // 18: trajectory.trajectory_gcs_service.protocol.v1.PortService.CreatePort:output_type -> trajectory.trajectory_gcs_service.protocol.v1.Port
	11, // 19: trajectory.trajectory_gcs_service.protocol.v1.PortService.GetPort:output_type -> trajectory.trajectory_gcs_service.protocol.v1.Port
	6,  // 20: trajectory.trajectory_gcs_service.protocol.v1.PortService.ListPorts:output_type -> trajectory.trajectory_gcs_service.protocol.v1.ListPortsResponse
	14, // 21: trajectory.trajectory_gcs_service.protocol.v1.PortService.DeletePort:output_type -> google.protobuf.Empty
	11, // 22: trajectory.trajectory_gcs_service.protocol.v1.PortService.UpdatePort:output_type -> trajectory.trajectory_gcs_service.protocol.v1.Port
	16, // [16:23] is the sub-list for method output_type
	9,  // [9:16] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_init() }
func file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_init() {
	if File_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto != nil {
		return
	}
	file_trajectory_trajectory_gcs_service_protocol_v1_resource_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyCompletedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetPortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListPortsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListPortsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[5].OneofWrappers = []any{}
	file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_goTypes,
		DependencyIndexes: file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_depIdxs,
		MessageInfos:      file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_msgTypes,
	}.Build()
	File_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto = out.File
	file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_rawDesc = nil
	file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_goTypes = nil
	file_trajectory_trajectory_gcs_service_protocol_v1_port_service_proto_depIdxs = nil
}
