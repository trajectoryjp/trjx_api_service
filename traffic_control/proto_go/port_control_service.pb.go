//
// <アクセス方法>
// このサービスを使用するために、以下をmetadata（ヘッダー）に指定してください。
// “x-grpc-service”: “PortControlService”
// “username”: システムユーザID
// “token”: アクセストークン

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: github.com/trajectoryjp/trjx_api_service/traffic_control/protocol/v1/port_control_service.proto

package traffic_control

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 機体状態
type UavStatus int32

const (
	UavStatus_UAV_STATUS_UNSPECIFIED UavStatus = 0
	// 離陸
	UavStatus_WAITING_FOR_APPLY_TAKEOFF UavStatus = 11
	UavStatus_APPLYING_TAKEOFF          UavStatus = 12
	UavStatus_WAITING_FOR_TAKEOFF       UavStatus = 13
	UavStatus_TAKEOFF                   UavStatus = 14
	// 着陸
	UavStatus_WAITING_FOR_APPLY_LANDING UavStatus = 21
	UavStatus_APPLYING_LANDING          UavStatus = 22
	UavStatus_WAITING_FOR_LANDING       UavStatus = 23
	UavStatus_LANDING                   UavStatus = 24
)

// Enum value maps for UavStatus.
var (
	UavStatus_name = map[int32]string{
		0:  "UAV_STATUS_UNSPECIFIED",
		11: "WAITING_FOR_APPLY_TAKEOFF",
		12: "APPLYING_TAKEOFF",
		13: "WAITING_FOR_TAKEOFF",
		14: "TAKEOFF",
		21: "WAITING_FOR_APPLY_LANDING",
		22: "APPLYING_LANDING",
		23: "WAITING_FOR_LANDING",
		24: "LANDING",
	}
	UavStatus_value = map[string]int32{
		"UAV_STATUS_UNSPECIFIED":    0,
		"WAITING_FOR_APPLY_TAKEOFF": 11,
		"APPLYING_TAKEOFF":          12,
		"WAITING_FOR_TAKEOFF":       13,
		"TAKEOFF":                   14,
		"WAITING_FOR_APPLY_LANDING": 21,
		"APPLYING_LANDING":          22,
		"WAITING_FOR_LANDING":       23,
		"LANDING":                   24,
	}
)

func (x UavStatus) Enum() *UavStatus {
	p := new(UavStatus)
	*p = x
	return p
}

func (x UavStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UavStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_enumTypes[0].Descriptor()
}

func (UavStatus) Type() protoreflect.EnumType {
	return &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_enumTypes[0]
}

func (x UavStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UavStatus.Descriptor instead.
func (UavStatus) EnumDescriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{0}
}

type ApproveType int32

const (
	ApproveType_APPROVE_TYPE_UNSPECIFIED ApproveType = 0
	ApproveType_APPROVE                  ApproveType = 1
	ApproveType_WAIT                     ApproveType = 2
	ApproveType_REJECT                   ApproveType = 3
)

// Enum value maps for ApproveType.
var (
	ApproveType_name = map[int32]string{
		0: "APPROVE_TYPE_UNSPECIFIED",
		1: "APPROVE",
		2: "WAIT",
		3: "REJECT",
	}
	ApproveType_value = map[string]int32{
		"APPROVE_TYPE_UNSPECIFIED": 0,
		"APPROVE":                  1,
		"WAIT":                     2,
		"REJECT":                   3,
	}
)

func (x ApproveType) Enum() *ApproveType {
	p := new(ApproveType)
	*p = x
	return p
}

func (x ApproveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApproveType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_enumTypes[1].Descriptor()
}

func (ApproveType) Type() protoreflect.EnumType {
	return &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_enumTypes[1]
}

func (x ApproveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApproveType.Descriptor instead.
func (ApproveType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{1}
}

type PortTakeOffQueueItem_TakeOffStatus int32

const (
	PortTakeOffQueueItem_TAKE_OFF_STATUS_UNSPECIFIED PortTakeOffQueueItem_TakeOffStatus = 0
	PortTakeOffQueueItem_WAITING                     PortTakeOffQueueItem_TakeOffStatus = 1
	PortTakeOffQueueItem_APPLYING                    PortTakeOffQueueItem_TakeOffStatus = 2
	PortTakeOffQueueItem_ON_TAKING_OFF               PortTakeOffQueueItem_TakeOffStatus = 3
)

// Enum value maps for PortTakeOffQueueItem_TakeOffStatus.
var (
	PortTakeOffQueueItem_TakeOffStatus_name = map[int32]string{
		0: "TAKE_OFF_STATUS_UNSPECIFIED",
		1: "WAITING",
		2: "APPLYING",
		3: "ON_TAKING_OFF",
	}
	PortTakeOffQueueItem_TakeOffStatus_value = map[string]int32{
		"TAKE_OFF_STATUS_UNSPECIFIED": 0,
		"WAITING":                     1,
		"APPLYING":                    2,
		"ON_TAKING_OFF":               3,
	}
)

func (x PortTakeOffQueueItem_TakeOffStatus) Enum() *PortTakeOffQueueItem_TakeOffStatus {
	p := new(PortTakeOffQueueItem_TakeOffStatus)
	*p = x
	return p
}

func (x PortTakeOffQueueItem_TakeOffStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortTakeOffQueueItem_TakeOffStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_enumTypes[2].Descriptor()
}

func (PortTakeOffQueueItem_TakeOffStatus) Type() protoreflect.EnumType {
	return &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_enumTypes[2]
}

func (x PortTakeOffQueueItem_TakeOffStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortTakeOffQueueItem_TakeOffStatus.Descriptor instead.
func (PortTakeOffQueueItem_TakeOffStatus) EnumDescriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{4, 0}
}

type PortLandingQueueItem_LandingStatus int32

const (
	PortLandingQueueItem_LANDING_STATUS_UNSPECIFIED PortLandingQueueItem_LandingStatus = 0
	PortLandingQueueItem_WAITING                    PortLandingQueueItem_LandingStatus = 1
	PortLandingQueueItem_APPLYING                   PortLandingQueueItem_LandingStatus = 2
	PortLandingQueueItem_ON_LANDING                 PortLandingQueueItem_LandingStatus = 3
)

// Enum value maps for PortLandingQueueItem_LandingStatus.
var (
	PortLandingQueueItem_LandingStatus_name = map[int32]string{
		0: "LANDING_STATUS_UNSPECIFIED",
		1: "WAITING",
		2: "APPLYING",
		3: "ON_LANDING",
	}
	PortLandingQueueItem_LandingStatus_value = map[string]int32{
		"LANDING_STATUS_UNSPECIFIED": 0,
		"WAITING":                    1,
		"APPLYING":                   2,
		"ON_LANDING":                 3,
	}
)

func (x PortLandingQueueItem_LandingStatus) Enum() *PortLandingQueueItem_LandingStatus {
	p := new(PortLandingQueueItem_LandingStatus)
	*p = x
	return p
}

func (x PortLandingQueueItem_LandingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortLandingQueueItem_LandingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_enumTypes[3].Descriptor()
}

func (PortLandingQueueItem_LandingStatus) Type() protoreflect.EnumType {
	return &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_enumTypes[3]
}

func (x PortLandingQueueItem_LandingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortLandingQueueItem_LandingStatus.Descriptor instead.
func (PortLandingQueueItem_LandingStatus) EnumDescriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{7, 0}
}

type GetUavStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UavId         string                 `protobuf:"bytes,1,opt,name=uav_id,json=uavId,proto3" json:"uav_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUavStatusRequest) Reset() {
	*x = GetUavStatusRequest{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUavStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUavStatusRequest) ProtoMessage() {}

func (x *GetUavStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUavStatusRequest.ProtoReflect.Descriptor instead.
func (*GetUavStatusRequest) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetUavStatusRequest) GetUavId() string {
	if x != nil {
		return x.UavId
	}
	return ""
}

type GetUavStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PortId        int64                  `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	Status        UavStatus              `protobuf:"varint,2,opt,name=status,proto3,enum=Trajectory.TrafficControl.Protocol.v1.UavStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUavStatusResponse) Reset() {
	*x = GetUavStatusResponse{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUavStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUavStatusResponse) ProtoMessage() {}

func (x *GetUavStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUavStatusResponse.ProtoReflect.Descriptor instead.
func (*GetUavStatusResponse) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetUavStatusResponse) GetPortId() int64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *GetUavStatusResponse) GetStatus() UavStatus {
	if x != nil {
		return x.Status
	}
	return UavStatus_UAV_STATUS_UNSPECIFIED
}

// 離陸キュー取得陸リクエスト
type GetPortTakeOffQueueRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PortId        int64                  `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPortTakeOffQueueRequest) Reset() {
	*x = GetPortTakeOffQueueRequest{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPortTakeOffQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortTakeOffQueueRequest) ProtoMessage() {}

func (x *GetPortTakeOffQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortTakeOffQueueRequest.ProtoReflect.Descriptor instead.
func (*GetPortTakeOffQueueRequest) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetPortTakeOffQueueRequest) GetPortId() int64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

// 離陸キュー
type PortTakeOffQueue struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Items         []*PortTakeOffQueueItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortTakeOffQueue) Reset() {
	*x = PortTakeOffQueue{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortTakeOffQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortTakeOffQueue) ProtoMessage() {}

func (x *PortTakeOffQueue) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortTakeOffQueue.ProtoReflect.Descriptor instead.
func (*PortTakeOffQueue) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{3}
}

func (x *PortTakeOffQueue) GetItems() []*PortTakeOffQueueItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// 離陸キューアイテム
type PortTakeOffQueueItem struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	PortId        int64                              `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	UavId         string                             `protobuf:"bytes,2,opt,name=uav_id,json=uavId,proto3" json:"uav_id,omitempty"`
	FlightPurpose string                             `protobuf:"bytes,3,opt,name=flight_purpose,json=flightPurpose,proto3" json:"flight_purpose,omitempty"`
	StartAt       *timestamppb.Timestamp             `protobuf:"bytes,6,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	Status        PortTakeOffQueueItem_TakeOffStatus `protobuf:"varint,7,opt,name=status,proto3,enum=Trajectory.TrafficControl.Protocol.v1.PortTakeOffQueueItem_TakeOffStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortTakeOffQueueItem) Reset() {
	*x = PortTakeOffQueueItem{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortTakeOffQueueItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortTakeOffQueueItem) ProtoMessage() {}

func (x *PortTakeOffQueueItem) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortTakeOffQueueItem.ProtoReflect.Descriptor instead.
func (*PortTakeOffQueueItem) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{4}
}

func (x *PortTakeOffQueueItem) GetPortId() int64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *PortTakeOffQueueItem) GetUavId() string {
	if x != nil {
		return x.UavId
	}
	return ""
}

func (x *PortTakeOffQueueItem) GetFlightPurpose() string {
	if x != nil {
		return x.FlightPurpose
	}
	return ""
}

func (x *PortTakeOffQueueItem) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *PortTakeOffQueueItem) GetStatus() PortTakeOffQueueItem_TakeOffStatus {
	if x != nil {
		return x.Status
	}
	return PortTakeOffQueueItem_TAKE_OFF_STATUS_UNSPECIFIED
}

// 着陸キュー取得陸リクエスト
type GetPortLandingQueueRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PortId        int64                  `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPortLandingQueueRequest) Reset() {
	*x = GetPortLandingQueueRequest{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPortLandingQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortLandingQueueRequest) ProtoMessage() {}

func (x *GetPortLandingQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortLandingQueueRequest.ProtoReflect.Descriptor instead.
func (*GetPortLandingQueueRequest) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetPortLandingQueueRequest) GetPortId() int64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

// 着陸キュー
type PortLandingQueue struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Items         []*PortLandingQueueItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortLandingQueue) Reset() {
	*x = PortLandingQueue{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortLandingQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortLandingQueue) ProtoMessage() {}

func (x *PortLandingQueue) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortLandingQueue.ProtoReflect.Descriptor instead.
func (*PortLandingQueue) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{6}
}

func (x *PortLandingQueue) GetItems() []*PortLandingQueueItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// 着陸キューアイテム
type PortLandingQueueItem struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	PortId        int64                              `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	UavId         string                             `protobuf:"bytes,2,opt,name=uav_id,json=uavId,proto3" json:"uav_id,omitempty"`
	FlightPurpose string                             `protobuf:"bytes,3,opt,name=flight_purpose,json=flightPurpose,proto3" json:"flight_purpose,omitempty"`
	BatteryLevel  float64                            `protobuf:"fixed64,4,opt,name=battery_level,json=batteryLevel,proto3" json:"battery_level,omitempty"`
	EndAt         *timestamppb.Timestamp             `protobuf:"bytes,6,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Status        PortLandingQueueItem_LandingStatus `protobuf:"varint,7,opt,name=status,proto3,enum=Trajectory.TrafficControl.Protocol.v1.PortLandingQueueItem_LandingStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortLandingQueueItem) Reset() {
	*x = PortLandingQueueItem{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortLandingQueueItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortLandingQueueItem) ProtoMessage() {}

func (x *PortLandingQueueItem) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortLandingQueueItem.ProtoReflect.Descriptor instead.
func (*PortLandingQueueItem) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{7}
}

func (x *PortLandingQueueItem) GetPortId() int64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *PortLandingQueueItem) GetUavId() string {
	if x != nil {
		return x.UavId
	}
	return ""
}

func (x *PortLandingQueueItem) GetFlightPurpose() string {
	if x != nil {
		return x.FlightPurpose
	}
	return ""
}

func (x *PortLandingQueueItem) GetBatteryLevel() float64 {
	if x != nil {
		return x.BatteryLevel
	}
	return 0
}

func (x *PortLandingQueueItem) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *PortLandingQueueItem) GetStatus() PortLandingQueueItem_LandingStatus {
	if x != nil {
		return x.Status
	}
	return PortLandingQueueItem_LANDING_STATUS_UNSPECIFIED
}

// キュー順番変更要素
type UpdateQueueOrderItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UavIdOld      int64                  `protobuf:"varint,1,opt,name=uav_id_old,json=uavIdOld,proto3" json:"uav_id_old,omitempty"`
	UavIdNew      int64                  `protobuf:"varint,2,opt,name=uav_id_new,json=uavIdNew,proto3" json:"uav_id_new,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateQueueOrderItem) Reset() {
	*x = UpdateQueueOrderItem{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQueueOrderItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQueueOrderItem) ProtoMessage() {}

func (x *UpdateQueueOrderItem) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQueueOrderItem.ProtoReflect.Descriptor instead.
func (*UpdateQueueOrderItem) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateQueueOrderItem) GetUavIdOld() int64 {
	if x != nil {
		return x.UavIdOld
	}
	return 0
}

func (x *UpdateQueueOrderItem) GetUavIdNew() int64 {
	if x != nil {
		return x.UavIdNew
	}
	return 0
}

// 離陸キュー順番変更リクエスト
type UpdatePortTakeOffQueueRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	PortId        int64                   `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	Items         []*UpdateQueueOrderItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePortTakeOffQueueRequest) Reset() {
	*x = UpdatePortTakeOffQueueRequest{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePortTakeOffQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePortTakeOffQueueRequest) ProtoMessage() {}

func (x *UpdatePortTakeOffQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePortTakeOffQueueRequest.ProtoReflect.Descriptor instead.
func (*UpdatePortTakeOffQueueRequest) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{9}
}

func (x *UpdatePortTakeOffQueueRequest) GetPortId() int64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *UpdatePortTakeOffQueueRequest) GetItems() []*UpdateQueueOrderItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// 離陸キュー順番変更レスポンス
type UpdatePortTakeOffQueueResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Result bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	// 失敗の場合のメッセージ
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePortTakeOffQueueResponse) Reset() {
	*x = UpdatePortTakeOffQueueResponse{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePortTakeOffQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePortTakeOffQueueResponse) ProtoMessage() {}

func (x *UpdatePortTakeOffQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePortTakeOffQueueResponse.ProtoReflect.Descriptor instead.
func (*UpdatePortTakeOffQueueResponse) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpdatePortTakeOffQueueResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdatePortTakeOffQueueResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 着陸キュー順番変更リクエスト
type UpdatePortLandingQueueRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	PortId        int64                   `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	Items         []*UpdateQueueOrderItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePortLandingQueueRequest) Reset() {
	*x = UpdatePortLandingQueueRequest{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePortLandingQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePortLandingQueueRequest) ProtoMessage() {}

func (x *UpdatePortLandingQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePortLandingQueueRequest.ProtoReflect.Descriptor instead.
func (*UpdatePortLandingQueueRequest) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{11}
}

func (x *UpdatePortLandingQueueRequest) GetPortId() int64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *UpdatePortLandingQueueRequest) GetItems() []*UpdateQueueOrderItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// 着陸キュー順番変更レスポンス
type UpdatePortLandingQueueResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Result bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	// 失敗の場合のメッセージ
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePortLandingQueueResponse) Reset() {
	*x = UpdatePortLandingQueueResponse{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePortLandingQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePortLandingQueueResponse) ProtoMessage() {}

func (x *UpdatePortLandingQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePortLandingQueueResponse.ProtoReflect.Descriptor instead.
func (*UpdatePortLandingQueueResponse) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{12}
}

func (x *UpdatePortLandingQueueResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdatePortLandingQueueResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 状態リスト取得リクエスト
type GetPortStatusListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PortId        int64                  `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPortStatusListRequest) Reset() {
	*x = GetPortStatusListRequest{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPortStatusListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortStatusListRequest) ProtoMessage() {}

func (x *GetPortStatusListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortStatusListRequest.ProtoReflect.Descriptor instead.
func (*GetPortStatusListRequest) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetPortStatusListRequest) GetPortId() int64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

// 状態リスト
type PortStatusList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*PortStatusItem      `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortStatusList) Reset() {
	*x = PortStatusList{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortStatusList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStatusList) ProtoMessage() {}

func (x *PortStatusList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStatusList.ProtoReflect.Descriptor instead.
func (*PortStatusList) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{14}
}

func (x *PortStatusList) GetItems() []*PortStatusItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// 状態
type PortStatusItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Status:
	//
	//	*PortStatusItem_Collision_
	Status        isPortStatusItem_Status `protobuf_oneof:"status"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortStatusItem) Reset() {
	*x = PortStatusItem{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortStatusItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStatusItem) ProtoMessage() {}

func (x *PortStatusItem) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStatusItem.ProtoReflect.Descriptor instead.
func (*PortStatusItem) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{15}
}

func (x *PortStatusItem) GetStatus() isPortStatusItem_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PortStatusItem) GetCollision() *PortStatusItem_Collision {
	if x != nil {
		if x, ok := x.Status.(*PortStatusItem_Collision_); ok {
			return x.Collision
		}
	}
	return nil
}

type isPortStatusItem_Status interface {
	isPortStatusItem_Status()
}

type PortStatusItem_Collision_ struct {
	Collision *PortStatusItem_Collision `protobuf:"bytes,2,opt,name=collision,proto3,oneof"`
}

func (*PortStatusItem_Collision_) isPortStatusItem_Status() {}

type ApprovePortTakeOffRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UavId         string                 `protobuf:"bytes,1,opt,name=uav_id,json=uavId,proto3" json:"uav_id,omitempty"`
	ApproveType   ApproveType            `protobuf:"varint,2,opt,name=approve_type,json=approveType,proto3,enum=Trajectory.TrafficControl.Protocol.v1.ApproveType" json:"approve_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApprovePortTakeOffRequest) Reset() {
	*x = ApprovePortTakeOffRequest{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApprovePortTakeOffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovePortTakeOffRequest) ProtoMessage() {}

func (x *ApprovePortTakeOffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovePortTakeOffRequest.ProtoReflect.Descriptor instead.
func (*ApprovePortTakeOffRequest) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{16}
}

func (x *ApprovePortTakeOffRequest) GetUavId() string {
	if x != nil {
		return x.UavId
	}
	return ""
}

func (x *ApprovePortTakeOffRequest) GetApproveType() ApproveType {
	if x != nil {
		return x.ApproveType
	}
	return ApproveType_APPROVE_TYPE_UNSPECIFIED
}

type ApprovePortTakeOffResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UavId         string                 `protobuf:"bytes,1,opt,name=uav_id,json=uavId,proto3" json:"uav_id,omitempty"`
	Result        bool                   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApprovePortTakeOffResponse) Reset() {
	*x = ApprovePortTakeOffResponse{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApprovePortTakeOffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovePortTakeOffResponse) ProtoMessage() {}

func (x *ApprovePortTakeOffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovePortTakeOffResponse.ProtoReflect.Descriptor instead.
func (*ApprovePortTakeOffResponse) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{17}
}

func (x *ApprovePortTakeOffResponse) GetUavId() string {
	if x != nil {
		return x.UavId
	}
	return ""
}

func (x *ApprovePortTakeOffResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ApprovePortTakeOffResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ApprovePortLandingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UavId         string                 `protobuf:"bytes,1,opt,name=uav_id,json=uavId,proto3" json:"uav_id,omitempty"`
	ApproveType   ApproveType            `protobuf:"varint,2,opt,name=approve_type,json=approveType,proto3,enum=Trajectory.TrafficControl.Protocol.v1.ApproveType" json:"approve_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApprovePortLandingRequest) Reset() {
	*x = ApprovePortLandingRequest{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApprovePortLandingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovePortLandingRequest) ProtoMessage() {}

func (x *ApprovePortLandingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovePortLandingRequest.ProtoReflect.Descriptor instead.
func (*ApprovePortLandingRequest) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{18}
}

func (x *ApprovePortLandingRequest) GetUavId() string {
	if x != nil {
		return x.UavId
	}
	return ""
}

func (x *ApprovePortLandingRequest) GetApproveType() ApproveType {
	if x != nil {
		return x.ApproveType
	}
	return ApproveType_APPROVE_TYPE_UNSPECIFIED
}

type ApprovePortLandingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UavId         string                 `protobuf:"bytes,1,opt,name=uav_id,json=uavId,proto3" json:"uav_id,omitempty"`
	Result        bool                   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApprovePortLandingResponse) Reset() {
	*x = ApprovePortLandingResponse{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApprovePortLandingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovePortLandingResponse) ProtoMessage() {}

func (x *ApprovePortLandingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovePortLandingResponse.ProtoReflect.Descriptor instead.
func (*ApprovePortLandingResponse) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{19}
}

func (x *ApprovePortLandingResponse) GetUavId() string {
	if x != nil {
		return x.UavId
	}
	return ""
}

func (x *ApprovePortLandingResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ApprovePortLandingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PortStatusItem_Collision struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UavId1         string                 `protobuf:"bytes,1,opt,name=uav_id1,json=uavId1,proto3" json:"uav_id1,omitempty"`
	UavId2         string                 `protobuf:"bytes,2,opt,name=uav_id2,json=uavId2,proto3" json:"uav_id2,omitempty"`
	CollisionPoint *AbsolutePosition      `protobuf:"bytes,3,opt,name=collision_point,json=collisionPoint,proto3" json:"collision_point,omitempty"` // 衝突予測位置
	CollisionAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=collision_at,json=collisionAt,proto3" json:"collision_at,omitempty"`          // 衝突予測時刻
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PortStatusItem_Collision) Reset() {
	*x = PortStatusItem_Collision{}
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortStatusItem_Collision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStatusItem_Collision) ProtoMessage() {}

func (x *PortStatusItem_Collision) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStatusItem_Collision.ProtoReflect.Descriptor instead.
func (*PortStatusItem_Collision) Descriptor() ([]byte, []int) {
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP(), []int{15, 0}
}

func (x *PortStatusItem_Collision) GetUavId1() string {
	if x != nil {
		return x.UavId1
	}
	return ""
}

func (x *PortStatusItem_Collision) GetUavId2() string {
	if x != nil {
		return x.UavId2
	}
	return ""
}

func (x *PortStatusItem_Collision) GetCollisionPoint() *AbsolutePosition {
	if x != nil {
		return x.CollisionPoint
	}
	return nil
}

func (x *PortStatusItem_Collision) GetCollisionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CollisionAt
	}
	return nil
}

var File_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto protoreflect.FileDescriptor

var file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDesc = string([]byte{
	0x0a, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x6a, 0x70, 0x2f, 0x74, 0x72, 0x6a, 0x78, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x25, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x6a,
	0x70, 0x2f, 0x74, 0x72, 0x6a, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x55, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x61, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x61, 0x76, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x55, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x54, 0x72,
	0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x35, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x10,
	0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x51, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x6b, 0x65,
	0x4f, 0x66, 0x66, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xe7, 0x02, 0x0a, 0x14, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x6b, 0x65,
	0x4f, 0x66, 0x66, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x61, 0x76, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x61, 0x76, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x61, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x54, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5e, 0x0a,
	0x0d, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x1b, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x4e,
	0x5f, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x03, 0x22, 0x35, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x84, 0x03, 0x0a, 0x14,
	0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x75, 0x61, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75,
	0x61, 0x76, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e,
	0x64, 0x41, 0x74, 0x12, 0x61, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5a, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x41, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x22, 0x52, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x0a, 0x75, 0x61,
	0x76, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x75, 0x61, 0x76, 0x49, 0x64, 0x4f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x75, 0x61, 0x76, 0x5f,
	0x69, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x61,
	0x76, 0x49, 0x64, 0x4e, 0x65, 0x77, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x51, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x52, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x52, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22,
	0x5d, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x4b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xdc,
	0x02, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x5f, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x1a, 0xde, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x61, 0x76, 0x5f, 0x69, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x61, 0x76, 0x49, 0x64, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x61, 0x76,
	0x5f, 0x69, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x61, 0x76, 0x49,
	0x64, 0x32, 0x12, 0x60, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x54, 0x72,
	0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x89, 0x01,
	0x0a, 0x19, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x6b,
	0x65, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x75,
	0x61, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x61, 0x76,
	0x49, 0x64, 0x12, 0x55, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x65, 0x0a, 0x1a, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x61, 0x76, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x61, 0x76, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x89, 0x01, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x75, 0x61, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x75, 0x61, 0x76, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x54, 0x72,
	0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x65, 0x0a, 0x1a,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x61,
	0x76, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x61, 0x76, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2a, 0xdd, 0x01, 0x0a, 0x09, 0x55, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x41, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a,
	0x19, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x59, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4f, 0x46, 0x46, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4f, 0x46, 0x46,
	0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4f, 0x46, 0x46, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x41, 0x4b, 0x45, 0x4f, 0x46, 0x46, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4c, 0x41,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x50, 0x50, 0x4c, 0x59,
	0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x16, 0x12, 0x17, 0x0a,
	0x13, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x17, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x41, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x18, 0x2a, 0x4e, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x57, 0x41, 0x49, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x10, 0x03, 0x32, 0xf4, 0x09, 0x0a, 0x12, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x41, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x95, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x41, 0x2e, 0x54, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x8f, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3f, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x9b, 0x01, 0x0a,
	0x12, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x6b, 0x65,
	0x4f, 0x66, 0x66, 0x12, 0x40, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x12, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x40, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa7, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x44, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x66, 0x66, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x54, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x6b, 0x65,
	0x4f, 0x66, 0x66, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xa7, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x44, 0x2e,
	0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x55, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x2e,
	0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x54, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x53, 0x5a, 0x51, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x6a, 0x70, 0x2f, 0x74, 0x72, 0x6a, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x6f, 0x3b,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescOnce sync.Once
	file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescData []byte
)

func file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescGZIP() []byte {
	file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescOnce.Do(func() {
		file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDesc), len(file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDesc)))
	})
	return file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDescData
}

var file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_goTypes = []any{
	(UavStatus)(0),                          // 0: Trajectory.TrafficControl.Protocol.v1.UavStatus
	(ApproveType)(0),                        // 1: Trajectory.TrafficControl.Protocol.v1.ApproveType
	(PortTakeOffQueueItem_TakeOffStatus)(0), // 2: Trajectory.TrafficControl.Protocol.v1.PortTakeOffQueueItem.TakeOffStatus
	(PortLandingQueueItem_LandingStatus)(0), // 3: Trajectory.TrafficControl.Protocol.v1.PortLandingQueueItem.LandingStatus
	(*GetUavStatusRequest)(nil),             // 4: Trajectory.TrafficControl.Protocol.v1.GetUavStatusRequest
	(*GetUavStatusResponse)(nil),            // 5: Trajectory.TrafficControl.Protocol.v1.GetUavStatusResponse
	(*GetPortTakeOffQueueRequest)(nil),      // 6: Trajectory.TrafficControl.Protocol.v1.GetPortTakeOffQueueRequest
	(*PortTakeOffQueue)(nil),                // 7: Trajectory.TrafficControl.Protocol.v1.PortTakeOffQueue
	(*PortTakeOffQueueItem)(nil),            // 8: Trajectory.TrafficControl.Protocol.v1.PortTakeOffQueueItem
	(*GetPortLandingQueueRequest)(nil),      // 9: Trajectory.TrafficControl.Protocol.v1.GetPortLandingQueueRequest
	(*PortLandingQueue)(nil),                // 10: Trajectory.TrafficControl.Protocol.v1.PortLandingQueue
	(*PortLandingQueueItem)(nil),            // 11: Trajectory.TrafficControl.Protocol.v1.PortLandingQueueItem
	(*UpdateQueueOrderItem)(nil),            // 12: Trajectory.TrafficControl.Protocol.v1.UpdateQueueOrderItem
	(*UpdatePortTakeOffQueueRequest)(nil),   // 13: Trajectory.TrafficControl.Protocol.v1.UpdatePortTakeOffQueueRequest
	(*UpdatePortTakeOffQueueResponse)(nil),  // 14: Trajectory.TrafficControl.Protocol.v1.UpdatePortTakeOffQueueResponse
	(*UpdatePortLandingQueueRequest)(nil),   // 15: Trajectory.TrafficControl.Protocol.v1.UpdatePortLandingQueueRequest
	(*UpdatePortLandingQueueResponse)(nil),  // 16: Trajectory.TrafficControl.Protocol.v1.UpdatePortLandingQueueResponse
	(*GetPortStatusListRequest)(nil),        // 17: Trajectory.TrafficControl.Protocol.v1.GetPortStatusListRequest
	(*PortStatusList)(nil),                  // 18: Trajectory.TrafficControl.Protocol.v1.PortStatusList
	(*PortStatusItem)(nil),                  // 19: Trajectory.TrafficControl.Protocol.v1.PortStatusItem
	(*ApprovePortTakeOffRequest)(nil),       // 20: Trajectory.TrafficControl.Protocol.v1.ApprovePortTakeOffRequest
	(*ApprovePortTakeOffResponse)(nil),      // 21: Trajectory.TrafficControl.Protocol.v1.ApprovePortTakeOffResponse
	(*ApprovePortLandingRequest)(nil),       // 22: Trajectory.TrafficControl.Protocol.v1.ApprovePortLandingRequest
	(*ApprovePortLandingResponse)(nil),      // 23: Trajectory.TrafficControl.Protocol.v1.ApprovePortLandingResponse
	(*PortStatusItem_Collision)(nil),        // 24: Trajectory.TrafficControl.Protocol.v1.PortStatusItem.Collision
	(*timestamppb.Timestamp)(nil),           // 25: google.protobuf.Timestamp
	(*AbsolutePosition)(nil),                // 26: Trajectory.TrafficControl.Protocol.v1.AbsolutePosition
}
var file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_depIdxs = []int32{
	0,  // 0: Trajectory.TrafficControl.Protocol.v1.GetUavStatusResponse.status:type_name -> Trajectory.TrafficControl.Protocol.v1.UavStatus
	8,  // 1: Trajectory.TrafficControl.Protocol.v1.PortTakeOffQueue.items:type_name -> Trajectory.TrafficControl.Protocol.v1.PortTakeOffQueueItem
	25, // 2: Trajectory.TrafficControl.Protocol.v1.PortTakeOffQueueItem.start_at:type_name -> google.protobuf.Timestamp
	2,  // 3: Trajectory.TrafficControl.Protocol.v1.PortTakeOffQueueItem.status:type_name -> Trajectory.TrafficControl.Protocol.v1.PortTakeOffQueueItem.TakeOffStatus
	11, // 4: Trajectory.TrafficControl.Protocol.v1.PortLandingQueue.items:type_name -> Trajectory.TrafficControl.Protocol.v1.PortLandingQueueItem
	25, // 5: Trajectory.TrafficControl.Protocol.v1.PortLandingQueueItem.end_at:type_name -> google.protobuf.Timestamp
	3,  // 6: Trajectory.TrafficControl.Protocol.v1.PortLandingQueueItem.status:type_name -> Trajectory.TrafficControl.Protocol.v1.PortLandingQueueItem.LandingStatus
	12, // 7: Trajectory.TrafficControl.Protocol.v1.UpdatePortTakeOffQueueRequest.items:type_name -> Trajectory.TrafficControl.Protocol.v1.UpdateQueueOrderItem
	12, // 8: Trajectory.TrafficControl.Protocol.v1.UpdatePortLandingQueueRequest.items:type_name -> Trajectory.TrafficControl.Protocol.v1.UpdateQueueOrderItem
	19, // 9: Trajectory.TrafficControl.Protocol.v1.PortStatusList.items:type_name -> Trajectory.TrafficControl.Protocol.v1.PortStatusItem
	24, // 10: Trajectory.TrafficControl.Protocol.v1.PortStatusItem.collision:type_name -> Trajectory.TrafficControl.Protocol.v1.PortStatusItem.Collision
	1,  // 11: Trajectory.TrafficControl.Protocol.v1.ApprovePortTakeOffRequest.approve_type:type_name -> Trajectory.TrafficControl.Protocol.v1.ApproveType
	1,  // 12: Trajectory.TrafficControl.Protocol.v1.ApprovePortLandingRequest.approve_type:type_name -> Trajectory.TrafficControl.Protocol.v1.ApproveType
	26, // 13: Trajectory.TrafficControl.Protocol.v1.PortStatusItem.Collision.collision_point:type_name -> Trajectory.TrafficControl.Protocol.v1.AbsolutePosition
	25, // 14: Trajectory.TrafficControl.Protocol.v1.PortStatusItem.Collision.collision_at:type_name -> google.protobuf.Timestamp
	6,  // 15: Trajectory.TrafficControl.Protocol.v1.PortControlService.GetPortTakeOffQueue:input_type -> Trajectory.TrafficControl.Protocol.v1.GetPortTakeOffQueueRequest
	9,  // 16: Trajectory.TrafficControl.Protocol.v1.PortControlService.GetPortLandingQueue:input_type -> Trajectory.TrafficControl.Protocol.v1.GetPortLandingQueueRequest
	17, // 17: Trajectory.TrafficControl.Protocol.v1.PortControlService.GetPortStatusList:input_type -> Trajectory.TrafficControl.Protocol.v1.GetPortStatusListRequest
	20, // 18: Trajectory.TrafficControl.Protocol.v1.PortControlService.ApprovePortTakeOff:input_type -> Trajectory.TrafficControl.Protocol.v1.ApprovePortTakeOffRequest
	22, // 19: Trajectory.TrafficControl.Protocol.v1.PortControlService.ApprovePortLanding:input_type -> Trajectory.TrafficControl.Protocol.v1.ApprovePortLandingRequest
	13, // 20: Trajectory.TrafficControl.Protocol.v1.PortControlService.UpdatePortTakeOffQueue:input_type -> Trajectory.TrafficControl.Protocol.v1.UpdatePortTakeOffQueueRequest
	15, // 21: Trajectory.TrafficControl.Protocol.v1.PortControlService.UpdatePortLandingQueue:input_type -> Trajectory.TrafficControl.Protocol.v1.UpdatePortLandingQueueRequest
	4,  // 22: Trajectory.TrafficControl.Protocol.v1.PortControlService.GetUavStatus:input_type -> Trajectory.TrafficControl.Protocol.v1.GetUavStatusRequest
	7,  // 23: Trajectory.TrafficControl.Protocol.v1.PortControlService.GetPortTakeOffQueue:output_type -> Trajectory.TrafficControl.Protocol.v1.PortTakeOffQueue
	10, // 24: Trajectory.TrafficControl.Protocol.v1.PortControlService.GetPortLandingQueue:output_type -> Trajectory.TrafficControl.Protocol.v1.PortLandingQueue
	18, // 25: Trajectory.TrafficControl.Protocol.v1.PortControlService.GetPortStatusList:output_type -> Trajectory.TrafficControl.Protocol.v1.PortStatusList
	21, // 26: Trajectory.TrafficControl.Protocol.v1.PortControlService.ApprovePortTakeOff:output_type -> Trajectory.TrafficControl.Protocol.v1.ApprovePortTakeOffResponse
	23, // 27: Trajectory.TrafficControl.Protocol.v1.PortControlService.ApprovePortLanding:output_type -> Trajectory.TrafficControl.Protocol.v1.ApprovePortLandingResponse
	14, // 28: Trajectory.TrafficControl.Protocol.v1.PortControlService.UpdatePortTakeOffQueue:output_type -> Trajectory.TrafficControl.Protocol.v1.UpdatePortTakeOffQueueResponse
	16, // 29: Trajectory.TrafficControl.Protocol.v1.PortControlService.UpdatePortLandingQueue:output_type -> Trajectory.TrafficControl.Protocol.v1.UpdatePortLandingQueueResponse
	5,  // 30: Trajectory.TrafficControl.Protocol.v1.PortControlService.GetUavStatus:output_type -> Trajectory.TrafficControl.Protocol.v1.GetUavStatusResponse
	23, // [23:31] is the sub-list for method output_type
	15, // [15:23] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() {
	file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_init()
}
func file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_init() {
	if File_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto != nil {
		return
	}
	file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_common_proto_init()
	file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes[15].OneofWrappers = []any{
		(*PortStatusItem_Collision_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDesc), len(file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_goTypes,
		DependencyIndexes: file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_depIdxs,
		EnumInfos:         file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_enumTypes,
		MessageInfos:      file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_msgTypes,
	}.Build()
	File_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto = out.File
	file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_goTypes = nil
	file_github_com_trajectoryjp_trjx_api_service_traffic_control_protocol_v1_port_control_service_proto_depIdxs = nil
}
