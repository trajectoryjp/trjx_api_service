/***　Copyright © 2024 Trajectory. All rights reserved. ***/

/*
 * <機能概要>
 * 飛行計画は、WPで指定した座標群から、地形・障害物・リスクを考慮した
 * 安全はルートを生成し、離陸地点から飛行ルート、着陸地点までの飛行経路
 * を空間予約します。
 *　本サービスは、飛行計画を操作するAPIサービスを提供します。
 */

syntax = "proto3";

package trajectory.gcs_manager.protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service/gcs";
  
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "trajectory/type/resource.proto";
 
/*
 * 飛行計画サービス
 */
service FlightPlanService {

    /*
     * 飛行計画の生成
     * パス(paths)パラメタで指定したWPを経由する飛行ルートを空間予約し、飛行計画に割り付ける
     */
    rpc CreateFlightPlan(CreateFlightPlanRequest) returns (CreateFlightPlanResponse);

    /*
     * 飛行計画の削除
     */
    rpc DeleteFlightPlan(DeleteFlightPlanRequest) returns (google.protobuf.Empty);

    /*
     * 飛行計画のID取得
     */
    rpc GetFlightPlan(GetFlightPlanRequest) returns (FlightPlan);

    /*
     * 飛行計画のリスト取得
     */
    rpc ListFlightPlans(ListFlightPlansRequest) returns (stream ListFlightPlansResponse);

    /*
     * 飛行計画への離陸機体位置設定(更新)
     */
    rpc CreateTakeoffUavPosition(CreateTakeoffUavPositionRequest) returns (CreateTakeoffUavPositionResponse);

    /*
     * 飛行計画への着陸設定(更新)
     */
    rpc CreateLandingUavPosition(CreateLandingUavPositionRequest) returns (CreateLandingUavPositionResponse);

    /*
     * 飛行計画の時刻更新
     */
    rpc UpdateFlightTime(UpdateFlightTimeRequest) returns (google.protobuf.Empty);

    /*
     * 飛行計画の飛行パス更新
     */
    rpc UpdateFlightPath(UpdateFlightPathRequest) returns (UpdateFlightPathResponse);

}

    
/*
 * 飛行計画の作成リクエスト
 */
message CreateFlightPlanRequest{
    UavProperty uav = 1;                    // UAV設定プロパティ
    optional AirwayProperty airway = 2;     // 航路設定プロパティ(航路飛行時に指定)
    FlightPath paths = 3;                   // 飛行入力WPパスリスト(現状航路予約ID指定時は空指定)
    optional RealPortProperty ports = 4;    // 実ポート指定(実ポート離発着の場合指定)
    optional trjx_api_service.TimeStamp start_time = 6;// 飛行ルート有効期間始点
    optional trjx_api_service.TimeStamp end_time = 7;  // 飛行ルート有効期間終点

    // 機体プロパティ
    message UavProperty{
        float clearance = 1;                // クリアランス(m) 機体の大きさ(機体を覆う球体の半径)を指定
    }
    
    // 航路設定プロパティ
    message AirwayProperty{
        string airway_reservation_id = 1;   // 航路予約ID
    }
    
    // 実ポート離発着設定プロパティ
    message RealPortProperty{
        optional int64 takeoff_port_id = 1; // 離陸ポート(実ポートからの離陸する場合に指定(オプショナル))
        optional int64 landing_port_id = 2; // 着陸ポート(実ポートに着陸する場合に指定(オプショナル))
    }
}

/*
 * 飛行計画の作成レスポンス
 */
message CreateFlightPlanResponse{
    uint32 status = 1;                      // code
    string message = 2;                     // メッセージ
    string flight_plan_id = 3;              // 飛行計画ID
    FlightPlan.Route route = 4;             // 飛行ルート
}

/*
 * 飛行計画への離陸機体位置設定(更新)リクエスト
 */
message CreateTakeoffUavPositionRequest{
    string flight_plan_id = 1;              // 飛行計画ID
    TakeoffPosition takeoff = 2;            // 離陸設定(機体位置・ポート設定)
    optional trjx_api_service.TimeStamp start_time = 3;// 有効期間始点
    optional trjx_api_service.TimeStamp end_time = 4;  // 有効期間終点
}

/*
 * 飛行計画への離陸機体位置設定(更新)レスポンス
 */
message CreateTakeoffUavPositionResponse{
    uint32 status = 1;                      // code
    string message = 2;                     // メッセージ
    FlightPlan.Takeoff takeoff = 3;         // 離陸情報    
}

/*
 * 飛行計画への着陸設定(更新)リクエスト
 */
message CreateLandingUavPositionRequest{
    string flight_plan_id = 1;              // 飛行計画ID
    LandingPosition landing = 2;            // 着陸設定(ポート設定)
    optional trjx_api_service.TimeStamp start_time = 3;// 有効期間始点
    optional trjx_api_service.TimeStamp end_time = 4;  // 有効期間終点
}

/*
 * 飛行計画への着陸設定(更新)レスポンス
 */
message CreateLandingUavPositionResponse{
    uint32 status = 1;                      // code
    string message = 2;                     // メッセージ
    FlightPlan.Landing landing = 3;         // 着陸情報    
}

/*
 * 飛行計画の削除リクエスト
 */
message DeleteFlightPlanRequest{
    string flight_plan_id = 1;              // 飛行計画ID
}

/*
 * 飛行計画のID取得リクエスト
 */
message GetFlightPlanRequest{
    string flight_plan_id = 1;              // 飛行計画ID
    google.protobuf.FieldMask mask = 2;     // 取得マスク(指定されたフィールドのみ取得)
}

/*
 * 飛行計画のID取得レスポンス
 */
message GetFlightPlanResponse{
    FlightPlan plan = 1;                    // 飛行計画
}

/*
 * 飛行計画のリスト取得リクエスト
 */
message ListFlightPlansRequest{
    optional trjx_api_service.SearchBox box = 1; // 検索ボックス
    google.protobuf.FieldMask mask = 2;     // 取得マスク(指定されたフィールドのみ取得)
}

/*
 * 飛行計画のリスト取得レスポンス
 */
message ListFlightPlansResponse{
    repeated FlightPlan plan = 1;           // 飛行計画
}

/*
 * 飛行計画の時刻更新リクエスト
 */
message UpdateFlightTimeRequest{
    string flight_plan_id = 1;              // 飛行計画ID
    Section section = 2;                    // 飛行計画セクション(中間ルート/離陸/着陸)
    optional trjx_api_service.TimeStamp start_time = 3;// 飛行ルート有効期間始点
    optional trjx_api_service.TimeStamp end_time = 4;  // 飛行ルート有効期間終点

    // 飛行計画セクション
    enum Section {
        ALLSECTION = 0;                    // 全てのセクション(中間/離陸/着陸)
        INTERMEDIAL = 1;                   // 中間(経由WPリスト)
        TAKEOFF = 2;                       // 離陸
        LANDING = 3;                       // 着陸
    }
}

/*
 * 飛行計画の飛行パス更新リクエスト
 */
message UpdateFlightPathRequest{
    string flight_plan_id = 1;              // 飛行計画ID
    FlightPath paths = 3;                   // 飛行入力WPパスリスト
    optional trjx_api_service.TimeStamp start_time = 4;// 飛行ルート有効期間始点
    optional trjx_api_service.TimeStamp end_time = 5;  // 飛行ルート有効期間終点
}

/*
 * 飛行計画の飛行パス更新レスポンス
 */
message UpdateFlightPathResponse{
    uint32 status = 1;                      // code
    string message = 2;                     // メッセージ
    FlightPlan.Route route = 3;             // 飛行ルート
}

/*
 * 飛行入力WPパスリスト
 */
message FlightPath {
    repeated Path path = 1;                 // 飛行パス

    // 飛行パス
    message Path{
        Position start = 1;                 // パスの始点Waypoint
        Position end = 2;                   // 入力の終点Waypoint
        PathMethod method = 3;              // 飛行経路生成方式(推奨/登録)    
    }
}

/*
 * ポート内離着陸WPパスリスト
 * ※入力WPパス生成(WPを直線で結ぶパスを生成)
 */
message TerminalPath {
    repeated Path path = 1;                 // 飛行パス

    // 終端パス
    message Path{
        Position start = 1;                 // パスの始点Waypoint
        Position end = 2;                   // 入力の終点Waypoint
    }
}


/*
 * 離陸設定(機体位置・ポート)
 * 離陸直前に機体位置を指定して要求すること
 */
message TakeoffPosition{
    Position takeoff_uav_position = 1;      // 離陸機体位置
    oneof terminal {
        Port port = 2;                      // 実ポート指定(実ポート利用時に指定)
        Altitude takeoff_altitude = 3;      // 仮設ポート(実ポート以外)時の離陸上昇高度(m)
        TerminalPath paths = 4;             // 離陸WPパスリスト(飛行経路生成方式が入力WPパス生成のみ利用可能)    
    }
    Position nearest_waypoint = 5;          // 離陸地点直近のWP(第一WP)
}

/*
 * 着陸設定(ポート)
 */
message LandingPosition {
    oneof terminal {
        LandingModeCurrent current = 1;     // 最終WP着陸(Current)の設定
        LandingModeRtl rtl = 2;             // ホームポジション帰還(RTL)の設定
        LandingModePort port = 3;           // 実ポート着陸時の設定
        LandingModePath path = 4;           // 指定着陸WP着陸時の設定
    }
    Position nearest_waypoint = 5;          // 着陸地点直近のWP(最終WP)

    // 最終WP着陸(Current)の設定(空のメッセージ指定)
    message LandingModeCurrent {
    }
    // ホームポジション帰還(RTL)の設定
    message LandingModeRtl {
        Position takeoff_uav_position = 1;  // 離陸機体位置(着陸陸モードがRTLの場合のみ有効)
    }
    // 実ポート着陸時の設定
    message LandingModePort {
        Port port = 3;                      // 着陸ポート(着陸モードが実ポート時のみ有効)
    }
    // 指定着陸WP着陸時の設定
    message LandingModePath {
        TerminalPath paths = 4;             // 着陸WPパスリスト(着陸モードが着陸パスWP指定時のみ有効)
    }
}

/*
 * ポート・スポット
 */
message Port {
    int64 port_id = 1;                      // ポートID
    int64 spot_id = 2;                      // スポットID
}

/*
 * 飛行計画オブジェクト
 */
message FlightPlan {
    string flight_plan_id = 2;              // 飛行計画ID
    trjx_api_service.UavId uav_id = 3;      // 機体識別子(文字列)
    float clearance = 5;                    // クリアランス(m) 機体の大きさ(機体を覆う球体の半径)を指定
    float cost = 6;                         // 飛行経路のトータルコスト値(出力)
    Route route = 7;                        // 飛行ルート
    Takeoff takeoff = 8;                    // 離陸設定
    Landing landing = 9;                    // 着陸設定

    // 飛行ルート
    message Route {
        float cost = 1;                     // 飛行経路のコスト値(出力)
        repeated ResultFlightPath route = 2;// 飛行ルート(出力)
        trjx_api_service.TimeStamp start_time = 4;// 有効期間始点
        trjx_api_service.TimeStamp end_time = 5;  // 有効期間終点
    }

    // 離陸ルート
    message Takeoff{
        float cost = 1;                     // 飛行経路のコスト値(出力)
        Position closest_potition = 2;      // 最近接点(出力)
        repeated ResultFlightPath paths = 3;// 離陸ルート(ターミナル)(出力)
        trjx_api_service.TimeStamp start_time = 5;// 有効期間始点
        trjx_api_service.TimeStamp end_time = 6;  // 有効期間終点
    }

    // 着陸ルート
    message Landing {
        float cost = 1;                     // 飛行経路のコスト値(出力)
        Position closest_potition = 2;      // 最近接点(出力)
        repeated ResultFlightPath paths = 3;// 着陸ルート(ターミナル)(出力)
        trjx_api_service.TimeStamp start_time = 5;// 有効期間始点
        trjx_api_service.TimeStamp end_time = 6;  // 有効期間終点
    }

    // 飛行経路
    message ResultFlightPath {
        float cost = 1;                     // 飛行経路のコスト値(出力)
        oneof result {
            Path path = 2;                  // 生成飛行経路(出力)
            InBarrierError in_barrier = 3;  // 障害物の突入するパス
            InNoDataError in_nodata = 4;    // データが存在せずにパス生成不可
            NoPathError no_path = 5;        // 全て障害物やパスで埋められてパスが生成できない
        }
 
        // パス
        message Path {
            bool has_value = 1;             // メッセージの有効性(true/false)
            repeated Position path = 2;     // 安全が保証されたパス
        }

        // 障害物に衝突してしまうエラー
        message InBarrierError {
            bool has_value = 1;             // メッセージの有効性(true/false)
            repeated Position danger = 2;   // 危険なパス
            Position position = 3;          // 障害物に衝突してしまう位置
        }

        // データが無いエラー
        message InNoDataError {
            bool has_value = 1;             // メッセージの有効性(true/false)
            repeated Position unsafe = 2;   // 安全が保障されないパス
            Position position = 3;          // データが無い位置
        }

        // パスが存在しないエラー
        message NoPathError {
            bool has_value = 1;             // メッセージの有効性(true/false)
            repeated Position danger = 2;   // 存在しないパス
        }
    }    
}

/*
 * 飛行経路生成方式
 */
enum PathMethod {
    PATH_METHOD_RECOMMEND = 0;              // 推奨パス生成(バリアやリスクを考慮)
    PATH_METHOD_INPUTWP = 1;                // 入力WPパス生成(WP直線で結ぶパスを生成) 
}

/*
 * ポート・スポット
 */
message PortSpot {
    int64 port_id = 1;                      // ポートID
    string name = 2;                        // 名称
    Spot spot = 3;                          // スポット

    // スポット
    message Spot{
        int64 spot_id = 1;                  // スポットID
        float spot_size = 2;                // スポットの半径(m)
        Position center = 3;                // スポット中心座標            
    }
}

/*
 * 位置情報
 */
message Position {
    string tag = 1 ;                        // タグ
    double latitude = 2;                    // 緯度
    double longitude = 3;                   // 経度
    Altitude altitude = 4;                  // 高度
}

/*
 * 高度
 */
message Altitude{
    float altitude = 1;                     // 高度(m)
    AltitudeAttr altitudeAttr = 2;          // 高度属性

    // 高度属性
    enum AltitudeAttr {
        ALTITUDE_ELLIPSOID = 0;             // 楕円球体高
        ALTITUDE_Relative = 1;              // 離陸地点を基準とする相対高度
        ALTITUDE_AGL = 2 ;                  // 地表面高度
        ALTITUDE_MSL = 3;                   // 海抜高度(標高)
    }
}