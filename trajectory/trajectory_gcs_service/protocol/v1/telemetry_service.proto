syntax = "proto3";

package trajectory.trajectory_gcs_service.protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service/trajectory_gcs";


import "trajectory/trajectory_gcs_service/protocol/v1/resource.proto";
import "trajectory/type/resource.proto";

service TelemetryService {

    // GetMobilityPositions: 対象範囲にある機体の位置情報を取得する
    rpc GetMobilityPositions(GetMobilityPositionsRequest) returns (stream MobilityPosition) {}

    // UAVのルート逸脱状態通知
    rpc NotifyDeviation(NotifyDeviationRequest) returns (stream NotifyDeviationResponse) {}
}


message GetMobilityPositionsRequest {
    oneof ReferencePosition { // 検知距離の基準位置
        UAVID uav_id = 1; // 時組織機体ID　他組織を指定した場合はエラー
        int32 user_index = 2; // publish positionで通知されるID
        trajectory.trjx_api_service.Position position = 3; // 座標
    }

    trajectory.trjx_api_service.Standard output_altitude = 6; // 出力位置の高度属性
    
    oneof DetectionMethod {
        float horizontal_distance = 11; // 水平距離(m)
        DetectThreeDimensions three_dimensions = 12; // 3D距離
    }
    
    enum OutputRange { // 要削除🟥 spec249_1-BG設計書のToDo(2) WideGetPositionにoutputRangeキャッシュ機能実装済みのため追加して良いか？ 🟥
        OUTPUT_RANGE_UNSPECIFIED = 0; // 自組織・他組織の機体
        EXCLUDE_OWN_ORGANIZATION = 1; // 他組織の機体のみ
    }
    optional OutputRange output_range = 4; // 出力対象　省略した場合、自組織・他組織の機体
}

message DetectThreeDimensions {
    float distance = 1; // 距離(m)
    bool collision = 2; // trueの場合、衝突可能性があるもののみを通知
}

message MobilityPosition {
    ReferencePosition reference_position = 1; // 基準座標
    string public_uav_id = 2; // 指定範囲条件に一致する外部機体ID
    string uav_name = 3; // 機体名
    optional string remote_id = 4; // リモートID
    float distance = 5; // 距離(m)
    bool collisionCourse = 6; // 衝突コースの場合、true
    Approaching approach = 7; // 相対位置および速度
    AbsolutePosition collisionPoint = 8;
    float heading = 9;
}

message Approaching {
    XYZPosition relative_position = 1;
    AbsolutePosition absolute_position = 3;
    PredictSpeed relative_speed = 2 ;
}

message AbsolutePosition{
    double latitude = 1;
    double longitude = 2;
    double altitude = 3;
    string tag = 4; //ミッション識別子。GetETAで利用している
}

message ReferencePosition {
    // Attribute_xx　に変更
    // enum Attribute {
    //     man = 0 ;
    //     unmannedVehicle = 1;
    //     car = 2;
    //     ship = 3;
    //     airplane =4;
    //     helicopter =5;
    //     marker =6;
    //     train = 7 ;
    // }
    trajectory.trjx_api_service.UserType user_type = 1;

    trajectory.trjx_api_service.Position position = 2;
}

message XYZPosition {
    // 経度方向距離(m)　北＋
     double y = 1;   
    // 緯度方向距離(m)　東＋
    double x = 2;
    // 高さ距離(m) 右手系 上+
    double z = 3;
}

message PredictSpeed {
    // 経度方向速度(m/sec)
    double x = 1;
    // 緯度方向速度(m/sec)
    double y = 2;
    // 上昇速度(m/sec) 右手系
    double z = 3;
}

message NotifyDeviationRequest{
    UAVID uav_id = 1;
}

message NotifyDeviationResponse{
    bool deviates_course = 1; // 逸脱の場合true
}