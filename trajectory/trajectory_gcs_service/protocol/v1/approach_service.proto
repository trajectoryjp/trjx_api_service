syntax = "proto3";

package trajectory.trajectory_gcs_service.protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service/trajectory_gcs";

import "google/protobuf/duration.proto";

import "trajectory/type/resource.proto";
import "trajectory/trajectory_gcs_service/protocol/v1/resource.proto";



service ApproachService {
    // 離陸申請
    rpc ApplyTakeoff(ApplyTakeoffRequest) returns (ApplyTakeoffResponse);

    // 着陸申請
    rpc ApplyLanding(ApplyLandingRequest) returns (ApplyLandingResponse);

    // 離着陸経過
    rpc NotifyApproachProgress(NotifyApproachProgressRequest) returns (ApplyResponse);

    // 飛行中飛行計画ID取得
    rpc GetCurrentFlightPlanId(GetCurrentFlightPlanIdRequest) returns (stream CurrentFlightPlanId);
}

// 離陸申請リクエスト
message ApplyTakeoffRequest {
    optional string flight_plan_id = 1;                          // 飛行計画ID
    optional int64 project_id = 2;               // プロジェクトID
    UAVID uav_id = 3;                              // 
}

// 離陸申請レスポンス
message ApplyTakeoffResponse {
    bool cleard = 1;                                 // 許可判定

    // TODO 名称変更
    int64 approach_id = 2;                     // 申請ID
    // PortLocation port = 3;

    int64 port_id =11;                      // ポートID
    string name = 12;                       // ポート名
    string tag = 13;                        // タグ
    trajectory.trjx_api_service.Position closest_position = 14;         // 最近接点位置
    repeated trajectory.trjx_api_service.Position waypoints = 15;       // 生成結果(Waypoint)
    int64 spot_id = 16;                     // スポットID
    google.protobuf.Duration occupied_time = 17 ;          // ポート占有時間
}


// 着陸申請リクエスト
message ApplyLandingRequest {
    optional string flight_plan_id = 1;                          // 飛行計画ID
    optional int64 project_id = 2;                  // プロジェクトID
    UAVID uav_id = 3;                              // 機体ID
}

// 着陸申請レスポンス
message ApplyLandingResponse {
    bool cleard = 1;                                 // 許可判定
    int64 approach_id = 2;                     // 申請ID
    // PortLocation port = 3;

    int64 port_id =11;                      // ポートID
    string name = 12;                       // ポート名
    string tag = 13;                        // タグ
    trajectory.trjx_api_service.Position closest_position = 14;         // 最近接点位置
    repeated trajectory.trjx_api_service.Position waypoints = 15;       // 生成結果(Waypoint)
    int64 spot_id = 16;                     // スポットID
    google.protobuf.Duration occupied_time = 17 ;          // ポート占有時間
}

// 離着陸経過リクエスト
message NotifyApproachProgressRequest {
    int64 approach_id = 1;             // 申請ID
    Progress progress = 2;
    enum Progress {
        Progress_UNSPECIFIED = 0;
        Progress_APPROACHING = 1;   // 時間延長
        Progress_COMPLETE = 2;      // 離着陸完了
        Progress_CANCELL = 3;       // キャンセル
    }
}

// 離着陸経過レスポンス
message ApplyResponse {
    string message = 1;
    optional google.protobuf.Duration occupied_time = 2;    // ポート占有時間
}

message GetCurrentFlightPlanIdRequest {
    string uav_id = 1;
}

message CurrentFlightPlanId {
    string message = 1;
    string flight_plan_id = 2;
    optional ApproachingPort approaching_takeoff_port = 3;
    optional ApproachingPort approaching_landing_port = 4;
}

