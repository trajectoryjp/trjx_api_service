syntax = "proto3";

package trajectory.trajectory_gcs_service.protocol.v1;
option go_package = "github.com/trajectoryjp/trjx_api_service/trajectory_gcs";

service PortManagementService {
    // 離発着機体状態取得
    rpc GetTakeOffAndLandingUAVStatus(GetTakeOffAndLandingUAVStatusRequest) returns (stream GetTakeOffAndLandingUAVStatusResponse) {}
}

message GetTakeOffAndLandingUAVStatusRequest{
    TargetPort target_port = 1; // 取得対象のポートを指定 
    string uav_id = 2; // 機体ID
    string flight_plan_id = 3; // 飛行計画ID
    
    enum TargetPort {
        TARGET_UNSPECIFIED = 0;
        TAKEOFF = 1; // 離陸ポート
        LANDING = 2; // 着陸ポート
        EITHER = 3;  // 飛行状態に応じて着陸・離陸どちらか一方を自動で取得    
    }
}

message GetTakeOffAndLandingUAVStatusResponse{
   int64 target_port_id = 1; // 対象のポートID
   
   oneof status {
    TakeoffStatus takeoff_status = 2; // 取得したポートが離陸ポートの場合
    LandingStatus landing_status = 3; // 取得したポートが着陸ポートの場合
   }

   enum TakeoffStatus {
    TAKEOFF_STATUS_UNSPECIFIED = 0; 
    TAKEOFF_STATUS_QUEUING = 1; // 離陸キュー(申請中)状態
    TAKEOFF_STATUS_WAITING_FOR_TAKEOFF = 2; // 離陸前状態
    TAKEOFF_STATUS_TAKING_OFF = 3; // 離陸中状態
   }

   enum LandingStatus {
    LANDING_STATUS_UNSPECIFIED = 0;
    LANDING_STATUS_QUEUING = 1; // 着陸キュー(申請中)状態
    LANDING_STATUS_WAITING_FOR_LANDING = 2; // 着陸前状態
    LANDING_STATUS_LANDING = 3; // 着陸中状態
   }
}