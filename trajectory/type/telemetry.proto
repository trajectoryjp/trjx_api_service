/***　Copyright © 2023-2024 Trajectory. All rights reserved. ***/

syntax = "proto3";

package trajectory.trjx_api_service;
option go_package = "github.com/trajectoryjp/trjx_api_service/type";

import "trajectory/type/resource.proto";

// テレメトリ機体基本情報メッセージ
// 基本リモートIDを通知。リモートIDを通知できない場合は、GCS/USSの独自機体IDを通知
message UavBasic {
    UavId uav = 1;                   // 機体識別子(必須) リモートIDまたは組織単位で一意のIDを指定
    optional string name = 2;        // 機体表示名
    FlightId flight_id = 3;          // 飛行ID
    UavAbility uav_abilities = 4;    // 利用機能
}

// 機体が持つ能力
// trueとした場合optionalとなっている一部テレメトリパラメータの入力が必須になる
message UavAbility {
    bool wp_tag_report = 1;             // テレメトリの位置情報と共に次に向かうWPのタグを通知できるか否か(true:有/false:無)
    bool battery_status_report = 2;     // 機体のバッテリ状態を通知できるか否か(true:有/false:無)
    bool system_status_report = 3;      // 機体のシステム状態を通知できるか否か(true:有/false:無)
    bool attitude_report = 4;           // 機体の姿勢情報を通知できるか否か(true:有/false:無)
}

// 飛行する空間予約ID
message FlightId {
    oneof flight_id {
        string flight_plan_id = 5;          // 飛行計画ID
        string flight_space_id = 6;         // 飛行空間ID
    }
}

// 機体位置情報
// 緯度、経度、高度(高度属性)は必須
// wp_tag_report=trueの際はnext_wp_tagも必須
message UavPosition {
    // 機体位置 必須 一定時間情報通知されない場合クリア
    // 高度属性はMSLかELLIPSOIDEのみ指定可能
    Position position = 1;
    // 機首方位（°） 0-360 North=0 時計回り UAVAttitudeのyaw(North=0)に同じ
    optional float heading = 2;

    // GBS誤差距離(m) オプショナル 一定時間情報通知されない場合クリア
    optional float error_distance = 3;

    // -- 速度情報 オプショナル 一定時間情報通知されない場合クリア
    // 東方向速度 (m/s)
    optional float velocity_x = 4;
    // 北方向速度 (m/s)
    optional float velocity_y = 5;
    // 上昇速度 (m/s)
    optional float velocity_z = 6;

    // -- タグ情報 ポート機能利用時は必須 一定時間情報通知されない場合クリア
    // 機体が次に向かうWPのタグ名
    // UavAbilityのwp_tag_report=true時は必ず指定
    optional string next_wp_tag = 7;
}

// 機体姿勢情報
// UavAbilityのattitude_report=true時は最低1つ以上のフィールドを設定する
message UavAttitude{
    // -- 姿勢情報 一定時間情報通知されない場合クリア
    optional float roll = 1;                // ロール(radian)
    optional float pitch = 2;               // ピッチ(radian)
    optional float yaw = 3;                 // ヨー(radian) North=0 時計回り
    optional float roll_speed = 4;          // ロール速度(rad/sec)
    optional float pitch_speed = 5;         // ピッチ速度(rad/sec)
    optional float yaw_speed = 6;           // ヨー速度(rad/sec)

    // -- 速度情報 一定時間情報通知されない場合クリア
    optional float speed = 7;               // 機首方向スピード(m/sec)　※COG速度ではない
    optional float slip_speed = 8;          // 機体横方向の移動速度(m/sec)
    optional float descent_speed = 9;       // 機体降下速度(m/sec)

    // -- 対地上速度情報 一定時間情報通知されない場合クリア
    optional float cog_speed = 10;          // 対地上速さ(m/sec)
    optional float cog = 11;                // 対地上進行方向(degree) North=0 時計回り
}

// バッテリー情報  一定時間情報通知されない場合クリア
message UavBattery {
    // バッテリー残容量(0〜1) 1=100%
    // UavAbilityのbattery_status_report=true時は必須
    float remaining = 1;
    // (任意)バッテリー電圧[V]
    optional float voltage_battery = 2;
    // (任意)電流量[A]
    optional float current_battery = 3;
}

// 機体ステータス情報
// UavAbilityのsystem_status_report=true時は必須
message UavStatus {
    optional string message = 1;                     // 下記のステータス詳細以外に指定するメッセージ(任意)

    // -- ステータス詳細 選択 一定時間通知されない場合クリア
    // UavAbilityのsystem_status_report=true時は必須
    oneof status_detail {
        UavSystemStatus system = 3;         // 機体状態
        UavFlightStatus flight = 4;         // 飛行状態
        UavArmStatus status = 5;            // ARMステータス
    }

    // 機体状態
    message UavSystemStatus {
        Status status = 1;                      // 機体状態
        string message = 2;                     // メッセージ
        message Status {
            bool non =1;                        // 初期状態
            bool system_error = 2;              // システムエラー
            bool low_battery = 3;               // バッテリー低下(40%以下)
            bool sensor_error = 4;              // センサーエラー
            bool cpu_over_load = 5;             // CPUオーバーロード
            bool increase_drop_rate = 6;        // パケットロスト増加(50%以上)
            bool warning = 7;                   // その他の警告事象発生
            bool emergency = 8;                 // その他の緊急時症発生
            bool empty_battery = 9;             // バッテリー切れ(20%以下)
        }
    }

    // 飛行状態
    message UavFlightStatus {
        STATUS status =1;                   // 飛行状態
        MODE mode = 2;                      // 飛行モード
        string message = 3;                 // メッセージ
        int64 time = 4;                     // 状態取得時刻(UNIX時刻)(sec)
        enum STATUS {
            STATUS_UNSPECIFIED = 0;         // 未設定
            STATUS_FLIGHT = 1;              // 飛行中
            STATUS_TAKE_OFF = 2;            // 離陸中
            STATUS_LANDING = 3;             // 着陸中
            STATUS_LANDED = 4;              // 着陸状態
            STATUS_UNREGIST = 5;            // 着陸
            STATUS_UNKNOWN = 6;             // 未知
        }
        enum MODE {
            MODE_UNSPECIFIED = 0;           // 未設定
            MODE_GOTO = 1;                  // GOTO
            MODE_PAUSE = 2;                 // PAUSE
            MODE_MANUAL =3;                 // MANUAL
            MODE_AUTO = 4;                  // AUTO
            MODE_RTL = 5;                   // RTL
        }
    }

    // ARMステータス
    message UavArmStatus {
        STATUS status =1;                   // 飛行状態
        enum STATUS {
            STATUS_UNSPECIFIED = 0;         // 未設定
            STATUS_ARM = 1;                 // ARM
            STATUS_DISARM = 2;              // DISARM
        }
    }
}

